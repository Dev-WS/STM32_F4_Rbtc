
STM32_F4_Rbtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08005e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000528  20000088  08005f18  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200005b0  08006440  00020088  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bd1f  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a4b  00000000  00000000  0002bdd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009e0  00000000  00000000  0002d828  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000928  00000000  00000000  0002e208  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003c88  00000000  00000000  0002eb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b7f7  00000000  00000000  000327b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ebe2c  00000000  00000000  0003dfaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  00129ddb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002bf4  00000000  00000000  00129e58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e68 	.word	0x08005e68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08005e68 	.word	0x08005e68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_Init+0x34>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_Init+0x34>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_Init+0x34>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_Init+0x34>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f955 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	200f      	movs	r0, #15
 80005a4:	f000 f810 	bl	80005c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f000 f806 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023c00 	.word	0x40023c00

080005b8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x54>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x58>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f965 	bl	80008b6 <HAL_SYSTICK_Config>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00e      	b.n	8000614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	d80a      	bhi.n	8000612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	2200      	movs	r2, #0
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f000 f92d 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <HAL_InitTick+0x5c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
 8000610:	e000      	b.n	8000614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000020 	.word	0x20000020
 8000620:	20000004 	.word	0x20000004
 8000624:	20000000 	.word	0x20000000

08000628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x20>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_IncTick+0x24>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_IncTick+0x24>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000004 	.word	0x20000004
 800064c:	20000500 	.word	0x20000500

08000650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_GetTick+0x14>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000500 	.word	0x20000500

08000668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000670:	f7ff ffee 	bl	8000650 <HAL_GetTick>
 8000674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000680:	d005      	beq.n	800068e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_Delay+0x40>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4413      	add	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068e:	bf00      	nop
 8000690:	f7ff ffde 	bl	8000650 <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	429a      	cmp	r2, r3
 800069e:	d8f7      	bhi.n	8000690 <HAL_Delay+0x28>
  {
  }
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000004 	.word	0x20000004

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db0b      	blt.n	800073a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 021f 	and.w	r2, r3, #31
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <__NVIC_EnableIRQ+0x38>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff29 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff3e 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff8e 	bl	80007a0 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff31 	bl	8000710 <__NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffa2 	bl	8000808 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d106      	bne.n	80008ec <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008ea:	e005      	b.n	80008f8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008f2:	f023 0304 	bic.w	r3, r3, #4
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000e010 	.word	0xe000e010

08000908 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800090c:	f000 f802 	bl	8000914 <HAL_SYSTICK_Callback>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	e16b      	b.n	8000c18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000940:	2201      	movs	r2, #1
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	429a      	cmp	r2, r3
 800095a:	f040 815a 	bne.w	8000c12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b02      	cmp	r3, #2
 8000964:	d003      	beq.n	800096e <HAL_GPIO_Init+0x4a>
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	2b12      	cmp	r3, #18
 800096c:	d123      	bne.n	80009b6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	08da      	lsrs	r2, r3, #3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3208      	adds	r2, #8
 8000976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800097a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	220f      	movs	r2, #15
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	4013      	ands	r3, r2
 8000990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	691a      	ldr	r2, [r3, #16]
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	f003 0307 	and.w	r3, r3, #7
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	08da      	lsrs	r2, r3, #3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3208      	adds	r2, #8
 80009b0:	69b9      	ldr	r1, [r7, #24]
 80009b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2203      	movs	r2, #3
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 0203 	and.w	r2, r3, #3
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d00b      	beq.n	8000a0a <HAL_GPIO_Init+0xe6>
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d007      	beq.n	8000a0a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009fe:	2b11      	cmp	r3, #17
 8000a00:	d003      	beq.n	8000a0a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b12      	cmp	r3, #18
 8000a08:	d130      	bne.n	8000a6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	2203      	movs	r2, #3
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	68da      	ldr	r2, [r3, #12]
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a40:	2201      	movs	r2, #1
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	091b      	lsrs	r3, r3, #4
 8000a56:	f003 0201 	and.w	r2, r3, #1
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f000 80b4 	beq.w	8000c12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b5f      	ldr	r3, [pc, #380]	; (8000c2c <HAL_GPIO_Init+0x308>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a5e      	ldr	r2, [pc, #376]	; (8000c2c <HAL_GPIO_Init+0x308>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b5c      	ldr	r3, [pc, #368]	; (8000c2c <HAL_GPIO_Init+0x308>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ac6:	4a5a      	ldr	r2, [pc, #360]	; (8000c30 <HAL_GPIO_Init+0x30c>)
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	3302      	adds	r3, #2
 8000ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	220f      	movs	r2, #15
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a51      	ldr	r2, [pc, #324]	; (8000c34 <HAL_GPIO_Init+0x310>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d02b      	beq.n	8000b4a <HAL_GPIO_Init+0x226>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a50      	ldr	r2, [pc, #320]	; (8000c38 <HAL_GPIO_Init+0x314>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d025      	beq.n	8000b46 <HAL_GPIO_Init+0x222>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a4f      	ldr	r2, [pc, #316]	; (8000c3c <HAL_GPIO_Init+0x318>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d01f      	beq.n	8000b42 <HAL_GPIO_Init+0x21e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a4e      	ldr	r2, [pc, #312]	; (8000c40 <HAL_GPIO_Init+0x31c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d019      	beq.n	8000b3e <HAL_GPIO_Init+0x21a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4d      	ldr	r2, [pc, #308]	; (8000c44 <HAL_GPIO_Init+0x320>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d013      	beq.n	8000b3a <HAL_GPIO_Init+0x216>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4c      	ldr	r2, [pc, #304]	; (8000c48 <HAL_GPIO_Init+0x324>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d00d      	beq.n	8000b36 <HAL_GPIO_Init+0x212>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4b      	ldr	r2, [pc, #300]	; (8000c4c <HAL_GPIO_Init+0x328>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d007      	beq.n	8000b32 <HAL_GPIO_Init+0x20e>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a4a      	ldr	r2, [pc, #296]	; (8000c50 <HAL_GPIO_Init+0x32c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d101      	bne.n	8000b2e <HAL_GPIO_Init+0x20a>
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	e00e      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b2e:	2308      	movs	r3, #8
 8000b30:	e00c      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b32:	2306      	movs	r3, #6
 8000b34:	e00a      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b36:	2305      	movs	r3, #5
 8000b38:	e008      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	e006      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e004      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b42:	2302      	movs	r3, #2
 8000b44:	e002      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	69fa      	ldr	r2, [r7, #28]
 8000b4e:	f002 0203 	and.w	r2, r2, #3
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	4093      	lsls	r3, r2
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b5c:	4934      	ldr	r1, [pc, #208]	; (8000c30 <HAL_GPIO_Init+0x30c>)
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	3302      	adds	r3, #2
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b6a:	4b3a      	ldr	r3, [pc, #232]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	43db      	mvns	r3, r3
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	4013      	ands	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b8e:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b94:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bb8:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c0c:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3301      	adds	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	2b0f      	cmp	r3, #15
 8000c1c:	f67f ae90 	bls.w	8000940 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c20:	bf00      	nop
 8000c22:	3724      	adds	r7, #36	; 0x24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40013800 	.word	0x40013800
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	40020800 	.word	0x40020800
 8000c40:	40020c00 	.word	0x40020c00
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40021400 	.word	0x40021400
 8000c4c:	40021800 	.word	0x40021800
 8000c50:	40021c00 	.word	0x40021c00
 8000c54:	40013c00 	.word	0x40013c00

08000c58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	461a      	mov	r2, r3
 8000c64:	460b      	mov	r3, r1
 8000c66:	817b      	strh	r3, [r7, #10]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000c6c:	f7ff fcf0 	bl	8000650 <HAL_GetTick>
 8000c70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b20      	cmp	r3, #32
 8000c7c:	f040 80e0 	bne.w	8000e40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2319      	movs	r3, #25
 8000c86:	2201      	movs	r2, #1
 8000c88:	4970      	ldr	r1, [pc, #448]	; (8000e4c <HAL_I2C_Master_Transmit+0x1f4>)
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f000 fa7a 	bl	8001184 <I2C_WaitOnFlagUntilTimeout>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000c96:	2302      	movs	r3, #2
 8000c98:	e0d3      	b.n	8000e42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d101      	bne.n	8000ca8 <HAL_I2C_Master_Transmit+0x50>
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e0cc      	b.n	8000e42 <HAL_I2C_Master_Transmit+0x1ea>
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d007      	beq.n	8000cce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f042 0201 	orr.w	r2, r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2221      	movs	r2, #33	; 0x21
 8000ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2210      	movs	r2, #16
 8000cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	893a      	ldrh	r2, [r7, #8]
 8000cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4a50      	ldr	r2, [pc, #320]	; (8000e50 <HAL_I2C_Master_Transmit+0x1f8>)
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000d10:	8979      	ldrh	r1, [r7, #10]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	6a3a      	ldr	r2, [r7, #32]
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f000 f9be 	bl	8001098 <I2C_MasterRequestWrite>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e08d      	b.n	8000e42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000d3c:	e066      	b.n	8000e0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	6a39      	ldr	r1, [r7, #32]
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f000 faf4 	bl	8001330 <I2C_WaitOnTXEFlagUntilTimeout>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d00d      	beq.n	8000d6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	d107      	bne.n	8000d66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e06b      	b.n	8000e42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	781a      	ldrb	r2, [r3, #0]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	3b01      	subs	r3, #1
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d11b      	bne.n	8000de0 <HAL_I2C_Master_Transmit+0x188>
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d017      	beq.n	8000de0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	6a39      	ldr	r1, [r7, #32]
 8000de4:	68f8      	ldr	r0, [r7, #12]
 8000de6:	f000 fae4 	bl	80013b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00d      	beq.n	8000e0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d107      	bne.n	8000e08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e01a      	b.n	8000e42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d194      	bne.n	8000d3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2220      	movs	r2, #32
 8000e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e000      	b.n	8000e42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000e40:	2302      	movs	r3, #2
  }
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	00100002 	.word	0x00100002
 8000e50:	ffff0000 	.word	0xffff0000

08000e54 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	460b      	mov	r3, r1
 8000e62:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff fbf4 	bl	8000650 <HAL_GetTick>
 8000e68:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b20      	cmp	r3, #32
 8000e78:	f040 8105 	bne.w	8001086 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2319      	movs	r3, #25
 8000e82:	2201      	movs	r2, #1
 8000e84:	4982      	ldr	r1, [pc, #520]	; (8001090 <HAL_I2C_IsDeviceReady+0x23c>)
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f000 f97c 	bl	8001184 <I2C_WaitOnFlagUntilTimeout>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000e92:	2302      	movs	r3, #2
 8000e94:	e0f8      	b.n	8001088 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d101      	bne.n	8000ea4 <HAL_I2C_IsDeviceReady+0x50>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e0f1      	b.n	8001088 <HAL_I2C_IsDeviceReady+0x234>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d007      	beq.n	8000eca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f042 0201 	orr.w	r2, r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ed8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2224      	movs	r2, #36	; 0x24
 8000ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4a6a      	ldr	r2, [pc, #424]	; (8001094 <HAL_I2C_IsDeviceReady+0x240>)
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000efc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f000 f93a 	bl	8001184 <I2C_WaitOnFlagUntilTimeout>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e0b6      	b.n	8001088 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000f28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fb91 	bl	8000650 <HAL_GetTick>
 8000f2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2301      	moveq	r3, #1
 8000f40:	2300      	movne	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f54:	bf0c      	ite	eq
 8000f56:	2301      	moveq	r3, #1
 8000f58:	2300      	movne	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000f5e:	e025      	b.n	8000fac <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000f60:	f7ff fb76 	bl	8000650 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d302      	bcc.n	8000f76 <HAL_I2C_IsDeviceReady+0x122>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d103      	bne.n	8000f7e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	22a0      	movs	r2, #160	; 0xa0
 8000f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	bf0c      	ite	eq
 8000f8c:	2301      	moveq	r3, #1
 8000f8e:	2300      	movne	r3, #0
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa2:	bf0c      	ite	eq
 8000fa4:	2301      	moveq	r3, #1
 8000fa6:	2300      	movne	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2ba0      	cmp	r3, #160	; 0xa0
 8000fb6:	d005      	beq.n	8000fc4 <HAL_I2C_IsDeviceReady+0x170>
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d102      	bne.n	8000fc4 <HAL_I2C_IsDeviceReady+0x170>
 8000fbe:	7dbb      	ldrb	r3, [r7, #22]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0cd      	beq.n	8000f60 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d129      	bne.n	800102e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fe8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2319      	movs	r3, #25
 8001006:	2201      	movs	r2, #1
 8001008:	4921      	ldr	r1, [pc, #132]	; (8001090 <HAL_I2C_IsDeviceReady+0x23c>)
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 f8ba 	bl	8001184 <I2C_WaitOnFlagUntilTimeout>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e036      	b.n	8001088 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2220      	movs	r2, #32
 800101e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e02c      	b.n	8001088 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800103c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001046:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2319      	movs	r3, #25
 800104e:	2201      	movs	r2, #1
 8001050:	490f      	ldr	r1, [pc, #60]	; (8001090 <HAL_I2C_IsDeviceReady+0x23c>)
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 f896 	bl	8001184 <I2C_WaitOnFlagUntilTimeout>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e012      	b.n	8001088 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	3301      	adds	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	f4ff af3e 	bcc.w	8000eee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2220      	movs	r2, #32
 8001076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8001086:	2302      	movs	r3, #2
  }
}
 8001088:	4618      	mov	r0, r3
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	00100002 	.word	0x00100002
 8001094:	ffff0000 	.word	0xffff0000

08001098 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af02      	add	r7, sp, #8
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	460b      	mov	r3, r1
 80010a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d006      	beq.n	80010c2 <I2C_MasterRequestWrite+0x2a>
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d003      	beq.n	80010c2 <I2C_MasterRequestWrite+0x2a>
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80010c0:	d108      	bne.n	80010d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e00b      	b.n	80010ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	2b12      	cmp	r3, #18
 80010da:	d107      	bne.n	80010ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 f843 	bl	8001184 <I2C_WaitOnFlagUntilTimeout>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e035      	b.n	8001174 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001110:	d108      	bne.n	8001124 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001112:	897b      	ldrh	r3, [r7, #10]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	e01b      	b.n	800115c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001124:	897b      	ldrh	r3, [r7, #10]
 8001126:	11db      	asrs	r3, r3, #7
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f003 0306 	and.w	r3, r3, #6
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f063 030f 	orn	r3, r3, #15
 8001134:	b2da      	uxtb	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	490e      	ldr	r1, [pc, #56]	; (800117c <I2C_MasterRequestWrite+0xe4>)
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f000 f875 	bl	8001232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e010      	b.n	8001174 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001152:	897b      	ldrh	r3, [r7, #10]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	4907      	ldr	r1, [pc, #28]	; (8001180 <I2C_MasterRequestWrite+0xe8>)
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 f865 	bl	8001232 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	00010008 	.word	0x00010008
 8001180:	00010002 	.word	0x00010002

08001184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001194:	e025      	b.n	80011e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d021      	beq.n	80011e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800119e:	f7ff fa57 	bl	8000650 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d302      	bcc.n	80011b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d116      	bne.n	80011e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2200      	movs	r2, #0
 80011b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2220      	movs	r2, #32
 80011be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f043 0220 	orr.w	r2, r3, #32
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e023      	b.n	800122a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	0c1b      	lsrs	r3, r3, #16
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d10d      	bne.n	8001208 <I2C_WaitOnFlagUntilTimeout+0x84>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4013      	ands	r3, r2
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf0c      	ite	eq
 80011fe:	2301      	moveq	r3, #1
 8001200:	2300      	movne	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	e00c      	b.n	8001222 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4013      	ands	r3, r2
 8001214:	b29b      	uxth	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	429a      	cmp	r2, r3
 8001226:	d0b6      	beq.n	8001196 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001240:	e051      	b.n	80012e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001250:	d123      	bne.n	800129a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001260:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800126a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2220      	movs	r2, #32
 8001276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f043 0204 	orr.w	r2, r3, #4
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e046      	b.n	8001328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d021      	beq.n	80012e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012a2:	f7ff f9d5 	bl	8000650 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d302      	bcc.n	80012b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d116      	bne.n	80012e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2220      	movs	r2, #32
 80012c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f043 0220 	orr.w	r2, r3, #32
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e020      	b.n	8001328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	0c1b      	lsrs	r3, r3, #16
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d10c      	bne.n	800130a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4013      	ands	r3, r2
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf14      	ite	ne
 8001302:	2301      	movne	r3, #1
 8001304:	2300      	moveq	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	e00b      	b.n	8001322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	43da      	mvns	r2, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	4013      	ands	r3, r2
 8001316:	b29b      	uxth	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	bf14      	ite	ne
 800131c:	2301      	movne	r3, #1
 800131e:	2300      	moveq	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d18d      	bne.n	8001242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800133c:	e02d      	b.n	800139a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 f878 	bl	8001434 <I2C_IsAcknowledgeFailed>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e02d      	b.n	80013aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d021      	beq.n	800139a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001356:	f7ff f97b 	bl	8000650 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	429a      	cmp	r2, r3
 8001364:	d302      	bcc.n	800136c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d116      	bne.n	800139a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2220      	movs	r2, #32
 8001376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f043 0220 	orr.w	r2, r3, #32
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e007      	b.n	80013aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a4:	2b80      	cmp	r3, #128	; 0x80
 80013a6:	d1ca      	bne.n	800133e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80013be:	e02d      	b.n	800141c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 f837 	bl	8001434 <I2C_IsAcknowledgeFailed>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e02d      	b.n	800142c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d6:	d021      	beq.n	800141c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013d8:	f7ff f93a 	bl	8000650 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d302      	bcc.n	80013ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d116      	bne.n	800141c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2220      	movs	r2, #32
 80013f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f043 0220 	orr.w	r2, r3, #32
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e007      	b.n	800142c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	2b04      	cmp	r3, #4
 8001428:	d1ca      	bne.n	80013c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144a:	d11b      	bne.n	8001484 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001454:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2220      	movs	r2, #32
 8001460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f043 0204 	orr.w	r2, r3, #4
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e22d      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d075      	beq.n	800159e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014b2:	4ba3      	ldr	r3, [pc, #652]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d00c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014be:	4ba0      	ldr	r3, [pc, #640]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d112      	bne.n	80014f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ca:	4b9d      	ldr	r3, [pc, #628]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014d6:	d10b      	bne.n	80014f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	4b99      	ldr	r3, [pc, #612]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d05b      	beq.n	800159c <HAL_RCC_OscConfig+0x108>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d157      	bne.n	800159c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e208      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f8:	d106      	bne.n	8001508 <HAL_RCC_OscConfig+0x74>
 80014fa:	4b91      	ldr	r3, [pc, #580]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a90      	ldr	r2, [pc, #576]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e01d      	b.n	8001544 <HAL_RCC_OscConfig+0xb0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x98>
 8001512:	4b8b      	ldr	r3, [pc, #556]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a8a      	ldr	r2, [pc, #552]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b88      	ldr	r3, [pc, #544]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a87      	ldr	r2, [pc, #540]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e00b      	b.n	8001544 <HAL_RCC_OscConfig+0xb0>
 800152c:	4b84      	ldr	r3, [pc, #528]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a83      	ldr	r2, [pc, #524]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b81      	ldr	r3, [pc, #516]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a80      	ldr	r2, [pc, #512]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff f880 	bl	8000650 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff f87c 	bl	8000650 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e1cd      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b76      	ldr	r3, [pc, #472]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0xc0>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff f86c 	bl	8000650 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff f868 	bl	8000650 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1b9      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	4b6c      	ldr	r3, [pc, #432]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0xe8>
 800159a:	e000      	b.n	800159e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d063      	beq.n	8001672 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015aa:	4b65      	ldr	r3, [pc, #404]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00b      	beq.n	80015ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b6:	4b62      	ldr	r3, [pc, #392]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d11c      	bne.n	80015fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c2:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d116      	bne.n	80015fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	4b5c      	ldr	r3, [pc, #368]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_RCC_OscConfig+0x152>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e18d      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e6:	4b56      	ldr	r3, [pc, #344]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4952      	ldr	r1, [pc, #328]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	e03a      	b.n	8001672 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001604:	4b4f      	ldr	r3, [pc, #316]	; (8001744 <HAL_RCC_OscConfig+0x2b0>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff f821 	bl	8000650 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff f81d 	bl	8000650 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e16e      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001624:	4b46      	ldr	r3, [pc, #280]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b43      	ldr	r3, [pc, #268]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4940      	ldr	r1, [pc, #256]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
 8001644:	e015      	b.n	8001672 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <HAL_RCC_OscConfig+0x2b0>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff f800 	bl	8000650 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001654:	f7fe fffc 	bl	8000650 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e14d      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	4b36      	ldr	r3, [pc, #216]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d030      	beq.n	80016e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d016      	beq.n	80016b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001686:	4b30      	ldr	r3, [pc, #192]	; (8001748 <HAL_RCC_OscConfig+0x2b4>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7fe ffe0 	bl	8000650 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001694:	f7fe ffdc 	bl	8000650 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e12d      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x200>
 80016b2:	e015      	b.n	80016e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_RCC_OscConfig+0x2b4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7fe ffc9 	bl	8000650 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c2:	f7fe ffc5 	bl	8000650 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e116      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80a0 	beq.w	800182e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10f      	bne.n	800171e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800171a:	2301      	movs	r3, #1
 800171c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_RCC_OscConfig+0x2b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d121      	bne.n	800176e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_RCC_OscConfig+0x2b8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_RCC_OscConfig+0x2b8>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001736:	f7fe ff8b 	bl	8000650 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	e011      	b.n	8001762 <HAL_RCC_OscConfig+0x2ce>
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	42470000 	.word	0x42470000
 8001748:	42470e80 	.word	0x42470e80
 800174c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001750:	f7fe ff7e 	bl	8000650 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e0cf      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b6a      	ldr	r3, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0x478>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d106      	bne.n	8001784 <HAL_RCC_OscConfig+0x2f0>
 8001776:	4b66      	ldr	r3, [pc, #408]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	4a65      	ldr	r2, [pc, #404]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6713      	str	r3, [r2, #112]	; 0x70
 8001782:	e01c      	b.n	80017be <HAL_RCC_OscConfig+0x32a>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d10c      	bne.n	80017a6 <HAL_RCC_OscConfig+0x312>
 800178c:	4b60      	ldr	r3, [pc, #384]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a5f      	ldr	r2, [pc, #380]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
 8001798:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	4a5c      	ldr	r2, [pc, #368]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6713      	str	r3, [r2, #112]	; 0x70
 80017a4:	e00b      	b.n	80017be <HAL_RCC_OscConfig+0x32a>
 80017a6:	4b5a      	ldr	r3, [pc, #360]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a59      	ldr	r2, [pc, #356]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	4b57      	ldr	r3, [pc, #348]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a56      	ldr	r2, [pc, #344]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 80017b8:	f023 0304 	bic.w	r3, r3, #4
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d015      	beq.n	80017f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7fe ff43 	bl	8000650 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7fe ff3f 	bl	8000650 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e08e      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	4b4a      	ldr	r3, [pc, #296]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ee      	beq.n	80017ce <HAL_RCC_OscConfig+0x33a>
 80017f0:	e014      	b.n	800181c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7fe ff2d 	bl	8000650 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7fe ff29 	bl	8000650 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e078      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ee      	bne.n	80017fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d105      	bne.n	800182e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001822:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a3a      	ldr	r2, [pc, #232]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 8001828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d064      	beq.n	8001900 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001836:	4b36      	ldr	r3, [pc, #216]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b08      	cmp	r3, #8
 8001840:	d05c      	beq.n	80018fc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d141      	bne.n	80018ce <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b32      	ldr	r3, [pc, #200]	; (8001914 <HAL_RCC_OscConfig+0x480>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7fe fefe 	bl	8000650 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001858:	f7fe fefa 	bl	8000650 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e04b      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	4b29      	ldr	r3, [pc, #164]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	019b      	lsls	r3, r3, #6
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	085b      	lsrs	r3, r3, #1
 800188e:	3b01      	subs	r3, #1
 8001890:	041b      	lsls	r3, r3, #16
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	061b      	lsls	r3, r3, #24
 800189a:	491d      	ldr	r1, [pc, #116]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_RCC_OscConfig+0x480>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7fe fed3 	bl	8000650 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ae:	f7fe fecf 	bl	8000650 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e020      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x41a>
 80018cc:	e018      	b.n	8001900 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_RCC_OscConfig+0x480>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7fe febc 	bl	8000650 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018dc:	f7fe feb8 	bl	8000650 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e009      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_RCC_OscConfig+0x47c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x448>
 80018fa:	e001      	b.n	8001900 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40007000 	.word	0x40007000
 8001910:	40023800 	.word	0x40023800
 8001914:	42470060 	.word	0x42470060

08001918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0ca      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b67      	ldr	r3, [pc, #412]	; (8001acc <HAL_RCC_ClockConfig+0x1b4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d90c      	bls.n	8001954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b64      	ldr	r3, [pc, #400]	; (8001acc <HAL_RCC_ClockConfig+0x1b4>)
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b62      	ldr	r3, [pc, #392]	; (8001acc <HAL_RCC_ClockConfig+0x1b4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0b6      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800196c:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a57      	ldr	r2, [pc, #348]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001984:	4b52      	ldr	r3, [pc, #328]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a51      	ldr	r2, [pc, #324]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800198a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800198e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b4f      	ldr	r3, [pc, #316]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	494c      	ldr	r1, [pc, #304]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d044      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d119      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e07d      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e06d      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e065      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4933      	ldr	r1, [pc, #204]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7fe fe22 	bl	8000650 <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7fe fe1e 	bl	8000650 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e04d      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_RCC_ClockConfig+0x1b4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 030f 	and.w	r3, r3, #15
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d20c      	bcs.n	8001a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_ClockConfig+0x1b4>)
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <HAL_RCC_ClockConfig+0x1b4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e030      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4915      	ldr	r1, [pc, #84]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	490d      	ldr	r1, [pc, #52]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a9e:	f000 f81d 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001aa2:	4601      	mov	r1, r0
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	5cd3      	ldrb	r3, [r2, r3]
 8001ab2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001aba:	200f      	movs	r0, #15
 8001abc:	f7fe fd84 	bl	80005c8 <HAL_InitTick>

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023c00 	.word	0x40023c00
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08005e1c 	.word	0x08005e1c
 8001ad8:	20000020 	.word	0x20000020

08001adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	2300      	movs	r3, #0
 8001aec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af2:	4b63      	ldr	r3, [pc, #396]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d007      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x32>
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d008      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x38>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 80b4 	bne.w	8001c70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b5e      	ldr	r3, [pc, #376]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b0a:	60bb      	str	r3, [r7, #8]
       break;
 8001b0c:	e0b3      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b0e:	4b5e      	ldr	r3, [pc, #376]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001b10:	60bb      	str	r3, [r7, #8]
      break;
 8001b12:	e0b0      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b14:	4b5a      	ldr	r3, [pc, #360]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b1e:	4b58      	ldr	r3, [pc, #352]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d04a      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2a:	4b55      	ldr	r3, [pc, #340]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	099b      	lsrs	r3, r3, #6
 8001b30:	f04f 0400 	mov.w	r4, #0
 8001b34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	ea03 0501 	and.w	r5, r3, r1
 8001b40:	ea04 0602 	and.w	r6, r4, r2
 8001b44:	4629      	mov	r1, r5
 8001b46:	4632      	mov	r2, r6
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	f04f 0400 	mov.w	r4, #0
 8001b50:	0154      	lsls	r4, r2, #5
 8001b52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b56:	014b      	lsls	r3, r1, #5
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4622      	mov	r2, r4
 8001b5c:	1b49      	subs	r1, r1, r5
 8001b5e:	eb62 0206 	sbc.w	r2, r2, r6
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	f04f 0400 	mov.w	r4, #0
 8001b6a:	0194      	lsls	r4, r2, #6
 8001b6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b70:	018b      	lsls	r3, r1, #6
 8001b72:	1a5b      	subs	r3, r3, r1
 8001b74:	eb64 0402 	sbc.w	r4, r4, r2
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	00e2      	lsls	r2, r4, #3
 8001b82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b86:	00d9      	lsls	r1, r3, #3
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4614      	mov	r4, r2
 8001b8c:	195b      	adds	r3, r3, r5
 8001b8e:	eb44 0406 	adc.w	r4, r4, r6
 8001b92:	f04f 0100 	mov.w	r1, #0
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	0262      	lsls	r2, r4, #9
 8001b9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ba0:	0259      	lsls	r1, r3, #9
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4614      	mov	r4, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	4621      	mov	r1, r4
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f04f 0400 	mov.w	r4, #0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4623      	mov	r3, r4
 8001bb4:	f7fe fb64 	bl	8000280 <__aeabi_uldivmod>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	460c      	mov	r4, r1
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	e049      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	f04f 0400 	mov.w	r4, #0
 8001bca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	ea03 0501 	and.w	r5, r3, r1
 8001bd6:	ea04 0602 	and.w	r6, r4, r2
 8001bda:	4629      	mov	r1, r5
 8001bdc:	4632      	mov	r2, r6
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	f04f 0400 	mov.w	r4, #0
 8001be6:	0154      	lsls	r4, r2, #5
 8001be8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bec:	014b      	lsls	r3, r1, #5
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4622      	mov	r2, r4
 8001bf2:	1b49      	subs	r1, r1, r5
 8001bf4:	eb62 0206 	sbc.w	r2, r2, r6
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	f04f 0400 	mov.w	r4, #0
 8001c00:	0194      	lsls	r4, r2, #6
 8001c02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c06:	018b      	lsls	r3, r1, #6
 8001c08:	1a5b      	subs	r3, r3, r1
 8001c0a:	eb64 0402 	sbc.w	r4, r4, r2
 8001c0e:	f04f 0100 	mov.w	r1, #0
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	00e2      	lsls	r2, r4, #3
 8001c18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c1c:	00d9      	lsls	r1, r3, #3
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4614      	mov	r4, r2
 8001c22:	195b      	adds	r3, r3, r5
 8001c24:	eb44 0406 	adc.w	r4, r4, r6
 8001c28:	f04f 0100 	mov.w	r1, #0
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	02a2      	lsls	r2, r4, #10
 8001c32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c36:	0299      	lsls	r1, r3, #10
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4614      	mov	r4, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	4621      	mov	r1, r4
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f04f 0400 	mov.w	r4, #0
 8001c46:	461a      	mov	r2, r3
 8001c48:	4623      	mov	r3, r4
 8001c4a:	f7fe fb19 	bl	8000280 <__aeabi_uldivmod>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460c      	mov	r4, r1
 8001c52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	60bb      	str	r3, [r7, #8]
      break;
 8001c6e:	e002      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c72:	60bb      	str	r3, [r7, #8]
      break;
 8001c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c76:	68bb      	ldr	r3, [r7, #8]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	007a1200 	.word	0x007a1200

08001c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000020 	.word	0x20000020

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cac:	4601      	mov	r1, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08005e2c 	.word	0x08005e2c

08001ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cd0:	f7ff ffdc 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cd4:	4601      	mov	r1, r0
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	0b5b      	lsrs	r3, r3, #13
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4a03      	ldr	r2, [pc, #12]	; (8001cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	08005e2c 	.word	0x08005e2c

08001cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e03f      	b.n	8001d86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f837 	bl	8001d8e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2224      	movs	r2, #36	; 0x24
 8001d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f915 	bl	8001f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695a      	ldr	r2, [r3, #20]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b088      	sub	sp, #32
 8001da6:	af02      	add	r7, sp, #8
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	f040 8083 	bne.w	8001eca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <HAL_UART_Transmit+0x2e>
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e07b      	b.n	8001ecc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_UART_Transmit+0x40>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e074      	b.n	8001ecc <HAL_UART_Transmit+0x12a>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2221      	movs	r2, #33	; 0x21
 8001df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001df8:	f7fe fc2a 	bl	8000650 <HAL_GetTick>
 8001dfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	88fa      	ldrh	r2, [r7, #6]
 8001e02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	88fa      	ldrh	r2, [r7, #6]
 8001e08:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e0a:	e042      	b.n	8001e92 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e22:	d122      	bne.n	8001e6a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f850 	bl	8001ed4 <UART_WaitOnFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e046      	b.n	8001ecc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e50:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d103      	bne.n	8001e62 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	e017      	b.n	8001e92 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3301      	adds	r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	e013      	b.n	8001e92 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2200      	movs	r2, #0
 8001e72:	2180      	movs	r1, #128	; 0x80
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f82d 	bl	8001ed4 <UART_WaitOnFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e023      	b.n	8001ecc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	60ba      	str	r2, [r7, #8]
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1b7      	bne.n	8001e0c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2140      	movs	r1, #64	; 0x40
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f814 	bl	8001ed4 <UART_WaitOnFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e00a      	b.n	8001ecc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001eca:	2302      	movs	r3, #2
  }
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ee4:	e02c      	b.n	8001f40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d028      	beq.n	8001f40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d007      	beq.n	8001f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ef4:	f7fe fbac 	bl	8000650 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d21d      	bcs.n	8001f40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e00f      	b.n	8001f60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d0c3      	beq.n	8001ee6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001fa8:	f023 030c 	bic.w	r3, r3, #12
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	68f9      	ldr	r1, [r7, #12]
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fd4:	f040 80e4 	bne.w	80021a0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4aab      	ldr	r2, [pc, #684]	; (800228c <UART_SetConfig+0x324>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d004      	beq.n	8001fec <UART_SetConfig+0x84>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4aaa      	ldr	r2, [pc, #680]	; (8002290 <UART_SetConfig+0x328>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d16c      	bne.n	80020c6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001fec:	f7ff fe6e 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009a      	lsls	r2, r3, #2
 8001ffa:	441a      	add	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	4aa3      	ldr	r2, [pc, #652]	; (8002294 <UART_SetConfig+0x32c>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	011c      	lsls	r4, r3, #4
 8002010:	f7ff fe5c 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8002014:	4602      	mov	r2, r0
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	009a      	lsls	r2, r3, #2
 800201e:	441a      	add	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fbb2 f5f3 	udiv	r5, r2, r3
 800202a:	f7ff fe4f 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 800202e:	4602      	mov	r2, r0
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	009a      	lsls	r2, r3, #2
 8002038:	441a      	add	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fbb2 f3f3 	udiv	r3, r2, r3
 8002044:	4a93      	ldr	r2, [pc, #588]	; (8002294 <UART_SetConfig+0x32c>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2264      	movs	r2, #100	; 0x64
 800204e:	fb02 f303 	mul.w	r3, r2, r3
 8002052:	1aeb      	subs	r3, r5, r3
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	3332      	adds	r3, #50	; 0x32
 8002058:	4a8e      	ldr	r2, [pc, #568]	; (8002294 <UART_SetConfig+0x32c>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002066:	441c      	add	r4, r3
 8002068:	f7ff fe30 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 800206c:	4602      	mov	r2, r0
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	009a      	lsls	r2, r3, #2
 8002076:	441a      	add	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002082:	f7ff fe23 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8002086:	4602      	mov	r2, r0
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	009a      	lsls	r2, r3, #2
 8002090:	441a      	add	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	4a7d      	ldr	r2, [pc, #500]	; (8002294 <UART_SetConfig+0x32c>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2264      	movs	r2, #100	; 0x64
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	1aeb      	subs	r3, r5, r3
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	3332      	adds	r3, #50	; 0x32
 80020b0:	4a78      	ldr	r2, [pc, #480]	; (8002294 <UART_SetConfig+0x32c>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	f003 0207 	and.w	r2, r3, #7
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4422      	add	r2, r4
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	e154      	b.n	8002370 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80020c6:	f7ff fded 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 80020ca:	4602      	mov	r2, r0
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	009a      	lsls	r2, r3, #2
 80020d4:	441a      	add	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	4a6c      	ldr	r2, [pc, #432]	; (8002294 <UART_SetConfig+0x32c>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	011c      	lsls	r4, r3, #4
 80020ea:	f7ff fddb 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009a      	lsls	r2, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fbb2 f5f3 	udiv	r5, r2, r3
 8002104:	f7ff fdce 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002108:	4602      	mov	r2, r0
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	009a      	lsls	r2, r3, #2
 8002112:	441a      	add	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	4a5d      	ldr	r2, [pc, #372]	; (8002294 <UART_SetConfig+0x32c>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	2264      	movs	r2, #100	; 0x64
 8002128:	fb02 f303 	mul.w	r3, r2, r3
 800212c:	1aeb      	subs	r3, r5, r3
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	3332      	adds	r3, #50	; 0x32
 8002132:	4a58      	ldr	r2, [pc, #352]	; (8002294 <UART_SetConfig+0x32c>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002140:	441c      	add	r4, r3
 8002142:	f7ff fdaf 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002146:	4602      	mov	r2, r0
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009a      	lsls	r2, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fbb2 f5f3 	udiv	r5, r2, r3
 800215c:	f7ff fda2 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002160:	4602      	mov	r2, r0
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	009a      	lsls	r2, r3, #2
 800216a:	441a      	add	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	4a47      	ldr	r2, [pc, #284]	; (8002294 <UART_SetConfig+0x32c>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	2264      	movs	r2, #100	; 0x64
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	1aeb      	subs	r3, r5, r3
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	3332      	adds	r3, #50	; 0x32
 800218a:	4a42      	ldr	r2, [pc, #264]	; (8002294 <UART_SetConfig+0x32c>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	f003 0207 	and.w	r2, r3, #7
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4422      	add	r2, r4
 800219c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800219e:	e0e7      	b.n	8002370 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a39      	ldr	r2, [pc, #228]	; (800228c <UART_SetConfig+0x324>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d004      	beq.n	80021b4 <UART_SetConfig+0x24c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a38      	ldr	r2, [pc, #224]	; (8002290 <UART_SetConfig+0x328>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d171      	bne.n	8002298 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80021b4:	f7ff fd8a 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	009a      	lsls	r2, r3, #2
 80021c2:	441a      	add	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	4a31      	ldr	r2, [pc, #196]	; (8002294 <UART_SetConfig+0x32c>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	011c      	lsls	r4, r3, #4
 80021d8:	f7ff fd78 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	009a      	lsls	r2, r3, #2
 80021e6:	441a      	add	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	fbb2 f5f3 	udiv	r5, r2, r3
 80021f2:	f7ff fd6b 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 80021f6:	4602      	mov	r2, r0
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	009a      	lsls	r2, r3, #2
 8002200:	441a      	add	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	4a21      	ldr	r2, [pc, #132]	; (8002294 <UART_SetConfig+0x32c>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	2264      	movs	r2, #100	; 0x64
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	1aeb      	subs	r3, r5, r3
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	3332      	adds	r3, #50	; 0x32
 8002220:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <UART_SetConfig+0x32c>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222c:	441c      	add	r4, r3
 800222e:	f7ff fd4d 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8002232:	4602      	mov	r2, r0
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	009a      	lsls	r2, r3, #2
 800223c:	441a      	add	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	fbb2 f5f3 	udiv	r5, r2, r3
 8002248:	f7ff fd40 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 800224c:	4602      	mov	r2, r0
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	009a      	lsls	r2, r3, #2
 8002256:	441a      	add	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <UART_SetConfig+0x32c>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	2264      	movs	r2, #100	; 0x64
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	1aeb      	subs	r3, r5, r3
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	3332      	adds	r3, #50	; 0x32
 8002276:	4a07      	ldr	r2, [pc, #28]	; (8002294 <UART_SetConfig+0x32c>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	f003 020f 	and.w	r2, r3, #15
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4422      	add	r2, r4
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	e071      	b.n	8002370 <UART_SetConfig+0x408>
 800228c:	40011000 	.word	0x40011000
 8002290:	40011400 	.word	0x40011400
 8002294:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002298:	f7ff fd04 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 800229c:	4602      	mov	r2, r0
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	009a      	lsls	r2, r3, #2
 80022a6:	441a      	add	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b2:	4a31      	ldr	r2, [pc, #196]	; (8002378 <UART_SetConfig+0x410>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	011c      	lsls	r4, r3, #4
 80022bc:	f7ff fcf2 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	009a      	lsls	r2, r3, #2
 80022ca:	441a      	add	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80022d6:	f7ff fce5 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 80022da:	4602      	mov	r2, r0
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	009a      	lsls	r2, r3, #2
 80022e4:	441a      	add	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f0:	4a21      	ldr	r2, [pc, #132]	; (8002378 <UART_SetConfig+0x410>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2264      	movs	r2, #100	; 0x64
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	1aeb      	subs	r3, r5, r3
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	3332      	adds	r3, #50	; 0x32
 8002304:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <UART_SetConfig+0x410>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002310:	441c      	add	r4, r3
 8002312:	f7ff fcc7 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002316:	4602      	mov	r2, r0
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	009a      	lsls	r2, r3, #2
 8002320:	441a      	add	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fbb2 f5f3 	udiv	r5, r2, r3
 800232c:	f7ff fcba 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002330:	4602      	mov	r2, r0
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	009a      	lsls	r2, r3, #2
 800233a:	441a      	add	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	4a0c      	ldr	r2, [pc, #48]	; (8002378 <UART_SetConfig+0x410>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	2264      	movs	r2, #100	; 0x64
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	1aeb      	subs	r3, r5, r3
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	3332      	adds	r3, #50	; 0x32
 800235a:	4a07      	ldr	r2, [pc, #28]	; (8002378 <UART_SetConfig+0x410>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	f003 020f 	and.w	r2, r3, #15
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4422      	add	r2, r4
 800236c:	609a      	str	r2, [r3, #8]
}
 800236e:	e7ff      	b.n	8002370 <UART_SetConfig+0x408>
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bdb0      	pop	{r4, r5, r7, pc}
 8002378:	51eb851f 	.word	0x51eb851f

0800237c <Error_handler>:
extern GPIO_InitTypeDef gpio;
extern UART_HandleTypeDef uart2;
extern I2C_HandleTypeDef hi2c1;

void Error_handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
	while(1);
 8002380:	e7fe      	b.n	8002380 <Error_handler+0x4>
	...

08002384 <GPIO_Init>:
}


void GPIO_Init()
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b35      	ldr	r3, [pc, #212]	; (8002464 <GPIO_Init+0xe0>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a34      	ldr	r2, [pc, #208]	; (8002464 <GPIO_Init+0xe0>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b32      	ldr	r3, [pc, #200]	; (8002464 <GPIO_Init+0xe0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <GPIO_Init+0xe0>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a2d      	ldr	r2, [pc, #180]	; (8002464 <GPIO_Init+0xe0>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <GPIO_Init+0xe0>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART2_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	4b27      	ldr	r3, [pc, #156]	; (8002464 <GPIO_Init+0xe0>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a26      	ldr	r2, [pc, #152]	; (8002464 <GPIO_Init+0xe0>)
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <GPIO_Init+0xe0>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <GPIO_Init+0xe0>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a1f      	ldr	r2, [pc, #124]	; (8002464 <GPIO_Init+0xe0>)
 80023e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <GPIO_Init+0xe0>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]

	 gpio.Pin = GPIO_PIN_2;
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <GPIO_Init+0xe4>)
 80023fc:	2204      	movs	r2, #4
 80023fe:	601a      	str	r2, [r3, #0]
	 gpio.Mode =GPIO_MODE_AF_PP;
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <GPIO_Init+0xe4>)
 8002402:	2202      	movs	r2, #2
 8002404:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_PULLUP;
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <GPIO_Init+0xe4>)
 8002408:	2201      	movs	r2, #1
 800240a:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <GPIO_Init+0xe4>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
	 gpio.Alternate =  GPIO_AF7_USART2; //TX
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <GPIO_Init+0xe4>)
 8002414:	2207      	movs	r2, #7
 8002416:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOA,&gpio);
 8002418:	4913      	ldr	r1, [pc, #76]	; (8002468 <GPIO_Init+0xe4>)
 800241a:	4814      	ldr	r0, [pc, #80]	; (800246c <GPIO_Init+0xe8>)
 800241c:	f7fe fa82 	bl	8000924 <HAL_GPIO_Init>

	 gpio.Pin = GPIO_PIN_3; //RX
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <GPIO_Init+0xe4>)
 8002422:	2208      	movs	r2, #8
 8002424:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_OD;
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <GPIO_Init+0xe4>)
 8002428:	2212      	movs	r2, #18
 800242a:	605a      	str	r2, [r3, #4]
	 HAL_GPIO_Init(GPIOA,&gpio);
 800242c:	490e      	ldr	r1, [pc, #56]	; (8002468 <GPIO_Init+0xe4>)
 800242e:	480f      	ldr	r0, [pc, #60]	; (800246c <GPIO_Init+0xe8>)
 8002430:	f7fe fa78 	bl	8000924 <HAL_GPIO_Init>

	 gpio.Pin = GPIO_PIN_8 |GPIO_PIN_9;
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <GPIO_Init+0xe4>)
 8002436:	f44f 7240 	mov.w	r2, #768	; 0x300
 800243a:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_OD;
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <GPIO_Init+0xe4>)
 800243e:	2212      	movs	r2, #18
 8002440:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_NOPULL;
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <GPIO_Init+0xe4>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <GPIO_Init+0xe4>)
 800244a:	2202      	movs	r2, #2
 800244c:	60da      	str	r2, [r3, #12]
	 gpio.Alternate = GPIO_AF4_I2C1;
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <GPIO_Init+0xe4>)
 8002450:	2204      	movs	r2, #4
 8002452:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOB, &gpio);
 8002454:	4904      	ldr	r1, [pc, #16]	; (8002468 <GPIO_Init+0xe4>)
 8002456:	4806      	ldr	r0, [pc, #24]	; (8002470 <GPIO_Init+0xec>)
 8002458:	f7fe fa64 	bl	8000924 <HAL_GPIO_Init>

}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40023800 	.word	0x40023800
 8002468:	20000598 	.word	0x20000598
 800246c:	40020000 	.word	0x40020000
 8002470:	40020400 	.word	0x40020400

08002474 <UART2_Init>:

void UART2_Init()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002478:	2026      	movs	r0, #38	; 0x26
 800247a:	f7fe fa0e 	bl	800089a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 800247e:	2200      	movs	r2, #0
 8002480:	210f      	movs	r1, #15
 8002482:	2026      	movs	r0, #38	; 0x26
 8002484:	f7fe f9ed 	bl	8000862 <HAL_NVIC_SetPriority>

	uart2.Instance = USART2;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <UART2_Init+0x54>)
 800248a:	4a10      	ldr	r2, [pc, #64]	; (80024cc <UART2_Init+0x58>)
 800248c:	601a      	str	r2, [r3, #0]
	uart2.Init.BaudRate = 115200;
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <UART2_Init+0x54>)
 8002490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002494:	605a      	str	r2, [r3, #4]
	uart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <UART2_Init+0x54>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
	uart2.Init.StopBits = UART_STOPBITS_1;
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <UART2_Init+0x54>)
 800249e:	2200      	movs	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
	uart2.Init.Parity = UART_PARITY_NONE;
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <UART2_Init+0x54>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
	uart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a8:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <UART2_Init+0x54>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	619a      	str	r2, [r3, #24]
	uart2.Init.Mode = UART_MODE_TX_RX;
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <UART2_Init+0x54>)
 80024b0:	220c      	movs	r2, #12
 80024b2:	615a      	str	r2, [r3, #20]
	 if ( HAL_UART_Init(&uart2) != HAL_OK )
 80024b4:	4804      	ldr	r0, [pc, #16]	; (80024c8 <UART2_Init+0x54>)
 80024b6:	f7ff fc1d 	bl	8001cf4 <HAL_UART_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <UART2_Init+0x50>
	 {
	 	Error_handler();
 80024c0:	f7ff ff5c 	bl	800237c <Error_handler>
	 }


}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000558 	.word	0x20000558
 80024cc:	40004400 	.word	0x40004400

080024d0 <main>:
*/

#include "main.h"

int main(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b09a      	sub	sp, #104	; 0x68
 80024d4:	af00      	add	r7, sp, #0
	char msg[100];

	HAL_Init();
 80024d6:	f7fe f853 	bl	8000580 <HAL_Init>
	SystemConfigClk();
 80024da:	f000 f89b 	bl	8002614 <SystemConfigClk>
	GPIO_Init();
 80024de:	f7ff ff51 	bl	8002384 <GPIO_Init>
    UART2_Init();
 80024e2:	f7ff ffc7 	bl	8002474 <UART2_Init>
    SSD1306_Init();
 80024e6:	f000 f8f3 	bl	80026d0 <SSD1306_Init>


    memset(msg,0,sizeof(msg));
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	2264      	movs	r2, #100	; 0x64
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fc4b 	bl	8002d8c <memset>
	sprintf(msg,"SYSCLK : %ldHz\r\n",HAL_RCC_GetSysClockFreq());
 80024f6:	f7ff faf1 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	493d      	ldr	r1, [pc, #244]	; (80025f4 <main+0x124>)
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fc4b 	bl	8002d9c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd fe61 	bl	80001d0 <strlen>
 800250e:	4603      	mov	r3, r0
 8002510:	b29a      	uxth	r2, r3
 8002512:	1d39      	adds	r1, r7, #4
 8002514:	f04f 33ff 	mov.w	r3, #4294967295
 8002518:	4837      	ldr	r0, [pc, #220]	; (80025f8 <main+0x128>)
 800251a:	f7ff fc42 	bl	8001da2 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	2264      	movs	r2, #100	; 0x64
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f000 fc31 	bl	8002d8c <memset>
	sprintf(msg,"HCLK   : %ldHz\r\n",HAL_RCC_GetHCLKFreq());
 800252a:	f7ff fbaf 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 800252e:	4602      	mov	r2, r0
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	4932      	ldr	r1, [pc, #200]	; (80025fc <main+0x12c>)
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fc31 	bl	8002d9c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	4618      	mov	r0, r3
 800253e:	f7fd fe47 	bl	80001d0 <strlen>
 8002542:	4603      	mov	r3, r0
 8002544:	b29a      	uxth	r2, r3
 8002546:	1d39      	adds	r1, r7, #4
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	482a      	ldr	r0, [pc, #168]	; (80025f8 <main+0x128>)
 800254e:	f7ff fc28 	bl	8001da2 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	2264      	movs	r2, #100	; 0x64
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fc17 	bl	8002d8c <memset>
	sprintf(msg,"PCLK1  : %ldHz\r\n",HAL_RCC_GetPCLK1Freq());
 800255e:	f7ff fba1 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002562:	4602      	mov	r2, r0
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	4926      	ldr	r1, [pc, #152]	; (8002600 <main+0x130>)
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fc17 	bl	8002d9c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd fe2d 	bl	80001d0 <strlen>
 8002576:	4603      	mov	r3, r0
 8002578:	b29a      	uxth	r2, r3
 800257a:	1d39      	adds	r1, r7, #4
 800257c:	f04f 33ff 	mov.w	r3, #4294967295
 8002580:	481d      	ldr	r0, [pc, #116]	; (80025f8 <main+0x128>)
 8002582:	f7ff fc0e 	bl	8001da2 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	2264      	movs	r2, #100	; 0x64
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fbfd 	bl	8002d8c <memset>
	sprintf(msg,"PCLK2  : %ldHz\r\n\n",HAL_RCC_GetPCLK2Freq());
 8002592:	f7ff fb9b 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8002596:	4602      	mov	r2, r0
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	491a      	ldr	r1, [pc, #104]	; (8002604 <main+0x134>)
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fbfd 	bl	8002d9c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fd fe13 	bl	80001d0 <strlen>
 80025aa:	4603      	mov	r3, r0
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	1d39      	adds	r1, r7, #4
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295
 80025b4:	4810      	ldr	r0, [pc, #64]	; (80025f8 <main+0x128>)
 80025b6:	f7ff fbf4 	bl	8001da2 <HAL_UART_Transmit>

	while(1){

		SSD1306_GotoXY(10,27);
 80025ba:	211b      	movs	r1, #27
 80025bc:	200a      	movs	r0, #10
 80025be:	f000 f9f1 	bl	80029a4 <SSD1306_GotoXY>
		SSD1306_Puts("Hello!", &Font_7x10, 1);
 80025c2:	2201      	movs	r2, #1
 80025c4:	4910      	ldr	r1, [pc, #64]	; (8002608 <main+0x138>)
 80025c6:	4811      	ldr	r0, [pc, #68]	; (800260c <main+0x13c>)
 80025c8:	f000 fa82 	bl	8002ad0 <SSD1306_Puts>
		SSD1306_GotoXY(10,52);
 80025cc:	2134      	movs	r1, #52	; 0x34
 80025ce:	200a      	movs	r0, #10
 80025d0:	f000 f9e8 	bl	80029a4 <SSD1306_GotoXY>
		SSD1306_Puts("Test.", &Font_7x10, 1);
 80025d4:	2201      	movs	r2, #1
 80025d6:	490c      	ldr	r1, [pc, #48]	; (8002608 <main+0x138>)
 80025d8:	480d      	ldr	r0, [pc, #52]	; (8002610 <main+0x140>)
 80025da:	f000 fa79 	bl	8002ad0 <SSD1306_Puts>
		SSD1306_UpdateScreen(); //display
 80025de:	f000 f93b 	bl	8002858 <SSD1306_UpdateScreen>
		SSD1306_Fill(0x01);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f000 f966 	bl	80028b4 <SSD1306_Fill>
		HAL_Delay(1000);
 80025e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ec:	f7fe f83c 	bl	8000668 <HAL_Delay>
		SSD1306_GotoXY(10,27);
 80025f0:	e7e3      	b.n	80025ba <main+0xea>
 80025f2:	bf00      	nop
 80025f4:	08005dbc 	.word	0x08005dbc
 80025f8:	20000558 	.word	0x20000558
 80025fc:	08005dd0 	.word	0x08005dd0
 8002600:	08005de4 	.word	0x08005de4
 8002604:	08005df8 	.word	0x08005df8
 8002608:	20000008 	.word	0x20000008
 800260c:	08005e0c 	.word	0x08005e0c
 8002610:	08005e14 	.word	0x08005e14

08002614 <SystemConfigClk>:

	return 0;
}

void SystemConfigClk()
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	memset(&osc_init,0,sizeof(osc_init));
 8002618:	2230      	movs	r2, #48	; 0x30
 800261a:	2100      	movs	r1, #0
 800261c:	4828      	ldr	r0, [pc, #160]	; (80026c0 <SystemConfigClk+0xac>)
 800261e:	f000 fbb5 	bl	8002d8c <memset>
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002622:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <SystemConfigClk+0xac>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]
    osc_init.HSEState = RCC_HSE_BYPASS;
 8002628:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <SystemConfigClk+0xac>)
 800262a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800262e:	605a      	str	r2, [r3, #4]

    //osc_init.HSEState = RCC_HSE_ON;
    if ( HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8002630:	4823      	ldr	r0, [pc, #140]	; (80026c0 <SystemConfigClk+0xac>)
 8002632:	f7fe ff2f 	bl	8001494 <HAL_RCC_OscConfig>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <SystemConfigClk+0x2c>
    {
    	Error_handler();
 800263c:	f7ff fe9e 	bl	800237c <Error_handler>
    }


    osc_init.PLL.PLLState = RCC_PLL_ON;
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <SystemConfigClk+0xac>)
 8002642:	2202      	movs	r2, #2
 8002644:	619a      	str	r2, [r3, #24]
    osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002646:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <SystemConfigClk+0xac>)
 8002648:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800264c:	61da      	str	r2, [r3, #28]


    // SYS_CLOCK PLL
	osc_init.PLL.PLLM = 8;
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <SystemConfigClk+0xac>)
 8002650:	2208      	movs	r2, #8
 8002652:	621a      	str	r2, [r3, #32]
	osc_init.PLL.PLLN = 50;
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <SystemConfigClk+0xac>)
 8002656:	2232      	movs	r2, #50	; 0x32
 8002658:	625a      	str	r2, [r3, #36]	; 0x24
	osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 800265a:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <SystemConfigClk+0xac>)
 800265c:	2202      	movs	r2, #2
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
	osc_init.PLL.PLLQ = 2;
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <SystemConfigClk+0xac>)
 8002662:	2202      	movs	r2, #2
 8002664:	62da      	str	r2, [r3, #44]	; 0x2c

    clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <SystemConfigClk+0xb0>)
 8002668:	220f      	movs	r2, #15
 800266a:	601a      	str	r2, [r3, #0]
    					RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <SystemConfigClk+0xb0>)
 800266e:	2201      	movs	r2, #1
 8002670:	605a      	str	r2, [r3, #4]
    //clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  // NOT WORKING
    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002672:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <SystemConfigClk+0xb0>)
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	609a      	str	r2, [r3, #8]
    clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <SystemConfigClk+0xb0>)
 800267a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800267e:	60da      	str	r2, [r3, #12]
    clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8002680:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <SystemConfigClk+0xb0>)
 8002682:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002686:	611a      	str	r2, [r3, #16]

    if( HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK)
 8002688:	2100      	movs	r1, #0
 800268a:	480e      	ldr	r0, [pc, #56]	; (80026c4 <SystemConfigClk+0xb0>)
 800268c:	f7ff f944 	bl	8001918 <HAL_RCC_ClockConfig>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <SystemConfigClk+0x86>
    {
    	Error_handler();
 8002696:	f7ff fe71 	bl	800237c <Error_handler>
    }

    __HAL_RCC_HSI_DISABLE();
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <SystemConfigClk+0xb4>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80026a0:	f7ff faf4 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <SystemConfigClk+0xb8>)
 80026a8:	fba3 2302 	umull	r2, r3, r3, r2
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe f901 	bl	80008b6 <HAL_SYSTICK_Config>

     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80026b4:	2004      	movs	r0, #4
 80026b6:	f7fe f90b 	bl	80008d0 <HAL_SYSTICK_CLKSourceConfig>

}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200000a4 	.word	0x200000a4
 80026c4:	200000d4 	.word	0x200000d4
 80026c8:	42470000 	.word	0x42470000
 80026cc:	10624dd3 	.word	0x10624dd3

080026d0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80026d6:	f000 fa21 	bl	8002b1c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80026da:	f644 6320 	movw	r3, #20000	; 0x4e20
 80026de:	2201      	movs	r2, #1
 80026e0:	2178      	movs	r1, #120	; 0x78
 80026e2:	485b      	ldr	r0, [pc, #364]	; (8002850 <SSD1306_Init+0x180>)
 80026e4:	f7fe fbb6 	bl	8000e54 <HAL_I2C_IsDeviceReady>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e0a9      	b.n	8002846 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80026f2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80026f6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80026f8:	e002      	b.n	8002700 <SSD1306_Init+0x30>
		p--;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f9      	bne.n	80026fa <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002706:	22ae      	movs	r2, #174	; 0xae
 8002708:	2100      	movs	r1, #0
 800270a:	2078      	movs	r0, #120	; 0x78
 800270c:	f000 fa62 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002710:	2220      	movs	r2, #32
 8002712:	2100      	movs	r1, #0
 8002714:	2078      	movs	r0, #120	; 0x78
 8002716:	f000 fa5d 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800271a:	2210      	movs	r2, #16
 800271c:	2100      	movs	r1, #0
 800271e:	2078      	movs	r0, #120	; 0x78
 8002720:	f000 fa58 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002724:	22b0      	movs	r2, #176	; 0xb0
 8002726:	2100      	movs	r1, #0
 8002728:	2078      	movs	r0, #120	; 0x78
 800272a:	f000 fa53 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800272e:	22c8      	movs	r2, #200	; 0xc8
 8002730:	2100      	movs	r1, #0
 8002732:	2078      	movs	r0, #120	; 0x78
 8002734:	f000 fa4e 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002738:	2200      	movs	r2, #0
 800273a:	2100      	movs	r1, #0
 800273c:	2078      	movs	r0, #120	; 0x78
 800273e:	f000 fa49 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002742:	2210      	movs	r2, #16
 8002744:	2100      	movs	r1, #0
 8002746:	2078      	movs	r0, #120	; 0x78
 8002748:	f000 fa44 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800274c:	2240      	movs	r2, #64	; 0x40
 800274e:	2100      	movs	r1, #0
 8002750:	2078      	movs	r0, #120	; 0x78
 8002752:	f000 fa3f 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002756:	2281      	movs	r2, #129	; 0x81
 8002758:	2100      	movs	r1, #0
 800275a:	2078      	movs	r0, #120	; 0x78
 800275c:	f000 fa3a 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002760:	22ff      	movs	r2, #255	; 0xff
 8002762:	2100      	movs	r1, #0
 8002764:	2078      	movs	r0, #120	; 0x78
 8002766:	f000 fa35 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800276a:	22a1      	movs	r2, #161	; 0xa1
 800276c:	2100      	movs	r1, #0
 800276e:	2078      	movs	r0, #120	; 0x78
 8002770:	f000 fa30 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002774:	22a6      	movs	r2, #166	; 0xa6
 8002776:	2100      	movs	r1, #0
 8002778:	2078      	movs	r0, #120	; 0x78
 800277a:	f000 fa2b 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800277e:	22a8      	movs	r2, #168	; 0xa8
 8002780:	2100      	movs	r1, #0
 8002782:	2078      	movs	r0, #120	; 0x78
 8002784:	f000 fa26 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002788:	223f      	movs	r2, #63	; 0x3f
 800278a:	2100      	movs	r1, #0
 800278c:	2078      	movs	r0, #120	; 0x78
 800278e:	f000 fa21 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002792:	22a4      	movs	r2, #164	; 0xa4
 8002794:	2100      	movs	r1, #0
 8002796:	2078      	movs	r0, #120	; 0x78
 8002798:	f000 fa1c 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800279c:	22d3      	movs	r2, #211	; 0xd3
 800279e:	2100      	movs	r1, #0
 80027a0:	2078      	movs	r0, #120	; 0x78
 80027a2:	f000 fa17 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80027a6:	2200      	movs	r2, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	2078      	movs	r0, #120	; 0x78
 80027ac:	f000 fa12 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80027b0:	22d5      	movs	r2, #213	; 0xd5
 80027b2:	2100      	movs	r1, #0
 80027b4:	2078      	movs	r0, #120	; 0x78
 80027b6:	f000 fa0d 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80027ba:	22f0      	movs	r2, #240	; 0xf0
 80027bc:	2100      	movs	r1, #0
 80027be:	2078      	movs	r0, #120	; 0x78
 80027c0:	f000 fa08 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80027c4:	22d9      	movs	r2, #217	; 0xd9
 80027c6:	2100      	movs	r1, #0
 80027c8:	2078      	movs	r0, #120	; 0x78
 80027ca:	f000 fa03 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80027ce:	2222      	movs	r2, #34	; 0x22
 80027d0:	2100      	movs	r1, #0
 80027d2:	2078      	movs	r0, #120	; 0x78
 80027d4:	f000 f9fe 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80027d8:	22da      	movs	r2, #218	; 0xda
 80027da:	2100      	movs	r1, #0
 80027dc:	2078      	movs	r0, #120	; 0x78
 80027de:	f000 f9f9 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80027e2:	2212      	movs	r2, #18
 80027e4:	2100      	movs	r1, #0
 80027e6:	2078      	movs	r0, #120	; 0x78
 80027e8:	f000 f9f4 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80027ec:	22db      	movs	r2, #219	; 0xdb
 80027ee:	2100      	movs	r1, #0
 80027f0:	2078      	movs	r0, #120	; 0x78
 80027f2:	f000 f9ef 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80027f6:	2220      	movs	r2, #32
 80027f8:	2100      	movs	r1, #0
 80027fa:	2078      	movs	r0, #120	; 0x78
 80027fc:	f000 f9ea 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002800:	228d      	movs	r2, #141	; 0x8d
 8002802:	2100      	movs	r1, #0
 8002804:	2078      	movs	r0, #120	; 0x78
 8002806:	f000 f9e5 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800280a:	2214      	movs	r2, #20
 800280c:	2100      	movs	r1, #0
 800280e:	2078      	movs	r0, #120	; 0x78
 8002810:	f000 f9e0 	bl	8002bd4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002814:	22af      	movs	r2, #175	; 0xaf
 8002816:	2100      	movs	r1, #0
 8002818:	2078      	movs	r0, #120	; 0x78
 800281a:	f000 f9db 	bl	8002bd4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800281e:	222e      	movs	r2, #46	; 0x2e
 8002820:	2100      	movs	r1, #0
 8002822:	2078      	movs	r0, #120	; 0x78
 8002824:	f000 f9d6 	bl	8002bd4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002828:	2000      	movs	r0, #0
 800282a:	f000 f843 	bl	80028b4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800282e:	f000 f813 	bl	8002858 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <SSD1306_Init+0x184>)
 8002834:	2200      	movs	r2, #0
 8002836:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <SSD1306_Init+0x184>)
 800283a:	2200      	movs	r2, #0
 800283c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <SSD1306_Init+0x184>)
 8002840:	2201      	movs	r2, #1
 8002842:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002844:	2301      	movs	r3, #1
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000504 	.word	0x20000504
 8002854:	200004e8 	.word	0x200004e8

08002858 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800285e:	2300      	movs	r3, #0
 8002860:	71fb      	strb	r3, [r7, #7]
 8002862:	e01d      	b.n	80028a0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	3b50      	subs	r3, #80	; 0x50
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	2100      	movs	r1, #0
 800286e:	2078      	movs	r0, #120	; 0x78
 8002870:	f000 f9b0 	bl	8002bd4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002874:	2200      	movs	r2, #0
 8002876:	2100      	movs	r1, #0
 8002878:	2078      	movs	r0, #120	; 0x78
 800287a:	f000 f9ab 	bl	8002bd4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800287e:	2210      	movs	r2, #16
 8002880:	2100      	movs	r1, #0
 8002882:	2078      	movs	r0, #120	; 0x78
 8002884:	f000 f9a6 	bl	8002bd4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	01db      	lsls	r3, r3, #7
 800288c:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <SSD1306_UpdateScreen+0x58>)
 800288e:	441a      	add	r2, r3
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	2140      	movs	r1, #64	; 0x40
 8002894:	2078      	movs	r0, #120	; 0x78
 8002896:	f000 f955 	bl	8002b44 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	3301      	adds	r3, #1
 800289e:	71fb      	strb	r3, [r7, #7]
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	2b07      	cmp	r3, #7
 80028a4:	d9de      	bls.n	8002864 <SSD1306_UpdateScreen+0xc>
	}
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200000e8 	.word	0x200000e8

080028b4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <SSD1306_Fill+0x14>
 80028c4:	2300      	movs	r3, #0
 80028c6:	e000      	b.n	80028ca <SSD1306_Fill+0x16>
 80028c8:	23ff      	movs	r3, #255	; 0xff
 80028ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ce:	4619      	mov	r1, r3
 80028d0:	4803      	ldr	r0, [pc, #12]	; (80028e0 <SSD1306_Fill+0x2c>)
 80028d2:	f000 fa5b 	bl	8002d8c <memset>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	200000e8 	.word	0x200000e8

080028e4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	80fb      	strh	r3, [r7, #6]
 80028ee:	460b      	mov	r3, r1
 80028f0:	80bb      	strh	r3, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	70fb      	strb	r3, [r7, #3]
	if (
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b7f      	cmp	r3, #127	; 0x7f
 80028fa:	d848      	bhi.n	800298e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80028fc:	88bb      	ldrh	r3, [r7, #4]
 80028fe:	2b3f      	cmp	r3, #63	; 0x3f
 8002900:	d845      	bhi.n	800298e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002902:	4b26      	ldr	r3, [pc, #152]	; (800299c <SSD1306_DrawPixel+0xb8>)
 8002904:	791b      	ldrb	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d11a      	bne.n	8002954 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	88bb      	ldrh	r3, [r7, #4]
 8002922:	08db      	lsrs	r3, r3, #3
 8002924:	b298      	uxth	r0, r3
 8002926:	4603      	mov	r3, r0
 8002928:	01db      	lsls	r3, r3, #7
 800292a:	4413      	add	r3, r2
 800292c:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <SSD1306_DrawPixel+0xbc>)
 800292e:	5cd3      	ldrb	r3, [r2, r3]
 8002930:	b25a      	sxtb	r2, r3
 8002932:	88bb      	ldrh	r3, [r7, #4]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	2101      	movs	r1, #1
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	b25b      	sxtb	r3, r3
 8002940:	4313      	orrs	r3, r2
 8002942:	b259      	sxtb	r1, r3
 8002944:	88fa      	ldrh	r2, [r7, #6]
 8002946:	4603      	mov	r3, r0
 8002948:	01db      	lsls	r3, r3, #7
 800294a:	4413      	add	r3, r2
 800294c:	b2c9      	uxtb	r1, r1
 800294e:	4a14      	ldr	r2, [pc, #80]	; (80029a0 <SSD1306_DrawPixel+0xbc>)
 8002950:	54d1      	strb	r1, [r2, r3]
 8002952:	e01d      	b.n	8002990 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002954:	88fa      	ldrh	r2, [r7, #6]
 8002956:	88bb      	ldrh	r3, [r7, #4]
 8002958:	08db      	lsrs	r3, r3, #3
 800295a:	b298      	uxth	r0, r3
 800295c:	4603      	mov	r3, r0
 800295e:	01db      	lsls	r3, r3, #7
 8002960:	4413      	add	r3, r2
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <SSD1306_DrawPixel+0xbc>)
 8002964:	5cd3      	ldrb	r3, [r2, r3]
 8002966:	b25a      	sxtb	r2, r3
 8002968:	88bb      	ldrh	r3, [r7, #4]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	2101      	movs	r1, #1
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	b25b      	sxtb	r3, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	b25b      	sxtb	r3, r3
 800297a:	4013      	ands	r3, r2
 800297c:	b259      	sxtb	r1, r3
 800297e:	88fa      	ldrh	r2, [r7, #6]
 8002980:	4603      	mov	r3, r0
 8002982:	01db      	lsls	r3, r3, #7
 8002984:	4413      	add	r3, r2
 8002986:	b2c9      	uxtb	r1, r1
 8002988:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <SSD1306_DrawPixel+0xbc>)
 800298a:	54d1      	strb	r1, [r2, r3]
 800298c:	e000      	b.n	8002990 <SSD1306_DrawPixel+0xac>
		return;
 800298e:	bf00      	nop
	}
}
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	200004e8 	.word	0x200004e8
 80029a0:	200000e8 	.word	0x200000e8

080029a4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	460a      	mov	r2, r1
 80029ae:	80fb      	strh	r3, [r7, #6]
 80029b0:	4613      	mov	r3, r2
 80029b2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80029b4:	4a05      	ldr	r2, [pc, #20]	; (80029cc <SSD1306_GotoXY+0x28>)
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80029ba:	4a04      	ldr	r2, [pc, #16]	; (80029cc <SSD1306_GotoXY+0x28>)
 80029bc:	88bb      	ldrh	r3, [r7, #4]
 80029be:	8053      	strh	r3, [r2, #2]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	200004e8 	.word	0x200004e8

080029d0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	71fb      	strb	r3, [r7, #7]
 80029dc:	4613      	mov	r3, r2
 80029de:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80029e0:	4b3a      	ldr	r3, [pc, #232]	; (8002acc <SSD1306_Putc+0xfc>)
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	4413      	add	r3, r2
	if (
 80029ec:	2b7f      	cmp	r3, #127	; 0x7f
 80029ee:	dc07      	bgt.n	8002a00 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80029f0:	4b36      	ldr	r3, [pc, #216]	; (8002acc <SSD1306_Putc+0xfc>)
 80029f2:	885b      	ldrh	r3, [r3, #2]
 80029f4:	461a      	mov	r2, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	785b      	ldrb	r3, [r3, #1]
 80029fa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80029fc:	2b3f      	cmp	r3, #63	; 0x3f
 80029fe:	dd01      	ble.n	8002a04 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e05e      	b.n	8002ac2 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	e04b      	b.n	8002aa2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	3b20      	subs	r3, #32
 8002a12:	6839      	ldr	r1, [r7, #0]
 8002a14:	7849      	ldrb	r1, [r1, #1]
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	440b      	add	r3, r1
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	4413      	add	r3, r2
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	e030      	b.n	8002a90 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d010      	beq.n	8002a60 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002a3e:	4b23      	ldr	r3, [pc, #140]	; (8002acc <SSD1306_Putc+0xfc>)
 8002a40:	881a      	ldrh	r2, [r3, #0]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	b298      	uxth	r0, r3
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <SSD1306_Putc+0xfc>)
 8002a4c:	885a      	ldrh	r2, [r3, #2]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	79ba      	ldrb	r2, [r7, #6]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f7ff ff43 	bl	80028e4 <SSD1306_DrawPixel>
 8002a5e:	e014      	b.n	8002a8a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002a60:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <SSD1306_Putc+0xfc>)
 8002a62:	881a      	ldrh	r2, [r3, #0]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	b298      	uxth	r0, r3
 8002a6c:	4b17      	ldr	r3, [pc, #92]	; (8002acc <SSD1306_Putc+0xfc>)
 8002a6e:	885a      	ldrh	r2, [r3, #2]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	b299      	uxth	r1, r3
 8002a78:	79bb      	ldrb	r3, [r7, #6]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf0c      	ite	eq
 8002a7e:	2301      	moveq	r3, #1
 8002a80:	2300      	movne	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	f7ff ff2d 	bl	80028e4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d3c8      	bcc.n	8002a2e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	785b      	ldrb	r3, [r3, #1]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d3ad      	bcc.n	8002a0a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002aae:	4b07      	ldr	r3, [pc, #28]	; (8002acc <SSD1306_Putc+0xfc>)
 8002ab0:	881a      	ldrh	r2, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <SSD1306_Putc+0xfc>)
 8002abe:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	200004e8 	.word	0x200004e8

08002ad0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	4613      	mov	r3, r2
 8002adc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002ade:	e012      	b.n	8002b06 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	79fa      	ldrb	r2, [r7, #7]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff71 	bl	80029d0 <SSD1306_Putc>
 8002aee:	4603      	mov	r3, r0
 8002af0:	461a      	mov	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d002      	beq.n	8002b00 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	e008      	b.n	8002b12 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3301      	adds	r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1e8      	bne.n	8002ae0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	781b      	ldrb	r3, [r3, #0]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <ssd1306_I2C_Init+0x24>)
 8002b24:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002b26:	e002      	b.n	8002b2e <ssd1306_I2C_Init+0x12>
		p--;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f9      	bne.n	8002b28 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	0003d090 	.word	0x0003d090

08002b44 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b0c7      	sub	sp, #284	; 0x11c
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	4608      	mov	r0, r1
 8002b4e:	4639      	mov	r1, r7
 8002b50:	600a      	str	r2, [r1, #0]
 8002b52:	4619      	mov	r1, r3
 8002b54:	1dfb      	adds	r3, r7, #7
 8002b56:	4622      	mov	r2, r4
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	1dbb      	adds	r3, r7, #6
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	460a      	mov	r2, r1
 8002b64:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002b66:	f107 030c 	add.w	r3, r7, #12
 8002b6a:	1dba      	adds	r2, r7, #6
 8002b6c:	7812      	ldrb	r2, [r2, #0]
 8002b6e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002b76:	e010      	b.n	8002b9a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002b78:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002b7c:	463a      	mov	r2, r7
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	441a      	add	r2, r3
 8002b82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002b86:	3301      	adds	r3, #1
 8002b88:	7811      	ldrb	r1, [r2, #0]
 8002b8a:	f107 020c 	add.w	r2, r7, #12
 8002b8e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002b90:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002b94:	3301      	adds	r3, #1
 8002b96:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002b9a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	1d3a      	adds	r2, r7, #4
 8002ba2:	8812      	ldrh	r2, [r2, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d8e7      	bhi.n	8002b78 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002ba8:	1dfb      	adds	r3, r7, #7
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b299      	uxth	r1, r3
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	b298      	uxth	r0, r3
 8002bb6:	f107 020c 	add.w	r2, r7, #12
 8002bba:	230a      	movs	r3, #10
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <ssd1306_I2C_WriteMulti+0x8c>)
 8002bc2:	f7fe f849 	bl	8000c58 <HAL_I2C_Master_Transmit>
}
 8002bc6:	bf00      	nop
 8002bc8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd90      	pop	{r4, r7, pc}
 8002bd0:	20000504 	.word	0x20000504

08002bd4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
 8002bde:	460b      	mov	r3, r1
 8002be0:	71bb      	strb	r3, [r7, #6]
 8002be2:	4613      	mov	r3, r2
 8002be4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002be6:	79bb      	ldrb	r3, [r7, #6]
 8002be8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002bea:	797b      	ldrb	r3, [r7, #5]
 8002bec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	b299      	uxth	r1, r3
 8002bf2:	f107 020c 	add.w	r2, r7, #12
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	4803      	ldr	r0, [pc, #12]	; (8002c0c <ssd1306_I2C_Write+0x38>)
 8002bfe:	f7fe f82b 	bl	8000c58 <HAL_I2C_Master_Transmit>
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000504 	.word	0x20000504

08002c10 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002c14:	f7fd fd08 	bl	8000628 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8002c18:	f7fd fe76 	bl	8000908 <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <_sbrk+0x50>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <_sbrk+0x16>
		heap_end = &end;
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <_sbrk+0x50>)
 8002c32:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <_sbrk+0x54>)
 8002c34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <_sbrk+0x50>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <_sbrk+0x50>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4413      	add	r3, r2
 8002c44:	466a      	mov	r2, sp
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d907      	bls.n	8002c5a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002c4a:	f000 f875 	bl	8002d38 <__errno>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	230c      	movs	r3, #12
 8002c52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002c54:	f04f 33ff 	mov.w	r3, #4294967295
 8002c58:	e006      	b.n	8002c68 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <_sbrk+0x50>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	4a03      	ldr	r2, [pc, #12]	; (8002c70 <_sbrk+0x50>)
 8002c64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c66:	68fb      	ldr	r3, [r7, #12]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	200004f4 	.word	0x200004f4
 8002c74:	200005b0 	.word	0x200005b0

08002c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <SystemInit+0x60>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	4a15      	ldr	r2, [pc, #84]	; (8002cd8 <SystemInit+0x60>)
 8002c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <SystemInit+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <SystemInit+0x64>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c98:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <SystemInit+0x64>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <SystemInit+0x64>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <SystemInit+0x64>)
 8002ca4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002cae:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <SystemInit+0x64>)
 8002cb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <SystemInit+0x68>)
 8002cb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <SystemInit+0x64>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a08      	ldr	r2, [pc, #32]	; (8002cdc <SystemInit+0x64>)
 8002cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <SystemInit+0x64>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cc6:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <SystemInit+0x60>)
 8002cc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ccc:	609a      	str	r2, [r3, #8]
#endif
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	24003010 	.word	0x24003010

08002ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ce8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cea:	e003      	b.n	8002cf4 <LoopCopyDataInit>

08002cec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cf0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cf2:	3104      	adds	r1, #4

08002cf4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cf4:	480b      	ldr	r0, [pc, #44]	; (8002d24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cf8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cfc:	d3f6      	bcc.n	8002cec <CopyDataInit>
  ldr  r2, =_sbss
 8002cfe:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d00:	e002      	b.n	8002d08 <LoopFillZerobss>

08002d02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d04:	f842 3b04 	str.w	r3, [r2], #4

08002d08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d0c:	d3f9      	bcc.n	8002d02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d0e:	f7ff ffb3 	bl	8002c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d12:	f000 f817 	bl	8002d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d16:	f7ff fbdb 	bl	80024d0 <main>
  bx  lr    
 8002d1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002d20:	08005e90 	.word	0x08005e90
  ldr  r0, =_sdata
 8002d24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d28:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8002d2c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002d30:	200005b0 	.word	0x200005b0

08002d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d34:	e7fe      	b.n	8002d34 <ADC_IRQHandler>
	...

08002d38 <__errno>:
 8002d38:	4b01      	ldr	r3, [pc, #4]	; (8002d40 <__errno+0x8>)
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20000024 	.word	0x20000024

08002d44 <__libc_init_array>:
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	4e0d      	ldr	r6, [pc, #52]	; (8002d7c <__libc_init_array+0x38>)
 8002d48:	4c0d      	ldr	r4, [pc, #52]	; (8002d80 <__libc_init_array+0x3c>)
 8002d4a:	1ba4      	subs	r4, r4, r6
 8002d4c:	10a4      	asrs	r4, r4, #2
 8002d4e:	2500      	movs	r5, #0
 8002d50:	42a5      	cmp	r5, r4
 8002d52:	d109      	bne.n	8002d68 <__libc_init_array+0x24>
 8002d54:	4e0b      	ldr	r6, [pc, #44]	; (8002d84 <__libc_init_array+0x40>)
 8002d56:	4c0c      	ldr	r4, [pc, #48]	; (8002d88 <__libc_init_array+0x44>)
 8002d58:	f003 f886 	bl	8005e68 <_init>
 8002d5c:	1ba4      	subs	r4, r4, r6
 8002d5e:	10a4      	asrs	r4, r4, #2
 8002d60:	2500      	movs	r5, #0
 8002d62:	42a5      	cmp	r5, r4
 8002d64:	d105      	bne.n	8002d72 <__libc_init_array+0x2e>
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
 8002d68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d6c:	4798      	blx	r3
 8002d6e:	3501      	adds	r5, #1
 8002d70:	e7ee      	b.n	8002d50 <__libc_init_array+0xc>
 8002d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d76:	4798      	blx	r3
 8002d78:	3501      	adds	r5, #1
 8002d7a:	e7f2      	b.n	8002d62 <__libc_init_array+0x1e>
 8002d7c:	08005e88 	.word	0x08005e88
 8002d80:	08005e88 	.word	0x08005e88
 8002d84:	08005e88 	.word	0x08005e88
 8002d88:	08005e8c 	.word	0x08005e8c

08002d8c <memset>:
 8002d8c:	4402      	add	r2, r0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d100      	bne.n	8002d96 <memset+0xa>
 8002d94:	4770      	bx	lr
 8002d96:	f803 1b01 	strb.w	r1, [r3], #1
 8002d9a:	e7f9      	b.n	8002d90 <memset+0x4>

08002d9c <siprintf>:
 8002d9c:	b40e      	push	{r1, r2, r3}
 8002d9e:	b500      	push	{lr}
 8002da0:	b09c      	sub	sp, #112	; 0x70
 8002da2:	ab1d      	add	r3, sp, #116	; 0x74
 8002da4:	9002      	str	r0, [sp, #8]
 8002da6:	9006      	str	r0, [sp, #24]
 8002da8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002dac:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <siprintf+0x38>)
 8002dae:	9107      	str	r1, [sp, #28]
 8002db0:	9104      	str	r1, [sp, #16]
 8002db2:	4909      	ldr	r1, [pc, #36]	; (8002dd8 <siprintf+0x3c>)
 8002db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002db8:	9105      	str	r1, [sp, #20]
 8002dba:	6800      	ldr	r0, [r0, #0]
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	a902      	add	r1, sp, #8
 8002dc0:	f000 f866 	bl	8002e90 <_svfiprintf_r>
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	b01c      	add	sp, #112	; 0x70
 8002dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dd0:	b003      	add	sp, #12
 8002dd2:	4770      	bx	lr
 8002dd4:	20000024 	.word	0x20000024
 8002dd8:	ffff0208 	.word	0xffff0208

08002ddc <__ssputs_r>:
 8002ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002de0:	688e      	ldr	r6, [r1, #8]
 8002de2:	429e      	cmp	r6, r3
 8002de4:	4682      	mov	sl, r0
 8002de6:	460c      	mov	r4, r1
 8002de8:	4690      	mov	r8, r2
 8002dea:	4699      	mov	r9, r3
 8002dec:	d837      	bhi.n	8002e5e <__ssputs_r+0x82>
 8002dee:	898a      	ldrh	r2, [r1, #12]
 8002df0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002df4:	d031      	beq.n	8002e5a <__ssputs_r+0x7e>
 8002df6:	6825      	ldr	r5, [r4, #0]
 8002df8:	6909      	ldr	r1, [r1, #16]
 8002dfa:	1a6f      	subs	r7, r5, r1
 8002dfc:	6965      	ldr	r5, [r4, #20]
 8002dfe:	2302      	movs	r3, #2
 8002e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e04:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e08:	f109 0301 	add.w	r3, r9, #1
 8002e0c:	443b      	add	r3, r7
 8002e0e:	429d      	cmp	r5, r3
 8002e10:	bf38      	it	cc
 8002e12:	461d      	movcc	r5, r3
 8002e14:	0553      	lsls	r3, r2, #21
 8002e16:	d530      	bpl.n	8002e7a <__ssputs_r+0x9e>
 8002e18:	4629      	mov	r1, r5
 8002e1a:	f000 fb2b 	bl	8003474 <_malloc_r>
 8002e1e:	4606      	mov	r6, r0
 8002e20:	b950      	cbnz	r0, 8002e38 <__ssputs_r+0x5c>
 8002e22:	230c      	movs	r3, #12
 8002e24:	f8ca 3000 	str.w	r3, [sl]
 8002e28:	89a3      	ldrh	r3, [r4, #12]
 8002e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e2e:	81a3      	strh	r3, [r4, #12]
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e38:	463a      	mov	r2, r7
 8002e3a:	6921      	ldr	r1, [r4, #16]
 8002e3c:	f000 faa8 	bl	8003390 <memcpy>
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4a:	81a3      	strh	r3, [r4, #12]
 8002e4c:	6126      	str	r6, [r4, #16]
 8002e4e:	6165      	str	r5, [r4, #20]
 8002e50:	443e      	add	r6, r7
 8002e52:	1bed      	subs	r5, r5, r7
 8002e54:	6026      	str	r6, [r4, #0]
 8002e56:	60a5      	str	r5, [r4, #8]
 8002e58:	464e      	mov	r6, r9
 8002e5a:	454e      	cmp	r6, r9
 8002e5c:	d900      	bls.n	8002e60 <__ssputs_r+0x84>
 8002e5e:	464e      	mov	r6, r9
 8002e60:	4632      	mov	r2, r6
 8002e62:	4641      	mov	r1, r8
 8002e64:	6820      	ldr	r0, [r4, #0]
 8002e66:	f000 fa9e 	bl	80033a6 <memmove>
 8002e6a:	68a3      	ldr	r3, [r4, #8]
 8002e6c:	1b9b      	subs	r3, r3, r6
 8002e6e:	60a3      	str	r3, [r4, #8]
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	441e      	add	r6, r3
 8002e74:	6026      	str	r6, [r4, #0]
 8002e76:	2000      	movs	r0, #0
 8002e78:	e7dc      	b.n	8002e34 <__ssputs_r+0x58>
 8002e7a:	462a      	mov	r2, r5
 8002e7c:	f000 fb54 	bl	8003528 <_realloc_r>
 8002e80:	4606      	mov	r6, r0
 8002e82:	2800      	cmp	r0, #0
 8002e84:	d1e2      	bne.n	8002e4c <__ssputs_r+0x70>
 8002e86:	6921      	ldr	r1, [r4, #16]
 8002e88:	4650      	mov	r0, sl
 8002e8a:	f000 faa5 	bl	80033d8 <_free_r>
 8002e8e:	e7c8      	b.n	8002e22 <__ssputs_r+0x46>

08002e90 <_svfiprintf_r>:
 8002e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e94:	461d      	mov	r5, r3
 8002e96:	898b      	ldrh	r3, [r1, #12]
 8002e98:	061f      	lsls	r7, r3, #24
 8002e9a:	b09d      	sub	sp, #116	; 0x74
 8002e9c:	4680      	mov	r8, r0
 8002e9e:	460c      	mov	r4, r1
 8002ea0:	4616      	mov	r6, r2
 8002ea2:	d50f      	bpl.n	8002ec4 <_svfiprintf_r+0x34>
 8002ea4:	690b      	ldr	r3, [r1, #16]
 8002ea6:	b96b      	cbnz	r3, 8002ec4 <_svfiprintf_r+0x34>
 8002ea8:	2140      	movs	r1, #64	; 0x40
 8002eaa:	f000 fae3 	bl	8003474 <_malloc_r>
 8002eae:	6020      	str	r0, [r4, #0]
 8002eb0:	6120      	str	r0, [r4, #16]
 8002eb2:	b928      	cbnz	r0, 8002ec0 <_svfiprintf_r+0x30>
 8002eb4:	230c      	movs	r3, #12
 8002eb6:	f8c8 3000 	str.w	r3, [r8]
 8002eba:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebe:	e0c8      	b.n	8003052 <_svfiprintf_r+0x1c2>
 8002ec0:	2340      	movs	r3, #64	; 0x40
 8002ec2:	6163      	str	r3, [r4, #20]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ec8:	2320      	movs	r3, #32
 8002eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ece:	2330      	movs	r3, #48	; 0x30
 8002ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ed4:	9503      	str	r5, [sp, #12]
 8002ed6:	f04f 0b01 	mov.w	fp, #1
 8002eda:	4637      	mov	r7, r6
 8002edc:	463d      	mov	r5, r7
 8002ede:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ee2:	b10b      	cbz	r3, 8002ee8 <_svfiprintf_r+0x58>
 8002ee4:	2b25      	cmp	r3, #37	; 0x25
 8002ee6:	d13e      	bne.n	8002f66 <_svfiprintf_r+0xd6>
 8002ee8:	ebb7 0a06 	subs.w	sl, r7, r6
 8002eec:	d00b      	beq.n	8002f06 <_svfiprintf_r+0x76>
 8002eee:	4653      	mov	r3, sl
 8002ef0:	4632      	mov	r2, r6
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	4640      	mov	r0, r8
 8002ef6:	f7ff ff71 	bl	8002ddc <__ssputs_r>
 8002efa:	3001      	adds	r0, #1
 8002efc:	f000 80a4 	beq.w	8003048 <_svfiprintf_r+0x1b8>
 8002f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f02:	4453      	add	r3, sl
 8002f04:	9309      	str	r3, [sp, #36]	; 0x24
 8002f06:	783b      	ldrb	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 809d 	beq.w	8003048 <_svfiprintf_r+0x1b8>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f18:	9304      	str	r3, [sp, #16]
 8002f1a:	9307      	str	r3, [sp, #28]
 8002f1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f20:	931a      	str	r3, [sp, #104]	; 0x68
 8002f22:	462f      	mov	r7, r5
 8002f24:	2205      	movs	r2, #5
 8002f26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002f2a:	4850      	ldr	r0, [pc, #320]	; (800306c <_svfiprintf_r+0x1dc>)
 8002f2c:	f7fd f958 	bl	80001e0 <memchr>
 8002f30:	9b04      	ldr	r3, [sp, #16]
 8002f32:	b9d0      	cbnz	r0, 8002f6a <_svfiprintf_r+0xda>
 8002f34:	06d9      	lsls	r1, r3, #27
 8002f36:	bf44      	itt	mi
 8002f38:	2220      	movmi	r2, #32
 8002f3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f3e:	071a      	lsls	r2, r3, #28
 8002f40:	bf44      	itt	mi
 8002f42:	222b      	movmi	r2, #43	; 0x2b
 8002f44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f48:	782a      	ldrb	r2, [r5, #0]
 8002f4a:	2a2a      	cmp	r2, #42	; 0x2a
 8002f4c:	d015      	beq.n	8002f7a <_svfiprintf_r+0xea>
 8002f4e:	9a07      	ldr	r2, [sp, #28]
 8002f50:	462f      	mov	r7, r5
 8002f52:	2000      	movs	r0, #0
 8002f54:	250a      	movs	r5, #10
 8002f56:	4639      	mov	r1, r7
 8002f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f5c:	3b30      	subs	r3, #48	; 0x30
 8002f5e:	2b09      	cmp	r3, #9
 8002f60:	d94d      	bls.n	8002ffe <_svfiprintf_r+0x16e>
 8002f62:	b1b8      	cbz	r0, 8002f94 <_svfiprintf_r+0x104>
 8002f64:	e00f      	b.n	8002f86 <_svfiprintf_r+0xf6>
 8002f66:	462f      	mov	r7, r5
 8002f68:	e7b8      	b.n	8002edc <_svfiprintf_r+0x4c>
 8002f6a:	4a40      	ldr	r2, [pc, #256]	; (800306c <_svfiprintf_r+0x1dc>)
 8002f6c:	1a80      	subs	r0, r0, r2
 8002f6e:	fa0b f000 	lsl.w	r0, fp, r0
 8002f72:	4318      	orrs	r0, r3
 8002f74:	9004      	str	r0, [sp, #16]
 8002f76:	463d      	mov	r5, r7
 8002f78:	e7d3      	b.n	8002f22 <_svfiprintf_r+0x92>
 8002f7a:	9a03      	ldr	r2, [sp, #12]
 8002f7c:	1d11      	adds	r1, r2, #4
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	9103      	str	r1, [sp, #12]
 8002f82:	2a00      	cmp	r2, #0
 8002f84:	db01      	blt.n	8002f8a <_svfiprintf_r+0xfa>
 8002f86:	9207      	str	r2, [sp, #28]
 8002f88:	e004      	b.n	8002f94 <_svfiprintf_r+0x104>
 8002f8a:	4252      	negs	r2, r2
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	9207      	str	r2, [sp, #28]
 8002f92:	9304      	str	r3, [sp, #16]
 8002f94:	783b      	ldrb	r3, [r7, #0]
 8002f96:	2b2e      	cmp	r3, #46	; 0x2e
 8002f98:	d10c      	bne.n	8002fb4 <_svfiprintf_r+0x124>
 8002f9a:	787b      	ldrb	r3, [r7, #1]
 8002f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f9e:	d133      	bne.n	8003008 <_svfiprintf_r+0x178>
 8002fa0:	9b03      	ldr	r3, [sp, #12]
 8002fa2:	1d1a      	adds	r2, r3, #4
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	9203      	str	r2, [sp, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bfb8      	it	lt
 8002fac:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fb0:	3702      	adds	r7, #2
 8002fb2:	9305      	str	r3, [sp, #20]
 8002fb4:	4d2e      	ldr	r5, [pc, #184]	; (8003070 <_svfiprintf_r+0x1e0>)
 8002fb6:	7839      	ldrb	r1, [r7, #0]
 8002fb8:	2203      	movs	r2, #3
 8002fba:	4628      	mov	r0, r5
 8002fbc:	f7fd f910 	bl	80001e0 <memchr>
 8002fc0:	b138      	cbz	r0, 8002fd2 <_svfiprintf_r+0x142>
 8002fc2:	2340      	movs	r3, #64	; 0x40
 8002fc4:	1b40      	subs	r0, r0, r5
 8002fc6:	fa03 f000 	lsl.w	r0, r3, r0
 8002fca:	9b04      	ldr	r3, [sp, #16]
 8002fcc:	4303      	orrs	r3, r0
 8002fce:	3701      	adds	r7, #1
 8002fd0:	9304      	str	r3, [sp, #16]
 8002fd2:	7839      	ldrb	r1, [r7, #0]
 8002fd4:	4827      	ldr	r0, [pc, #156]	; (8003074 <_svfiprintf_r+0x1e4>)
 8002fd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fda:	2206      	movs	r2, #6
 8002fdc:	1c7e      	adds	r6, r7, #1
 8002fde:	f7fd f8ff 	bl	80001e0 <memchr>
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d038      	beq.n	8003058 <_svfiprintf_r+0x1c8>
 8002fe6:	4b24      	ldr	r3, [pc, #144]	; (8003078 <_svfiprintf_r+0x1e8>)
 8002fe8:	bb13      	cbnz	r3, 8003030 <_svfiprintf_r+0x1a0>
 8002fea:	9b03      	ldr	r3, [sp, #12]
 8002fec:	3307      	adds	r3, #7
 8002fee:	f023 0307 	bic.w	r3, r3, #7
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	9303      	str	r3, [sp, #12]
 8002ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ff8:	444b      	add	r3, r9
 8002ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8002ffc:	e76d      	b.n	8002eda <_svfiprintf_r+0x4a>
 8002ffe:	fb05 3202 	mla	r2, r5, r2, r3
 8003002:	2001      	movs	r0, #1
 8003004:	460f      	mov	r7, r1
 8003006:	e7a6      	b.n	8002f56 <_svfiprintf_r+0xc6>
 8003008:	2300      	movs	r3, #0
 800300a:	3701      	adds	r7, #1
 800300c:	9305      	str	r3, [sp, #20]
 800300e:	4619      	mov	r1, r3
 8003010:	250a      	movs	r5, #10
 8003012:	4638      	mov	r0, r7
 8003014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003018:	3a30      	subs	r2, #48	; 0x30
 800301a:	2a09      	cmp	r2, #9
 800301c:	d903      	bls.n	8003026 <_svfiprintf_r+0x196>
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0c8      	beq.n	8002fb4 <_svfiprintf_r+0x124>
 8003022:	9105      	str	r1, [sp, #20]
 8003024:	e7c6      	b.n	8002fb4 <_svfiprintf_r+0x124>
 8003026:	fb05 2101 	mla	r1, r5, r1, r2
 800302a:	2301      	movs	r3, #1
 800302c:	4607      	mov	r7, r0
 800302e:	e7f0      	b.n	8003012 <_svfiprintf_r+0x182>
 8003030:	ab03      	add	r3, sp, #12
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	4622      	mov	r2, r4
 8003036:	4b11      	ldr	r3, [pc, #68]	; (800307c <_svfiprintf_r+0x1ec>)
 8003038:	a904      	add	r1, sp, #16
 800303a:	4640      	mov	r0, r8
 800303c:	f3af 8000 	nop.w
 8003040:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003044:	4681      	mov	r9, r0
 8003046:	d1d6      	bne.n	8002ff6 <_svfiprintf_r+0x166>
 8003048:	89a3      	ldrh	r3, [r4, #12]
 800304a:	065b      	lsls	r3, r3, #25
 800304c:	f53f af35 	bmi.w	8002eba <_svfiprintf_r+0x2a>
 8003050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003052:	b01d      	add	sp, #116	; 0x74
 8003054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003058:	ab03      	add	r3, sp, #12
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	4622      	mov	r2, r4
 800305e:	4b07      	ldr	r3, [pc, #28]	; (800307c <_svfiprintf_r+0x1ec>)
 8003060:	a904      	add	r1, sp, #16
 8003062:	4640      	mov	r0, r8
 8003064:	f000 f882 	bl	800316c <_printf_i>
 8003068:	e7ea      	b.n	8003040 <_svfiprintf_r+0x1b0>
 800306a:	bf00      	nop
 800306c:	08005e34 	.word	0x08005e34
 8003070:	08005e3a 	.word	0x08005e3a
 8003074:	08005e3e 	.word	0x08005e3e
 8003078:	00000000 	.word	0x00000000
 800307c:	08002ddd 	.word	0x08002ddd

08003080 <_printf_common>:
 8003080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003084:	4691      	mov	r9, r2
 8003086:	461f      	mov	r7, r3
 8003088:	688a      	ldr	r2, [r1, #8]
 800308a:	690b      	ldr	r3, [r1, #16]
 800308c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003090:	4293      	cmp	r3, r2
 8003092:	bfb8      	it	lt
 8003094:	4613      	movlt	r3, r2
 8003096:	f8c9 3000 	str.w	r3, [r9]
 800309a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800309e:	4606      	mov	r6, r0
 80030a0:	460c      	mov	r4, r1
 80030a2:	b112      	cbz	r2, 80030aa <_printf_common+0x2a>
 80030a4:	3301      	adds	r3, #1
 80030a6:	f8c9 3000 	str.w	r3, [r9]
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	0699      	lsls	r1, r3, #26
 80030ae:	bf42      	ittt	mi
 80030b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030b4:	3302      	addmi	r3, #2
 80030b6:	f8c9 3000 	strmi.w	r3, [r9]
 80030ba:	6825      	ldr	r5, [r4, #0]
 80030bc:	f015 0506 	ands.w	r5, r5, #6
 80030c0:	d107      	bne.n	80030d2 <_printf_common+0x52>
 80030c2:	f104 0a19 	add.w	sl, r4, #25
 80030c6:	68e3      	ldr	r3, [r4, #12]
 80030c8:	f8d9 2000 	ldr.w	r2, [r9]
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	42ab      	cmp	r3, r5
 80030d0:	dc28      	bgt.n	8003124 <_printf_common+0xa4>
 80030d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030d6:	6822      	ldr	r2, [r4, #0]
 80030d8:	3300      	adds	r3, #0
 80030da:	bf18      	it	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	0692      	lsls	r2, r2, #26
 80030e0:	d42d      	bmi.n	800313e <_printf_common+0xbe>
 80030e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030e6:	4639      	mov	r1, r7
 80030e8:	4630      	mov	r0, r6
 80030ea:	47c0      	blx	r8
 80030ec:	3001      	adds	r0, #1
 80030ee:	d020      	beq.n	8003132 <_printf_common+0xb2>
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	68e5      	ldr	r5, [r4, #12]
 80030f4:	f8d9 2000 	ldr.w	r2, [r9]
 80030f8:	f003 0306 	and.w	r3, r3, #6
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	bf08      	it	eq
 8003100:	1aad      	subeq	r5, r5, r2
 8003102:	68a3      	ldr	r3, [r4, #8]
 8003104:	6922      	ldr	r2, [r4, #16]
 8003106:	bf0c      	ite	eq
 8003108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800310c:	2500      	movne	r5, #0
 800310e:	4293      	cmp	r3, r2
 8003110:	bfc4      	itt	gt
 8003112:	1a9b      	subgt	r3, r3, r2
 8003114:	18ed      	addgt	r5, r5, r3
 8003116:	f04f 0900 	mov.w	r9, #0
 800311a:	341a      	adds	r4, #26
 800311c:	454d      	cmp	r5, r9
 800311e:	d11a      	bne.n	8003156 <_printf_common+0xd6>
 8003120:	2000      	movs	r0, #0
 8003122:	e008      	b.n	8003136 <_printf_common+0xb6>
 8003124:	2301      	movs	r3, #1
 8003126:	4652      	mov	r2, sl
 8003128:	4639      	mov	r1, r7
 800312a:	4630      	mov	r0, r6
 800312c:	47c0      	blx	r8
 800312e:	3001      	adds	r0, #1
 8003130:	d103      	bne.n	800313a <_printf_common+0xba>
 8003132:	f04f 30ff 	mov.w	r0, #4294967295
 8003136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800313a:	3501      	adds	r5, #1
 800313c:	e7c3      	b.n	80030c6 <_printf_common+0x46>
 800313e:	18e1      	adds	r1, r4, r3
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	2030      	movs	r0, #48	; 0x30
 8003144:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003148:	4422      	add	r2, r4
 800314a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800314e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003152:	3302      	adds	r3, #2
 8003154:	e7c5      	b.n	80030e2 <_printf_common+0x62>
 8003156:	2301      	movs	r3, #1
 8003158:	4622      	mov	r2, r4
 800315a:	4639      	mov	r1, r7
 800315c:	4630      	mov	r0, r6
 800315e:	47c0      	blx	r8
 8003160:	3001      	adds	r0, #1
 8003162:	d0e6      	beq.n	8003132 <_printf_common+0xb2>
 8003164:	f109 0901 	add.w	r9, r9, #1
 8003168:	e7d8      	b.n	800311c <_printf_common+0x9c>
	...

0800316c <_printf_i>:
 800316c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003170:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003174:	460c      	mov	r4, r1
 8003176:	7e09      	ldrb	r1, [r1, #24]
 8003178:	b085      	sub	sp, #20
 800317a:	296e      	cmp	r1, #110	; 0x6e
 800317c:	4617      	mov	r7, r2
 800317e:	4606      	mov	r6, r0
 8003180:	4698      	mov	r8, r3
 8003182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003184:	f000 80b3 	beq.w	80032ee <_printf_i+0x182>
 8003188:	d822      	bhi.n	80031d0 <_printf_i+0x64>
 800318a:	2963      	cmp	r1, #99	; 0x63
 800318c:	d036      	beq.n	80031fc <_printf_i+0x90>
 800318e:	d80a      	bhi.n	80031a6 <_printf_i+0x3a>
 8003190:	2900      	cmp	r1, #0
 8003192:	f000 80b9 	beq.w	8003308 <_printf_i+0x19c>
 8003196:	2958      	cmp	r1, #88	; 0x58
 8003198:	f000 8083 	beq.w	80032a2 <_printf_i+0x136>
 800319c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80031a4:	e032      	b.n	800320c <_printf_i+0xa0>
 80031a6:	2964      	cmp	r1, #100	; 0x64
 80031a8:	d001      	beq.n	80031ae <_printf_i+0x42>
 80031aa:	2969      	cmp	r1, #105	; 0x69
 80031ac:	d1f6      	bne.n	800319c <_printf_i+0x30>
 80031ae:	6820      	ldr	r0, [r4, #0]
 80031b0:	6813      	ldr	r3, [r2, #0]
 80031b2:	0605      	lsls	r5, r0, #24
 80031b4:	f103 0104 	add.w	r1, r3, #4
 80031b8:	d52a      	bpl.n	8003210 <_printf_i+0xa4>
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6011      	str	r1, [r2, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	da03      	bge.n	80031ca <_printf_i+0x5e>
 80031c2:	222d      	movs	r2, #45	; 0x2d
 80031c4:	425b      	negs	r3, r3
 80031c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80031ca:	486f      	ldr	r0, [pc, #444]	; (8003388 <_printf_i+0x21c>)
 80031cc:	220a      	movs	r2, #10
 80031ce:	e039      	b.n	8003244 <_printf_i+0xd8>
 80031d0:	2973      	cmp	r1, #115	; 0x73
 80031d2:	f000 809d 	beq.w	8003310 <_printf_i+0x1a4>
 80031d6:	d808      	bhi.n	80031ea <_printf_i+0x7e>
 80031d8:	296f      	cmp	r1, #111	; 0x6f
 80031da:	d020      	beq.n	800321e <_printf_i+0xb2>
 80031dc:	2970      	cmp	r1, #112	; 0x70
 80031de:	d1dd      	bne.n	800319c <_printf_i+0x30>
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	f043 0320 	orr.w	r3, r3, #32
 80031e6:	6023      	str	r3, [r4, #0]
 80031e8:	e003      	b.n	80031f2 <_printf_i+0x86>
 80031ea:	2975      	cmp	r1, #117	; 0x75
 80031ec:	d017      	beq.n	800321e <_printf_i+0xb2>
 80031ee:	2978      	cmp	r1, #120	; 0x78
 80031f0:	d1d4      	bne.n	800319c <_printf_i+0x30>
 80031f2:	2378      	movs	r3, #120	; 0x78
 80031f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031f8:	4864      	ldr	r0, [pc, #400]	; (800338c <_printf_i+0x220>)
 80031fa:	e055      	b.n	80032a8 <_printf_i+0x13c>
 80031fc:	6813      	ldr	r3, [r2, #0]
 80031fe:	1d19      	adds	r1, r3, #4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6011      	str	r1, [r2, #0]
 8003204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800320c:	2301      	movs	r3, #1
 800320e:	e08c      	b.n	800332a <_printf_i+0x1be>
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6011      	str	r1, [r2, #0]
 8003214:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003218:	bf18      	it	ne
 800321a:	b21b      	sxthne	r3, r3
 800321c:	e7cf      	b.n	80031be <_printf_i+0x52>
 800321e:	6813      	ldr	r3, [r2, #0]
 8003220:	6825      	ldr	r5, [r4, #0]
 8003222:	1d18      	adds	r0, r3, #4
 8003224:	6010      	str	r0, [r2, #0]
 8003226:	0628      	lsls	r0, r5, #24
 8003228:	d501      	bpl.n	800322e <_printf_i+0xc2>
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	e002      	b.n	8003234 <_printf_i+0xc8>
 800322e:	0668      	lsls	r0, r5, #25
 8003230:	d5fb      	bpl.n	800322a <_printf_i+0xbe>
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	4854      	ldr	r0, [pc, #336]	; (8003388 <_printf_i+0x21c>)
 8003236:	296f      	cmp	r1, #111	; 0x6f
 8003238:	bf14      	ite	ne
 800323a:	220a      	movne	r2, #10
 800323c:	2208      	moveq	r2, #8
 800323e:	2100      	movs	r1, #0
 8003240:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003244:	6865      	ldr	r5, [r4, #4]
 8003246:	60a5      	str	r5, [r4, #8]
 8003248:	2d00      	cmp	r5, #0
 800324a:	f2c0 8095 	blt.w	8003378 <_printf_i+0x20c>
 800324e:	6821      	ldr	r1, [r4, #0]
 8003250:	f021 0104 	bic.w	r1, r1, #4
 8003254:	6021      	str	r1, [r4, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d13d      	bne.n	80032d6 <_printf_i+0x16a>
 800325a:	2d00      	cmp	r5, #0
 800325c:	f040 808e 	bne.w	800337c <_printf_i+0x210>
 8003260:	4665      	mov	r5, ip
 8003262:	2a08      	cmp	r2, #8
 8003264:	d10b      	bne.n	800327e <_printf_i+0x112>
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	07db      	lsls	r3, r3, #31
 800326a:	d508      	bpl.n	800327e <_printf_i+0x112>
 800326c:	6923      	ldr	r3, [r4, #16]
 800326e:	6862      	ldr	r2, [r4, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	bfde      	ittt	le
 8003274:	2330      	movle	r3, #48	; 0x30
 8003276:	f805 3c01 	strble.w	r3, [r5, #-1]
 800327a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800327e:	ebac 0305 	sub.w	r3, ip, r5
 8003282:	6123      	str	r3, [r4, #16]
 8003284:	f8cd 8000 	str.w	r8, [sp]
 8003288:	463b      	mov	r3, r7
 800328a:	aa03      	add	r2, sp, #12
 800328c:	4621      	mov	r1, r4
 800328e:	4630      	mov	r0, r6
 8003290:	f7ff fef6 	bl	8003080 <_printf_common>
 8003294:	3001      	adds	r0, #1
 8003296:	d14d      	bne.n	8003334 <_printf_i+0x1c8>
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	b005      	add	sp, #20
 800329e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032a2:	4839      	ldr	r0, [pc, #228]	; (8003388 <_printf_i+0x21c>)
 80032a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80032a8:	6813      	ldr	r3, [r2, #0]
 80032aa:	6821      	ldr	r1, [r4, #0]
 80032ac:	1d1d      	adds	r5, r3, #4
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6015      	str	r5, [r2, #0]
 80032b2:	060a      	lsls	r2, r1, #24
 80032b4:	d50b      	bpl.n	80032ce <_printf_i+0x162>
 80032b6:	07ca      	lsls	r2, r1, #31
 80032b8:	bf44      	itt	mi
 80032ba:	f041 0120 	orrmi.w	r1, r1, #32
 80032be:	6021      	strmi	r1, [r4, #0]
 80032c0:	b91b      	cbnz	r3, 80032ca <_printf_i+0x15e>
 80032c2:	6822      	ldr	r2, [r4, #0]
 80032c4:	f022 0220 	bic.w	r2, r2, #32
 80032c8:	6022      	str	r2, [r4, #0]
 80032ca:	2210      	movs	r2, #16
 80032cc:	e7b7      	b.n	800323e <_printf_i+0xd2>
 80032ce:	064d      	lsls	r5, r1, #25
 80032d0:	bf48      	it	mi
 80032d2:	b29b      	uxthmi	r3, r3
 80032d4:	e7ef      	b.n	80032b6 <_printf_i+0x14a>
 80032d6:	4665      	mov	r5, ip
 80032d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80032dc:	fb02 3311 	mls	r3, r2, r1, r3
 80032e0:	5cc3      	ldrb	r3, [r0, r3]
 80032e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80032e6:	460b      	mov	r3, r1
 80032e8:	2900      	cmp	r1, #0
 80032ea:	d1f5      	bne.n	80032d8 <_printf_i+0x16c>
 80032ec:	e7b9      	b.n	8003262 <_printf_i+0xf6>
 80032ee:	6813      	ldr	r3, [r2, #0]
 80032f0:	6825      	ldr	r5, [r4, #0]
 80032f2:	6961      	ldr	r1, [r4, #20]
 80032f4:	1d18      	adds	r0, r3, #4
 80032f6:	6010      	str	r0, [r2, #0]
 80032f8:	0628      	lsls	r0, r5, #24
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	d501      	bpl.n	8003302 <_printf_i+0x196>
 80032fe:	6019      	str	r1, [r3, #0]
 8003300:	e002      	b.n	8003308 <_printf_i+0x19c>
 8003302:	066a      	lsls	r2, r5, #25
 8003304:	d5fb      	bpl.n	80032fe <_printf_i+0x192>
 8003306:	8019      	strh	r1, [r3, #0]
 8003308:	2300      	movs	r3, #0
 800330a:	6123      	str	r3, [r4, #16]
 800330c:	4665      	mov	r5, ip
 800330e:	e7b9      	b.n	8003284 <_printf_i+0x118>
 8003310:	6813      	ldr	r3, [r2, #0]
 8003312:	1d19      	adds	r1, r3, #4
 8003314:	6011      	str	r1, [r2, #0]
 8003316:	681d      	ldr	r5, [r3, #0]
 8003318:	6862      	ldr	r2, [r4, #4]
 800331a:	2100      	movs	r1, #0
 800331c:	4628      	mov	r0, r5
 800331e:	f7fc ff5f 	bl	80001e0 <memchr>
 8003322:	b108      	cbz	r0, 8003328 <_printf_i+0x1bc>
 8003324:	1b40      	subs	r0, r0, r5
 8003326:	6060      	str	r0, [r4, #4]
 8003328:	6863      	ldr	r3, [r4, #4]
 800332a:	6123      	str	r3, [r4, #16]
 800332c:	2300      	movs	r3, #0
 800332e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003332:	e7a7      	b.n	8003284 <_printf_i+0x118>
 8003334:	6923      	ldr	r3, [r4, #16]
 8003336:	462a      	mov	r2, r5
 8003338:	4639      	mov	r1, r7
 800333a:	4630      	mov	r0, r6
 800333c:	47c0      	blx	r8
 800333e:	3001      	adds	r0, #1
 8003340:	d0aa      	beq.n	8003298 <_printf_i+0x12c>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	079b      	lsls	r3, r3, #30
 8003346:	d413      	bmi.n	8003370 <_printf_i+0x204>
 8003348:	68e0      	ldr	r0, [r4, #12]
 800334a:	9b03      	ldr	r3, [sp, #12]
 800334c:	4298      	cmp	r0, r3
 800334e:	bfb8      	it	lt
 8003350:	4618      	movlt	r0, r3
 8003352:	e7a3      	b.n	800329c <_printf_i+0x130>
 8003354:	2301      	movs	r3, #1
 8003356:	464a      	mov	r2, r9
 8003358:	4639      	mov	r1, r7
 800335a:	4630      	mov	r0, r6
 800335c:	47c0      	blx	r8
 800335e:	3001      	adds	r0, #1
 8003360:	d09a      	beq.n	8003298 <_printf_i+0x12c>
 8003362:	3501      	adds	r5, #1
 8003364:	68e3      	ldr	r3, [r4, #12]
 8003366:	9a03      	ldr	r2, [sp, #12]
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	42ab      	cmp	r3, r5
 800336c:	dcf2      	bgt.n	8003354 <_printf_i+0x1e8>
 800336e:	e7eb      	b.n	8003348 <_printf_i+0x1dc>
 8003370:	2500      	movs	r5, #0
 8003372:	f104 0919 	add.w	r9, r4, #25
 8003376:	e7f5      	b.n	8003364 <_printf_i+0x1f8>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ac      	bne.n	80032d6 <_printf_i+0x16a>
 800337c:	7803      	ldrb	r3, [r0, #0]
 800337e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003382:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003386:	e76c      	b.n	8003262 <_printf_i+0xf6>
 8003388:	08005e45 	.word	0x08005e45
 800338c:	08005e56 	.word	0x08005e56

08003390 <memcpy>:
 8003390:	b510      	push	{r4, lr}
 8003392:	1e43      	subs	r3, r0, #1
 8003394:	440a      	add	r2, r1
 8003396:	4291      	cmp	r1, r2
 8003398:	d100      	bne.n	800339c <memcpy+0xc>
 800339a:	bd10      	pop	{r4, pc}
 800339c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033a4:	e7f7      	b.n	8003396 <memcpy+0x6>

080033a6 <memmove>:
 80033a6:	4288      	cmp	r0, r1
 80033a8:	b510      	push	{r4, lr}
 80033aa:	eb01 0302 	add.w	r3, r1, r2
 80033ae:	d807      	bhi.n	80033c0 <memmove+0x1a>
 80033b0:	1e42      	subs	r2, r0, #1
 80033b2:	4299      	cmp	r1, r3
 80033b4:	d00a      	beq.n	80033cc <memmove+0x26>
 80033b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033ba:	f802 4f01 	strb.w	r4, [r2, #1]!
 80033be:	e7f8      	b.n	80033b2 <memmove+0xc>
 80033c0:	4283      	cmp	r3, r0
 80033c2:	d9f5      	bls.n	80033b0 <memmove+0xa>
 80033c4:	1881      	adds	r1, r0, r2
 80033c6:	1ad2      	subs	r2, r2, r3
 80033c8:	42d3      	cmn	r3, r2
 80033ca:	d100      	bne.n	80033ce <memmove+0x28>
 80033cc:	bd10      	pop	{r4, pc}
 80033ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033d2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80033d6:	e7f7      	b.n	80033c8 <memmove+0x22>

080033d8 <_free_r>:
 80033d8:	b538      	push	{r3, r4, r5, lr}
 80033da:	4605      	mov	r5, r0
 80033dc:	2900      	cmp	r1, #0
 80033de:	d045      	beq.n	800346c <_free_r+0x94>
 80033e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033e4:	1f0c      	subs	r4, r1, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bfb8      	it	lt
 80033ea:	18e4      	addlt	r4, r4, r3
 80033ec:	f000 f8d2 	bl	8003594 <__malloc_lock>
 80033f0:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <_free_r+0x98>)
 80033f2:	6813      	ldr	r3, [r2, #0]
 80033f4:	4610      	mov	r0, r2
 80033f6:	b933      	cbnz	r3, 8003406 <_free_r+0x2e>
 80033f8:	6063      	str	r3, [r4, #4]
 80033fa:	6014      	str	r4, [r2, #0]
 80033fc:	4628      	mov	r0, r5
 80033fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003402:	f000 b8c8 	b.w	8003596 <__malloc_unlock>
 8003406:	42a3      	cmp	r3, r4
 8003408:	d90c      	bls.n	8003424 <_free_r+0x4c>
 800340a:	6821      	ldr	r1, [r4, #0]
 800340c:	1862      	adds	r2, r4, r1
 800340e:	4293      	cmp	r3, r2
 8003410:	bf04      	itt	eq
 8003412:	681a      	ldreq	r2, [r3, #0]
 8003414:	685b      	ldreq	r3, [r3, #4]
 8003416:	6063      	str	r3, [r4, #4]
 8003418:	bf04      	itt	eq
 800341a:	1852      	addeq	r2, r2, r1
 800341c:	6022      	streq	r2, [r4, #0]
 800341e:	6004      	str	r4, [r0, #0]
 8003420:	e7ec      	b.n	80033fc <_free_r+0x24>
 8003422:	4613      	mov	r3, r2
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	b10a      	cbz	r2, 800342c <_free_r+0x54>
 8003428:	42a2      	cmp	r2, r4
 800342a:	d9fa      	bls.n	8003422 <_free_r+0x4a>
 800342c:	6819      	ldr	r1, [r3, #0]
 800342e:	1858      	adds	r0, r3, r1
 8003430:	42a0      	cmp	r0, r4
 8003432:	d10b      	bne.n	800344c <_free_r+0x74>
 8003434:	6820      	ldr	r0, [r4, #0]
 8003436:	4401      	add	r1, r0
 8003438:	1858      	adds	r0, r3, r1
 800343a:	4282      	cmp	r2, r0
 800343c:	6019      	str	r1, [r3, #0]
 800343e:	d1dd      	bne.n	80033fc <_free_r+0x24>
 8003440:	6810      	ldr	r0, [r2, #0]
 8003442:	6852      	ldr	r2, [r2, #4]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	4401      	add	r1, r0
 8003448:	6019      	str	r1, [r3, #0]
 800344a:	e7d7      	b.n	80033fc <_free_r+0x24>
 800344c:	d902      	bls.n	8003454 <_free_r+0x7c>
 800344e:	230c      	movs	r3, #12
 8003450:	602b      	str	r3, [r5, #0]
 8003452:	e7d3      	b.n	80033fc <_free_r+0x24>
 8003454:	6820      	ldr	r0, [r4, #0]
 8003456:	1821      	adds	r1, r4, r0
 8003458:	428a      	cmp	r2, r1
 800345a:	bf04      	itt	eq
 800345c:	6811      	ldreq	r1, [r2, #0]
 800345e:	6852      	ldreq	r2, [r2, #4]
 8003460:	6062      	str	r2, [r4, #4]
 8003462:	bf04      	itt	eq
 8003464:	1809      	addeq	r1, r1, r0
 8003466:	6021      	streq	r1, [r4, #0]
 8003468:	605c      	str	r4, [r3, #4]
 800346a:	e7c7      	b.n	80033fc <_free_r+0x24>
 800346c:	bd38      	pop	{r3, r4, r5, pc}
 800346e:	bf00      	nop
 8003470:	200004f8 	.word	0x200004f8

08003474 <_malloc_r>:
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	1ccd      	adds	r5, r1, #3
 8003478:	f025 0503 	bic.w	r5, r5, #3
 800347c:	3508      	adds	r5, #8
 800347e:	2d0c      	cmp	r5, #12
 8003480:	bf38      	it	cc
 8003482:	250c      	movcc	r5, #12
 8003484:	2d00      	cmp	r5, #0
 8003486:	4606      	mov	r6, r0
 8003488:	db01      	blt.n	800348e <_malloc_r+0x1a>
 800348a:	42a9      	cmp	r1, r5
 800348c:	d903      	bls.n	8003496 <_malloc_r+0x22>
 800348e:	230c      	movs	r3, #12
 8003490:	6033      	str	r3, [r6, #0]
 8003492:	2000      	movs	r0, #0
 8003494:	bd70      	pop	{r4, r5, r6, pc}
 8003496:	f000 f87d 	bl	8003594 <__malloc_lock>
 800349a:	4a21      	ldr	r2, [pc, #132]	; (8003520 <_malloc_r+0xac>)
 800349c:	6814      	ldr	r4, [r2, #0]
 800349e:	4621      	mov	r1, r4
 80034a0:	b991      	cbnz	r1, 80034c8 <_malloc_r+0x54>
 80034a2:	4c20      	ldr	r4, [pc, #128]	; (8003524 <_malloc_r+0xb0>)
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	b91b      	cbnz	r3, 80034b0 <_malloc_r+0x3c>
 80034a8:	4630      	mov	r0, r6
 80034aa:	f000 f863 	bl	8003574 <_sbrk_r>
 80034ae:	6020      	str	r0, [r4, #0]
 80034b0:	4629      	mov	r1, r5
 80034b2:	4630      	mov	r0, r6
 80034b4:	f000 f85e 	bl	8003574 <_sbrk_r>
 80034b8:	1c43      	adds	r3, r0, #1
 80034ba:	d124      	bne.n	8003506 <_malloc_r+0x92>
 80034bc:	230c      	movs	r3, #12
 80034be:	6033      	str	r3, [r6, #0]
 80034c0:	4630      	mov	r0, r6
 80034c2:	f000 f868 	bl	8003596 <__malloc_unlock>
 80034c6:	e7e4      	b.n	8003492 <_malloc_r+0x1e>
 80034c8:	680b      	ldr	r3, [r1, #0]
 80034ca:	1b5b      	subs	r3, r3, r5
 80034cc:	d418      	bmi.n	8003500 <_malloc_r+0x8c>
 80034ce:	2b0b      	cmp	r3, #11
 80034d0:	d90f      	bls.n	80034f2 <_malloc_r+0x7e>
 80034d2:	600b      	str	r3, [r1, #0]
 80034d4:	50cd      	str	r5, [r1, r3]
 80034d6:	18cc      	adds	r4, r1, r3
 80034d8:	4630      	mov	r0, r6
 80034da:	f000 f85c 	bl	8003596 <__malloc_unlock>
 80034de:	f104 000b 	add.w	r0, r4, #11
 80034e2:	1d23      	adds	r3, r4, #4
 80034e4:	f020 0007 	bic.w	r0, r0, #7
 80034e8:	1ac3      	subs	r3, r0, r3
 80034ea:	d0d3      	beq.n	8003494 <_malloc_r+0x20>
 80034ec:	425a      	negs	r2, r3
 80034ee:	50e2      	str	r2, [r4, r3]
 80034f0:	e7d0      	b.n	8003494 <_malloc_r+0x20>
 80034f2:	428c      	cmp	r4, r1
 80034f4:	684b      	ldr	r3, [r1, #4]
 80034f6:	bf16      	itet	ne
 80034f8:	6063      	strne	r3, [r4, #4]
 80034fa:	6013      	streq	r3, [r2, #0]
 80034fc:	460c      	movne	r4, r1
 80034fe:	e7eb      	b.n	80034d8 <_malloc_r+0x64>
 8003500:	460c      	mov	r4, r1
 8003502:	6849      	ldr	r1, [r1, #4]
 8003504:	e7cc      	b.n	80034a0 <_malloc_r+0x2c>
 8003506:	1cc4      	adds	r4, r0, #3
 8003508:	f024 0403 	bic.w	r4, r4, #3
 800350c:	42a0      	cmp	r0, r4
 800350e:	d005      	beq.n	800351c <_malloc_r+0xa8>
 8003510:	1a21      	subs	r1, r4, r0
 8003512:	4630      	mov	r0, r6
 8003514:	f000 f82e 	bl	8003574 <_sbrk_r>
 8003518:	3001      	adds	r0, #1
 800351a:	d0cf      	beq.n	80034bc <_malloc_r+0x48>
 800351c:	6025      	str	r5, [r4, #0]
 800351e:	e7db      	b.n	80034d8 <_malloc_r+0x64>
 8003520:	200004f8 	.word	0x200004f8
 8003524:	200004fc 	.word	0x200004fc

08003528 <_realloc_r>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	4607      	mov	r7, r0
 800352c:	4614      	mov	r4, r2
 800352e:	460e      	mov	r6, r1
 8003530:	b921      	cbnz	r1, 800353c <_realloc_r+0x14>
 8003532:	4611      	mov	r1, r2
 8003534:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003538:	f7ff bf9c 	b.w	8003474 <_malloc_r>
 800353c:	b922      	cbnz	r2, 8003548 <_realloc_r+0x20>
 800353e:	f7ff ff4b 	bl	80033d8 <_free_r>
 8003542:	4625      	mov	r5, r4
 8003544:	4628      	mov	r0, r5
 8003546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003548:	f000 f826 	bl	8003598 <_malloc_usable_size_r>
 800354c:	42a0      	cmp	r0, r4
 800354e:	d20f      	bcs.n	8003570 <_realloc_r+0x48>
 8003550:	4621      	mov	r1, r4
 8003552:	4638      	mov	r0, r7
 8003554:	f7ff ff8e 	bl	8003474 <_malloc_r>
 8003558:	4605      	mov	r5, r0
 800355a:	2800      	cmp	r0, #0
 800355c:	d0f2      	beq.n	8003544 <_realloc_r+0x1c>
 800355e:	4631      	mov	r1, r6
 8003560:	4622      	mov	r2, r4
 8003562:	f7ff ff15 	bl	8003390 <memcpy>
 8003566:	4631      	mov	r1, r6
 8003568:	4638      	mov	r0, r7
 800356a:	f7ff ff35 	bl	80033d8 <_free_r>
 800356e:	e7e9      	b.n	8003544 <_realloc_r+0x1c>
 8003570:	4635      	mov	r5, r6
 8003572:	e7e7      	b.n	8003544 <_realloc_r+0x1c>

08003574 <_sbrk_r>:
 8003574:	b538      	push	{r3, r4, r5, lr}
 8003576:	4c06      	ldr	r4, [pc, #24]	; (8003590 <_sbrk_r+0x1c>)
 8003578:	2300      	movs	r3, #0
 800357a:	4605      	mov	r5, r0
 800357c:	4608      	mov	r0, r1
 800357e:	6023      	str	r3, [r4, #0]
 8003580:	f7ff fb4e 	bl	8002c20 <_sbrk>
 8003584:	1c43      	adds	r3, r0, #1
 8003586:	d102      	bne.n	800358e <_sbrk_r+0x1a>
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	b103      	cbz	r3, 800358e <_sbrk_r+0x1a>
 800358c:	602b      	str	r3, [r5, #0]
 800358e:	bd38      	pop	{r3, r4, r5, pc}
 8003590:	200005ac 	.word	0x200005ac

08003594 <__malloc_lock>:
 8003594:	4770      	bx	lr

08003596 <__malloc_unlock>:
 8003596:	4770      	bx	lr

08003598 <_malloc_usable_size_r>:
 8003598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800359c:	1f18      	subs	r0, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bfbc      	itt	lt
 80035a2:	580b      	ldrlt	r3, [r1, r0]
 80035a4:	18c0      	addlt	r0, r0, r3
 80035a6:	4770      	bx	lr

080035a8 <Font7x10>:
	...
 80035bc:	1000 1000 1000 1000 1000 1000 0000 1000     ................
 80035cc:	0000 0000 2800 2800 2800 0000 0000 0000     .....(.(.(......
	...
 80035e4:	2400 2400 7c00 2400 4800 7c00 4800 4800     .$.$.|.$.H.|.H.H
 80035f4:	0000 0000 3800 5400 5000 3800 1400 5400     .....8.T.P.8...T
 8003604:	5400 3800 1000 0000 2000 5400 5800 3000     .T.8..... .T.X.0
 8003614:	2800 5400 1400 0800 0000 0000 1000 2800     .(.T...........(
 8003624:	2800 1000 3400 4800 4800 3400 0000 0000     .(...4.H.H.4....
 8003634:	1000 1000 1000 0000 0000 0000 0000 0000     ................
 8003644:	0000 0000 0800 1000 2000 2000 2000 2000     ......... . . . 
 8003654:	2000 2000 1000 0800 2000 1000 0800 0800     . . ..... ......
 8003664:	0800 0800 0800 0800 1000 2000 1000 3800     ........... ...8
 8003674:	1000 2800 0000 0000 0000 0000 0000 0000     ...(............
 8003684:	0000 0000 1000 1000 7c00 1000 1000 0000     .........|......
	...
 80036a4:	0000 1000 1000 1000 0000 0000 0000 0000     ................
 80036b4:	0000 3800 0000 0000 0000 0000 0000 0000     ...8............
	...
 80036cc:	0000 1000 0000 0000 0800 0800 1000 1000     ................
 80036dc:	1000 1000 2000 2000 0000 0000 3800 4400     ..... . .....8.D
 80036ec:	4400 5400 4400 4400 4400 3800 0000 0000     .D.T.D.D.D.8....
 80036fc:	1000 3000 5000 1000 1000 1000 1000 1000     ...0.P..........
 800370c:	0000 0000 3800 4400 4400 0400 0800 1000     .....8.D.D......
 800371c:	2000 7c00 0000 0000 3800 4400 0400 1800     . .|.....8.D....
 800372c:	0400 0400 4400 3800 0000 0000 0800 1800     .....D.8........
 800373c:	2800 2800 4800 7c00 0800 0800 0000 0000     .(.(.H.|........
 800374c:	7c00 4000 4000 7800 0400 0400 4400 3800     .|.@.@.x.....D.8
 800375c:	0000 0000 3800 4400 4000 7800 4400 4400     .....8.D.@.x.D.D
 800376c:	4400 3800 0000 0000 7c00 0400 0800 1000     .D.8.....|......
 800377c:	1000 2000 2000 2000 0000 0000 3800 4400     ... . . .....8.D
 800378c:	4400 3800 4400 4400 4400 3800 0000 0000     .D.8.D.D.D.8....
 800379c:	3800 4400 4400 4400 3c00 0400 4400 3800     .8.D.D.D.<...D.8
	...
 80037b4:	1000 0000 0000 0000 0000 1000 0000 0000     ................
 80037c4:	0000 0000 0000 1000 0000 0000 0000 1000     ................
 80037d4:	1000 1000 0000 0000 0c00 3000 4000 3000     ...........0.@.0
 80037e4:	0c00 0000 0000 0000 0000 0000 0000 7c00     ...............|
 80037f4:	0000 7c00 0000 0000 0000 0000 0000 0000     ...|............
 8003804:	6000 1800 0400 1800 6000 0000 0000 0000     .`.......`......
 8003814:	3800 4400 0400 0800 1000 1000 0000 1000     .8.D............
 8003824:	0000 0000 3800 4400 4c00 5400 5c00 4000     .....8.D.L.T.\.@
 8003834:	4000 3800 0000 0000 1000 2800 2800 2800     .@.8.......(.(.(
 8003844:	2800 7c00 4400 4400 0000 0000 7800 4400     .(.|.D.D.....x.D
 8003854:	4400 7800 4400 4400 4400 7800 0000 0000     .D.x.D.D.D.x....
 8003864:	3800 4400 4000 4000 4000 4000 4400 3800     .8.D.@.@.@.@.D.8
 8003874:	0000 0000 7000 4800 4400 4400 4400 4400     .....p.H.D.D.D.D
 8003884:	4800 7000 0000 0000 7c00 4000 4000 7c00     .H.p.....|.@.@.|
 8003894:	4000 4000 4000 7c00 0000 0000 7c00 4000     .@.@.@.|.....|.@
 80038a4:	4000 7800 4000 4000 4000 4000 0000 0000     .@.x.@.@.@.@....
 80038b4:	3800 4400 4000 4000 5c00 4400 4400 3800     .8.D.@.@.\.D.D.8
 80038c4:	0000 0000 4400 4400 4400 7c00 4400 4400     .....D.D.D.|.D.D
 80038d4:	4400 4400 0000 0000 3800 1000 1000 1000     .D.D.....8......
 80038e4:	1000 1000 1000 3800 0000 0000 0400 0400     .......8........
 80038f4:	0400 0400 0400 0400 4400 3800 0000 0000     .........D.8....
 8003904:	4400 4800 5000 6000 5000 4800 4800 4400     .D.H.P.`.P.H.H.D
 8003914:	0000 0000 4000 4000 4000 4000 4000 4000     .....@.@.@.@.@.@
 8003924:	4000 7c00 0000 0000 4400 6c00 6c00 5400     .@.|.....D.l.l.T
 8003934:	4400 4400 4400 4400 0000 0000 4400 6400     .D.D.D.D.....D.d
 8003944:	6400 5400 5400 4c00 4c00 4400 0000 0000     .d.T.T.L.L.D....
 8003954:	3800 4400 4400 4400 4400 4400 4400 3800     .8.D.D.D.D.D.D.8
 8003964:	0000 0000 7800 4400 4400 4400 7800 4000     .....x.D.D.D.x.@
 8003974:	4000 4000 0000 0000 3800 4400 4400 4400     .@.@.....8.D.D.D
 8003984:	4400 4400 5400 3800 0400 0000 7800 4400     .D.D.T.8.....x.D
 8003994:	4400 4400 7800 4800 4800 4400 0000 0000     .D.D.x.H.H.D....
 80039a4:	3800 4400 4000 3000 0800 0400 4400 3800     .8.D.@.0.....D.8
 80039b4:	0000 0000 7c00 1000 1000 1000 1000 1000     .....|..........
 80039c4:	1000 1000 0000 0000 4400 4400 4400 4400     .........D.D.D.D
 80039d4:	4400 4400 4400 3800 0000 0000 4400 4400     .D.D.D.8.....D.D
 80039e4:	4400 2800 2800 2800 1000 1000 0000 0000     .D.(.(.(........
 80039f4:	4400 4400 5400 5400 5400 6c00 2800 2800     .D.D.T.T.T.l.(.(
 8003a04:	0000 0000 4400 2800 2800 1000 1000 2800     .....D.(.(.....(
 8003a14:	2800 4400 0000 0000 4400 4400 2800 2800     .(.D.....D.D.(.(
 8003a24:	1000 1000 1000 1000 0000 0000 7c00 0400     .............|..
 8003a34:	0800 1000 1000 2000 4000 7c00 0000 0000     ....... .@.|....
 8003a44:	1800 1000 1000 1000 1000 1000 1000 1000     ................
 8003a54:	1000 1800 2000 2000 1000 1000 1000 1000     ..... . ........
 8003a64:	0800 0800 0000 0000 3000 1000 1000 1000     .........0......
 8003a74:	1000 1000 1000 1000 1000 3000 1000 2800     ...........0...(
 8003a84:	2800 4400 0000 0000 0000 0000 0000 0000     .(.D............
	...
 8003aa4:	0000 fe00 2000 1000 0000 0000 0000 0000     ..... ..........
	...
 8003ac0:	3800 4400 3c00 4400 4c00 3400 0000 0000     .8.D.<.D.L.4....
 8003ad0:	4000 4000 5800 6400 4400 4400 6400 5800     .@.@.X.d.D.D.d.X
	...
 8003ae8:	3800 4400 4000 4000 4400 3800 0000 0000     .8.D.@.@.D.8....
 8003af8:	0400 0400 3400 4c00 4400 4400 4c00 3400     .....4.L.D.D.L.4
	...
 8003b10:	3800 4400 7c00 4000 4400 3800 0000 0000     .8.D.|.@.D.8....
 8003b20:	0c00 1000 7c00 1000 1000 1000 1000 1000     .....|..........
	...
 8003b38:	3400 4c00 4400 4400 4c00 3400 0400 7800     .4.L.D.D.L.4...x
 8003b48:	4000 4000 5800 6400 4400 4400 4400 4400     .@.@.X.d.D.D.D.D
 8003b58:	0000 0000 1000 0000 7000 1000 1000 1000     .........p......
 8003b68:	1000 1000 0000 0000 1000 0000 7000 1000     .............p..
 8003b78:	1000 1000 1000 1000 1000 e000 4000 4000     .............@.@
 8003b88:	4800 5000 6000 5000 4800 4400 0000 0000     .H.P.`.P.H.D....
 8003b98:	7000 1000 1000 1000 1000 1000 1000 1000     .p..............
	...
 8003bb0:	7800 5400 5400 5400 5400 5400 0000 0000     .x.T.T.T.T.T....
 8003bc0:	0000 0000 5800 6400 4400 4400 4400 4400     .....X.d.D.D.D.D
	...
 8003bd8:	3800 4400 4400 4400 4400 3800 0000 0000     .8.D.D.D.D.8....
 8003be8:	0000 0000 5800 6400 4400 4400 6400 5800     .....X.d.D.D.d.X
 8003bf8:	4000 4000 0000 0000 3400 4c00 4400 4400     .@.@.....4.L.D.D
 8003c08:	4c00 3400 0400 0400 0000 0000 5800 6400     .L.4.........X.d
 8003c18:	4000 4000 4000 4000 0000 0000 0000 0000     .@.@.@.@........
 8003c28:	3800 4400 3000 0800 4400 3800 0000 0000     .8.D.0...D.8....
 8003c38:	2000 2000 7800 2000 2000 2000 2000 1800     . . .x. . . . ..
	...
 8003c50:	4400 4400 4400 4400 4c00 3400 0000 0000     .D.D.D.D.L.4....
 8003c60:	0000 0000 4400 4400 2800 2800 2800 1000     .....D.D.(.(.(..
	...
 8003c78:	5400 5400 5400 6c00 2800 2800 0000 0000     .T.T.T.l.(.(....
 8003c88:	0000 0000 4400 2800 1000 1000 2800 4400     .....D.(.....(.D
	...
 8003ca0:	4400 4400 2800 2800 1000 1000 1000 6000     .D.D.(.(.......`
 8003cb0:	0000 0000 7c00 0800 1000 2000 4000 7c00     .....|..... .@.|
 8003cc0:	0000 0000 1800 1000 1000 1000 2000 2000     ............. . 
 8003cd0:	1000 1000 1000 1800 1000 1000 1000 1000     ................
 8003ce0:	1000 1000 1000 1000 1000 1000 3000 1000     .............0..
 8003cf0:	1000 1000 0800 0800 1000 1000 1000 3000     ...............0
 8003d00:	0000 0000 0000 7400 4c00 0000 0000 0000     .......t.L......
 8003d10:	0000 0000                                   ....

08003d14 <Font11x18>:
	...
 8003d38:	0000 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
 8003d48:	0c00 0c00 0c00 0c00 0000 0c00 0c00 0000     ................
 8003d58:	0000 0000 0000 1b00 1b00 1b00 1b00 1b00     ................
	...
 8003d80:	0000 1980 1980 1980 1980 7fc0 7fc0 1980     ................
 8003d90:	3300 7fc0 7fc0 3300 3300 3300 3300 0000     .3.....3.3.3.3..
 8003da0:	0000 0000 0000 1e00 3f00 7580 6580 7400     .........?.u.e.t
 8003db0:	3c00 1e00 0700 0580 6580 6580 7580 3f00     .<.......e.e.u.?
 8003dc0:	1e00 0400 0400 0000 0000 7000 d800 d840     ...........p..@.
 8003dd0:	d8c0 d980 7300 0600 0c00 1b80 36c0 66c0     .....s.......6.f
 8003de0:	46c0 06c0 0380 0000 0000 0000 0000 1e00     .F..............
 8003df0:	3f00 3300 3300 3300 1e00 0c00 3cc0 66c0     .?.3.3.3.....<.f
 8003e00:	6380 6180 6380 3ec0 1c80 0000 0000 0000     .c.a.c.>........
 8003e10:	0000 0c00 0c00 0c00 0c00 0c00 0000 0000     ................
	...
 8003e34:	0080 0100 0300 0600 0600 0400 0c00 0c00     ................
 8003e44:	0c00 0c00 0c00 0c00 0400 0600 0600 0300     ................
 8003e54:	0100 0080 2000 1000 1800 0c00 0c00 0400     ..... ..........
 8003e64:	0600 0600 0600 0600 0600 0600 0400 0c00     ................
 8003e74:	0c00 1800 1000 2000 0000 0c00 2d00 3f00     ....... .....-.?
 8003e84:	1e00 3300 0000 0000 0000 0000 0000 0000     ...3............
	...
 8003ea4:	0000 0c00 0c00 0c00 0c00 ffc0 ffc0 0c00     ................
 8003eb4:	0c00 0c00 0c00 0000 0000 0000 0000 0000     ................
	...
 8003edc:	0000 0c00 0c00 0400 0400 0800 0000 0000     ................
	...
 8003ef8:	0000 1e00 1e00 0000 0000 0000 0000 0000     ................
	...
 8003f24:	0000 0c00 0c00 0000 0000 0000 0000 0300     ................
 8003f34:	0300 0300 0600 0600 0600 0600 0c00 0c00     ................
 8003f44:	0c00 0c00 1800 1800 1800 0000 0000 0000     ................
 8003f54:	0000 1e00 3f00 3300 6180 6180 6180 6d80     .....?.3.a.a.a.m
 8003f64:	6d80 6180 6180 6180 3300 3f00 1e00 0000     .m.a.a.a.3.?....
 8003f74:	0000 0000 0000 0600 0e00 1e00 3600 2600     .............6.&
 8003f84:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 8003f94:	0600 0000 0000 0000 0000 1e00 3f00 7380     .............?.s
 8003fa4:	6180 6180 0180 0300 0600 0c00 1800 3000     .a.a...........0
 8003fb4:	6000 7f80 7f80 0000 0000 0000 0000 1c00     .`..............
 8003fc4:	3e00 6300 6300 0300 0e00 0e00 0300 0180     .>.c.c..........
 8003fd4:	0180 6180 7380 3f00 1e00 0000 0000 0000     ...a.s.?........
 8003fe4:	0000 0600 0e00 0e00 1e00 1e00 1600 3600     ...............6
 8003ff4:	3600 6600 7f80 7f80 0600 0600 0600 0000     .6.f............
 8004004:	0000 0000 0000 7f00 7f00 6000 6000 6000     ...........`.`.`
 8004014:	6e00 7f00 6380 0180 0180 6180 7380 3f00     .n...c.....a.s.?
 8004024:	1e00 0000 0000 0000 0000 1e00 3f00 3380     .............?.3
 8004034:	6180 6000 6e00 7f00 7380 6180 6180 6180     .a.`.n...s.a.a.a
 8004044:	3380 3f00 1e00 0000 0000 0000 0000 7f80     .3.?............
 8004054:	7f80 0180 0300 0300 0600 0600 0c00 0c00     ................
 8004064:	0c00 0800 1800 1800 1800 0000 0000 0000     ................
 8004074:	0000 1e00 3f00 6380 6180 6180 2100 1e00     .....?.c.a.a.!..
 8004084:	3f00 6180 6180 6180 6180 3f00 1e00 0000     .?.a.a.a.a.?....
 8004094:	0000 0000 0000 1e00 3f00 7300 6180 6180     .........?.s.a.a
 80040a4:	6180 7380 3f80 1d80 0180 6180 7300 3f00     .a.s.?.....a.s.?
 80040b4:	1e00 0000 0000 0000 0000 0000 0000 0000     ................
 80040c4:	0000 0c00 0c00 0000 0000 0000 0000 0000     ................
 80040d4:	0000 0c00 0c00 0000 0000 0000 0000 0000     ................
	...
 80040ec:	0c00 0c00 0000 0000 0000 0000 0000 0c00     ................
 80040fc:	0c00 0400 0400 0800 0000 0000 0000 0000     ................
 800410c:	0080 0380 0e00 3800 6000 3800 0e00 0380     .......8.`.8....
 800411c:	0080 0000 0000 0000 0000 0000 0000 0000     ................
 800412c:	0000 0000 0000 7f80 7f80 0000 0000 7f80     ................
 800413c:	7f80 0000 0000 0000 0000 0000 0000 0000     ................
	...
 8004154:	4000 7000 1c00 0700 0180 0700 1c00 7000     .@.p...........p
 8004164:	4000 0000 0000 0000 0000 0000 0000 1f00     .@..............
 8004174:	3f80 71c0 60c0 00c0 01c0 0380 0700 0e00     .?.q.`..........
 8004184:	0c00 0c00 0000 0c00 0c00 0000 0000 0000     ................
 8004194:	0000 1e00 3f00 3180 7180 6380 6f80 6d80     .....?.1.q.c.o.m
 80041a4:	6d80 6f80 6780 6000 3200 3e00 1c00 0000     .m.o.g.`.2.>....
 80041b4:	0000 0000 0000 0e00 0e00 1b00 1b00 1b00     ................
 80041c4:	1b00 3180 3180 3f80 3f80 3180 60c0 60c0     ...1.1.?.?.1.`.`
 80041d4:	60c0 0000 0000 0000 0000 7c00 7e00 6300     .`.........|.~.c
 80041e4:	6300 6300 6300 7e00 7e00 6300 6180 6180     .c.c.c.~.~.c.a.a
 80041f4:	6380 7f00 7e00 0000 0000 0000 0000 1e00     .c...~..........
 8004204:	3f00 3180 6180 6000 6000 6000 6000 6000     .?.1.a.`.`.`.`.`
 8004214:	6000 6180 3180 3f00 1e00 0000 0000 0000     .`.a.1.?........
 8004224:	0000 7c00 7f00 6300 6380 6180 6180 6180     ...|...c.c.a.a.a
 8004234:	6180 6180 6180 6300 6300 7e00 7c00 0000     .a.a.a.c.c.~.|..
 8004244:	0000 0000 0000 7f80 7f80 6000 6000 6000     ...........`.`.`
 8004254:	6000 7f00 7f00 6000 6000 6000 6000 7f80     .`.....`.`.`.`..
 8004264:	7f80 0000 0000 0000 0000 7f80 7f80 6000     ...............`
 8004274:	6000 6000 6000 7f00 7f00 6000 6000 6000     .`.`.`.....`.`.`
 8004284:	6000 6000 6000 0000 0000 0000 0000 1e00     .`.`.`..........
 8004294:	3f00 3180 6180 6000 6000 6000 6380 6380     .?.1.a.`.`.`.c.c
 80042a4:	6180 6180 3180 3f80 1e00 0000 0000 0000     .a.a.1.?........
 80042b4:	0000 6180 6180 6180 6180 6180 6180 7f80     ...a.a.a.a.a.a..
 80042c4:	7f80 6180 6180 6180 6180 6180 6180 0000     ...a.a.a.a.a.a..
 80042d4:	0000 0000 0000 3f00 3f00 0c00 0c00 0c00     .......?.?......
 80042e4:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 3f00     ...............?
 80042f4:	3f00 0000 0000 0000 0000 0180 0180 0180     .?..............
 8004304:	0180 0180 0180 0180 0180 0180 6180 6180     .............a.a
 8004314:	7380 3f00 1e00 0000 0000 0000 0000 60c0     .s.?...........`
 8004324:	6180 6300 6600 6600 6c00 7800 7c00 6600     .a.c.f.f.l.x.|.f
 8004334:	6600 6300 6180 6180 60c0 0000 0000 0000     .f.c.a.a.`......
 8004344:	0000 6000 6000 6000 6000 6000 6000 6000     ...`.`.`.`.`.`.`
 8004354:	6000 6000 6000 6000 6000 7f80 7f80 0000     .`.`.`.`.`......
 8004364:	0000 0000 0000 71c0 71c0 7bc0 7ac0 6ac0     .......q.q.{.z.j
 8004374:	6ac0 6ec0 64c0 60c0 60c0 60c0 60c0 60c0     .j.n.d.`.`.`.`.`
 8004384:	60c0 0000 0000 0000 0000 7180 7180 7980     .`.........q.q.y
 8004394:	7980 7980 6d80 6d80 6d80 6580 6780 6780     .y.y.m.m.m.e.g.g
 80043a4:	6780 6380 6380 0000 0000 0000 0000 1e00     .g.c.c..........
 80043b4:	3f00 3300 6180 6180 6180 6180 6180 6180     .?.3.a.a.a.a.a.a
 80043c4:	6180 6180 3300 3f00 1e00 0000 0000 0000     .a.a.3.?........
 80043d4:	0000 7e00 7f00 6380 6180 6180 6180 6380     ...~...c.a.a.a.c
 80043e4:	7f00 7e00 6000 6000 6000 6000 6000 0000     ...~.`.`.`.`.`..
 80043f4:	0000 0000 0000 1e00 3f00 3300 6180 6180     .........?.3.a.a
 8004404:	6180 6180 6180 6180 6580 6780 3300 3f80     .a.a.a.a.e.g.3.?
 8004414:	1e40 0000 0000 0000 0000 7e00 7f00 6380     @..........~...c
 8004424:	6180 6180 6380 7f00 7e00 6600 6300 6300     .a.a.c...~.f.c.c
 8004434:	6180 6180 60c0 0000 0000 0000 0000 0e00     .a.a.`..........
 8004444:	1f00 3180 3180 3000 3800 1e00 0700 0380     ...1.1.0.8......
 8004454:	6180 6180 3180 3f00 1e00 0000 0000 0000     .a.a.1.?........
 8004464:	0000 ffc0 ffc0 0c00 0c00 0c00 0c00 0c00     ................
 8004474:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0000     ................
 8004484:	0000 0000 0000 6180 6180 6180 6180 6180     .......a.a.a.a.a
 8004494:	6180 6180 6180 6180 6180 6180 7380 3f00     .a.a.a.a.a.a.s.?
 80044a4:	1e00 0000 0000 0000 0000 60c0 60c0 60c0     ...........`.`.`
 80044b4:	3180 3180 3180 1b00 1b00 1b00 1b00 0e00     .1.1.1..........
 80044c4:	0e00 0e00 0400 0000 0000 0000 0000 c0c0     ................
 80044d4:	c0c0 c0c0 c0c0 c0c0 ccc0 4c80 4c80 5e80     ...........L.L.^
 80044e4:	5280 5280 7380 6180 6180 0000 0000 0000     .R.R.s.a.a......
 80044f4:	0000 c0c0 6080 6180 3300 3b00 1e00 0c00     .....`.a.3.;....
 8004504:	0c00 1e00 1f00 3b00 7180 6180 c0c0 0000     .......;.q.a....
 8004514:	0000 0000 0000 c0c0 6180 6180 3300 3300     .........a.a.3.3
 8004524:	1e00 1e00 0c00 0c00 0c00 0c00 0c00 0c00     ................
 8004534:	0c00 0000 0000 0000 0000 3f80 3f80 0180     ...........?.?..
 8004544:	0300 0300 0600 0c00 0c00 1800 1800 3000     ...............0
 8004554:	6000 7f80 7f80 0000 0000 0000 0f00 0f00     .`..............
 8004564:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
 8004574:	0c00 0c00 0c00 0c00 0c00 0c00 0f00 0f00     ................
 8004584:	0000 1800 1800 1800 0c00 0c00 0c00 0c00     ................
 8004594:	0600 0600 0600 0600 0300 0300 0300 0000     ................
 80045a4:	0000 0000 1e00 1e00 0600 0600 0600 0600     ................
 80045b4:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 80045c4:	0600 0600 1e00 1e00 0000 0c00 0c00 1e00     ................
 80045d4:	1200 3300 3300 6180 6180 0000 0000 0000     ...3.3.a.a......
	...
 8004610:	ffe0 0000 0000 3800 1800 0c00 0000 0000     .......8........
	...
 8004640:	0000 1f00 3f80 6180 0180 1f80 3f80 6180     .....?.a.....?.a
 8004650:	6380 7f80 38c0 0000 0000 0000 0000 6000     .c...8.........`
 8004660:	6000 6000 6000 6e00 7f00 7380 6180 6180     .`.`.`.n...s.a.a
 8004670:	6180 6180 7380 7f00 6e00 0000 0000 0000     .a.a.s...n......
	...
 8004688:	0000 1e00 3f00 7380 6180 6000 6000 6180     .....?.s.a.`.`.a
 8004698:	7380 3f00 1e00 0000 0000 0000 0000 0180     .s.?............
 80046a8:	0180 0180 0180 1d80 3f80 7380 6180 6180     .........?.s.a.a
 80046b8:	6180 6180 7380 3f80 1d80 0000 0000 0000     .a.a.s.?........
	...
 80046d0:	0000 1e00 3f00 7300 6180 7f80 7f80 6000     .....?.s.a.....`
 80046e0:	7180 3f00 1e00 0000 0000 0000 0000 07c0     .q.?............
 80046f0:	0fc0 0c00 0c00 7f80 7f80 0c00 0c00 0c00     ................
 8004700:	0c00 0c00 0c00 0c00 0c00 0000 0000 0000     ................
	...
 8004718:	1d80 3f80 7380 6180 6180 6180 6180 7380     ...?.s.a.a.a.a.s
 8004728:	3f80 1d80 0180 6380 7f00 3e00 0000 6000     .?.....c...>...`
 8004738:	6000 6000 6000 6f00 7f80 7180 6180 6180     .`.`.`.o...q.a.a
 8004748:	6180 6180 6180 6180 6180 0000 0000 0000     .a.a.a.a.a......
 8004758:	0000 0600 0600 0000 0000 3e00 3e00 0600     ...........>.>..
 8004768:	0600 0600 0600 0600 0600 0600 0600 0000     ................
 8004778:	0000 0000 0600 0600 0000 0000 3e00 3e00     .............>.>
 8004788:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 8004798:	0600 4600 7e00 3c00 0000 6000 6000 6000     ...F.~.<...`.`.`
 80047a8:	6000 6180 6300 6600 6c00 7c00 7600 6300     .`.a.c.f.l.|.v.c
 80047b8:	6300 6180 60c0 0000 0000 0000 0000 3e00     .c.a.`.........>
 80047c8:	3e00 0600 0600 0600 0600 0600 0600 0600     .>..............
 80047d8:	0600 0600 0600 0600 0600 0000 0000 0000     ................
	...
 80047f0:	0000 dd80 ffc0 cec0 ccc0 ccc0 ccc0 ccc0     ................
 8004800:	ccc0 ccc0 ccc0 0000 0000 0000 0000 0000     ................
 8004810:	0000 0000 0000 6f00 7f80 7180 6180 6180     .......o...q.a.a
 8004820:	6180 6180 6180 6180 6180 0000 0000 0000     .a.a.a.a.a......
	...
 8004838:	0000 1e00 3f00 7380 6180 6180 6180 6180     .....?.s.a.a.a.a
 8004848:	7380 3f00 1e00 0000 0000 0000 0000 0000     .s.?............
 8004858:	0000 0000 6e00 7f00 7380 6180 6180 6180     .....n...s.a.a.a
 8004868:	6180 7380 7f00 6e00 6000 6000 6000 6000     .a.s...n.`.`.`.`
	...
 8004880:	1d80 3f80 7380 6180 6180 6180 6180 7380     ...?.s.a.a.a.a.s
 8004890:	3f80 1d80 0180 0180 0180 0180 0000 0000     .?..............
 80048a0:	0000 0000 0000 6700 3f80 3900 3000 3000     .......g.?.9.0.0
 80048b0:	3000 3000 3000 3000 3000 0000 0000 0000     .0.0.0.0.0......
	...
 80048c8:	0000 1e00 3f80 6180 6000 7f00 3f80 0180     .....?.a.`...?..
 80048d8:	6180 7f00 1e00 0000 0000 0000 0000 0000     .a..............
 80048e8:	0800 1800 1800 7f00 7f00 1800 1800 1800     ................
 80048f8:	1800 1800 1800 1f80 0f80 0000 0000 0000     ................
	...
 8004910:	0000 6180 6180 6180 6180 6180 6180 6180     ...a.a.a.a.a.a.a
 8004920:	6380 7f80 3d80 0000 0000 0000 0000 0000     .c...=..........
 8004930:	0000 0000 0000 60c0 3180 3180 3180 1b00     .......`.1.1.1..
 8004940:	1b00 1b00 0e00 0e00 0600 0000 0000 0000     ................
	...
 8004958:	0000 dd80 dd80 dd80 5500 5500 5500 7700     .........U.U.U.w
 8004968:	7700 2200 2200 0000 0000 0000 0000 0000     .w."."..........
 8004978:	0000 0000 0000 6180 3300 3300 1e00 0c00     .......a.3.3....
 8004988:	0c00 1e00 3300 3300 6180 0000 0000 0000     .....3.3.a......
	...
 80049a0:	6180 6180 3180 3300 3300 1b00 1b00 1b00     .a.a.1.3.3......
 80049b0:	0e00 0e00 0e00 1c00 7c00 7000 0000 0000     .........|.p....
 80049c0:	0000 0000 0000 7fc0 7fc0 0180 0300 0600     ................
 80049d0:	0c00 1800 3000 7fc0 7fc0 0000 0000 0000     .....0..........
 80049e0:	0380 0780 0600 0600 0600 0600 0600 0e00     ................
 80049f0:	1c00 1c00 0e00 0600 0600 0600 0600 0600     ................
 8004a00:	0780 0380 0600 0600 0600 0600 0600 0600     ................
 8004a10:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 8004a20:	0600 0600 0600 0600 3800 3c00 0c00 0c00     .........8.<....
 8004a30:	0c00 0c00 0c00 0e00 0700 0700 0e00 0c00     ................
 8004a40:	0c00 0c00 0c00 0c00 3c00 3800 0000 0000     .........<.8....
	...
 8004a58:	0000 3880 7f80 4700 0000 0000 0000 0000     ...8...G........
	...

08004a70 <Font16x26>:
	...
 8004aa4:	03e0 03e0 03e0 03e0 03e0 03e0 03e0 03e0     ................
 8004ab4:	03c0 03c0 01c0 01c0 01c0 01c0 01c0 0000     ................
 8004ac4:	0000 0000 03e0 03e0 03e0 0000 0000 0000     ................
 8004ad4:	0000 0000 1e3c 1e3c 1e3c 1e3c 1e3c 1e3c     ....<.<.<.<.<.<.
 8004ae4:	1e3c 0000 0000 0000 0000 0000 0000 0000     <...............
	...
 8004b0c:	01ce 03ce 03de 039e 039c 079c 3fff 7fff     .............?..
 8004b1c:	0738 0f38 0f78 0f78 0e78 ffff ffff 1ef0     8.8.x.x.x.......
 8004b2c:	1cf0 1ce0 3ce0 3de0 39e0 0000 0000 0000     .....<.=.9......
 8004b3c:	0000 0000 03fc 0ffe 1fee 1ee0 1ee0 1ee0     ................
 8004b4c:	1ee0 1fe0 0fe0 07e0 03f0 01fc 01fe 01fe     ................
 8004b5c:	01fe 01fe 01fe 01fe 3dfe 3ffc 0ff0 01e0     .........=.?....
 8004b6c:	01e0 0000 0000 0000 3e03 f707 e78f e78e     .........>......
 8004b7c:	e39e e3bc e7b8 e7f8 f7f0 3fe0 01c0 03ff     ...........?....
 8004b8c:	07ff 07f3 0ff3 1ef3 3cf3 38f3 78f3 f07f     .........<.8.x..
 8004b9c:	e03f 0000 0000 0000 0000 0000 07e0 0ff8     ?...............
 8004bac:	0f78 1f78 1f78 1f78 0f78 0ff0 0fe0 1f80     x.x.x.x.x.......
 8004bbc:	7fc3 fbc3 f3e7 f1f7 f0f7 f0ff f07f f83e     ..............>.
 8004bcc:	7c7f 3fff 1fef 0000 0000 0000 0000 0000     .|.?............
 8004bdc:	03e0 03e0 03e0 03e0 03e0 03c0 01c0 0000     ................
	...
 8004c10:	003f 007c 01f0 01e0 03c0 07c0 0780 0780     ?.|.............
 8004c20:	0f80 0f00 0f00 0f00 0f00 0f00 0f00 0f80     ................
 8004c30:	0780 0780 07c0 03c0 01e0 01f0 007c 003f     ............|.?.
 8004c40:	000f 0000 7e00 1f00 07c0 03c0 01e0 01f0     .....~..........
 8004c50:	00f0 00f0 00f8 0078 0078 0078 0078 0078     ......x.x.x.x.x.
 8004c60:	0078 00f8 00f0 00f0 01f0 01e0 03c0 07c0     x...............
 8004c70:	1f00 7e00 7800 0000 03e0 03c0 01c0 39ce     ...~.x.........9
 8004c80:	3fff 3f7f 0320 0370 07f8 0f78 1f3c 0638     .?.? .p...x.<.8.
	...
 8004cb8:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 ffff     ................
 8004cc8:	ffff 01c0 01c0 01c0 01c0 01c0 01c0 0000     ................
	...
 8004d00:	0000 03e0 03e0 03e0 03e0 01e0 01e0 01e0     ................
 8004d10:	01c0 0380 0000 0000 0000 0000 0000 0000     ................
	...
 8004d28:	0000 3ffe 3ffe 0000 0000 0000 0000 0000     ...?.?..........
	...
 8004d68:	0000 03e0 03e0 03e0 03e0 0000 0000 0000     ................
 8004d78:	0000 0000 000f 000f 001e 001e 003c 003c     ............<.<.
 8004d88:	0078 0078 00f0 00f0 01e0 01e0 03c0 03c0     x.x.............
 8004d98:	0780 0780 0f00 0f00 1e00 1e00 3c00 3c00     .............<.<
 8004da8:	7800 7800 f000 0000 07f0 0ff8 1f7c 3e3e     .x.x........|.>>
 8004db8:	3c1e 7c1f 7c1f 780f 780f 780f 780f 780f     .<.|.|.x.x.x.x.x
 8004dc8:	780f 780f 7c1f 7c1f 3c1e 3e3e 1f7c 0ff8     .x.x.|.|.<>>|...
 8004dd8:	07f0 0000 0000 0000 0000 0000 00f0 07f0     ................
 8004de8:	3ff0 3ff0 01f0 01f0 01f0 01f0 01f0 01f0     .?.?............
 8004df8:	01f0 01f0 01f0 01f0 01f0 01f0 01f0 01f0     ................
 8004e08:	01f0 3fff 3fff 0000 0000 0000 0000 0000     ...?.?..........
 8004e18:	0fe0 3ff8 3c7c 003c 003e 003e 003e 003c     ...?|<<.>.>.>.<.
 8004e28:	003c 007c 00f8 01f0 03e0 07c0 0780 0f00     <.|.............
 8004e38:	1e00 3e00 3c00 3ffe 3ffe 0000 0000 0000     ...>.<.?.?......
 8004e48:	0000 0000 0ff0 1ff8 1c7c 003e 003e 003e     ........|.>.>.>.
 8004e58:	003c 003c 00f8 0ff0 0ff8 007c 003e 001e     <.<.......|.>...
 8004e68:	001e 001e 001e 003e 1c7c 1ff8 1fe0 0000     ......>.|.......
	...
 8004e80:	0078 00f8 00f8 01f8 03f8 07f8 07f8 0f78     x.............x.
 8004e90:	1e78 1e78 3c78 7878 7878 ffff ffff 0078     x.x.x<xxxx....x.
 8004ea0:	0078 0078 0078 0078 0078 0000 0000 0000     x.x.x.x.x.......
 8004eb0:	0000 0000 1ffc 1ffc 1ffc 1e00 1e00 1e00     ................
 8004ec0:	1e00 1e00 1fe0 1ff8 00fc 007c 003e 003e     ..........|.>.>.
 8004ed0:	001e 003e 003e 003c 1c7c 1ff8 1fe0 0000     ..>.>.<.|.......
	...
 8004ee8:	01fc 07fe 0f8e 1f00 1e00 3e00 3c00 3c00     ...........>.<.<
 8004ef8:	3df8 3ffc 7f3e 7e1f 3c0f 3c0f 3c0f 3c0f     .=.?>..~.<.<.<.<
 8004f08:	3e0f 1e1f 1f3e 0ffc 03f0 0000 0000 0000     .>..>...........
 8004f18:	0000 0000 3fff 3fff 3fff 000f 001e 001e     .....?.?.?......
 8004f28:	003c 0038 0078 00f0 00f0 01e0 01e0 03c0     <.8.x...........
 8004f38:	03c0 0780 0f80 0f80 0f00 1f00 1f00 0000     ................
	...
 8004f50:	07f8 0ffc 1f3e 1e1e 3e1e 3e1e 1e1e 1f3c     ....>....>.>..<.
 8004f60:	0ff8 07f0 0ff8 1efc 3e3e 3c1f 7c1f 7c0f     ........>>.<.|.|
 8004f70:	7c0f 3c1f 3f3e 1ffc 07f0 0000 0000 0000     .|.<>?..........
 8004f80:	0000 0000 07f0 0ff8 1e7c 3c3e 3c1e 7c1f     ........|.><.<.|
 8004f90:	7c1f 7c1f 7c1f 3c1f 3e3f 1fff 07ef 001f     .|.|.|.<?>......
 8004fa0:	001e 001e 003e 003c 38f8 3ff0 1fe0 0000     ....>.<..8.?....
	...
 8004fc4:	03e0 03e0 03e0 03e0 0000 0000 0000 0000     ................
 8004fd4:	0000 0000 0000 03e0 03e0 03e0 03e0 0000     ................
	...
 8004ff8:	03e0 03e0 03e0 03e0 0000 0000 0000 0000     ................
 8005008:	0000 0000 0000 03e0 03e0 03e0 03e0 01e0     ................
 8005018:	01e0 01e0 03c0 0380 0000 0000 0000 0000     ................
 8005028:	0000 0000 0003 000f 003f 00fc 03f0 0fc0     ........?.......
 8005038:	3f00 fe00 3f00 0fc0 03f0 00fc 003f 000f     .?...?......?...
 8005048:	0003 0000 0000 0000 0000 0000 0000 0000     ................
	...
 8005068:	ffff ffff 0000 0000 0000 ffff ffff 0000     ................
	...
 8005094:	e000 f800 7e00 1f80 07e0 01f8 007e 001f     .....~......~...
 80050a4:	007e 01f8 07e0 1f80 7e00 f800 e000 0000     ~........~......
	...
 80050bc:	1ff0 3ffc 383e 381f 381f 001e 001e 003c     ...?>8.8.8....<.
 80050cc:	0078 00f0 01e0 03c0 03c0 07c0 07c0 0000     x...............
 80050dc:	0000 0000 07c0 07c0 07c0 0000 0000 0000     ................
 80050ec:	0000 0000 03f8 0ffe 1f1e 3e0f 3c7f 78ff     ...........>.<.x
 80050fc:	79ef 73c7 f3c7 f38f f38f f38f f39f f39f     .y.s............
 800510c:	73ff 7bff 79f7 3c00 1f1c 0ffc 03f8 0000     .s.{.y.<........
	...
 8005128:	0000 03e0 03e0 07f0 07f0 07f0 0f78 0f78     ............x.x.
 8005138:	0e7c 1e3c 1e3c 3c3e 3ffe 3fff 781f 780f     |.<.<.><.?.?.x.x
 8005148:	f00f f007 f007 0000 0000 0000 0000 0000     ................
 8005158:	0000 0000 0000 3ff8 3ffc 3c3e 3c1e 3c1e     .......?.?><.<.<
 8005168:	3c1e 3c3e 3c7c 3ff0 3ff8 3c7e 3c1f 3c1f     .<><|<.?.?~<.<.<
 8005178:	3c0f 3c0f 3c1f 3ffe 3ff8 0000 0000 0000     .<.<.<.?.?......
	...
 8005190:	0000 01ff 07ff 1f87 3e00 3c00 7c00 7800     .........>.<.|.x
 80051a0:	7800 7800 7800 7800 7c00 7c00 3e00 3f00     .x.x.x.x.|.|.>.?
 80051b0:	1f83 07ff 01ff 0000 0000 0000 0000 0000     ................
 80051c0:	0000 0000 0000 7ff0 7ffc 787e 781f 781f     ..........~x.x.x
 80051d0:	780f 780f 780f 780f 780f 780f 780f 780f     .x.x.x.x.x.x.x.x
 80051e0:	781f 781e 787e 7ff8 7fe0 0000 0000 0000     .x.x~x..........
	...
 80051f8:	0000 3fff 3fff 3e00 3e00 3e00 3e00 3e00     ...?.?.>.>.>.>.>
 8005208:	3e00 3ffe 3ffe 3e00 3e00 3e00 3e00 3e00     .>.?.?.>.>.>.>.>
 8005218:	3e00 3fff 3fff 0000 0000 0000 0000 0000     .>.?.?..........
 8005228:	0000 0000 0000 1fff 1fff 1e00 1e00 1e00     ................
 8005238:	1e00 1e00 1e00 1fff 1fff 1e00 1e00 1e00     ................
 8005248:	1e00 1e00 1e00 1e00 1e00 0000 0000 0000     ................
	...
 8005260:	0000 03fe 0fff 1f87 3e00 7c00 7c00 7800     .........>.|.|.x
 8005270:	f800 f800 f87f f87f 780f 7c0f 7c0f 3e0f     .........x.|.|.>
 8005280:	1f8f 0fff 03fe 0000 0000 0000 0000 0000     ................
 8005290:	0000 0000 0000 7c1f 7c1f 7c1f 7c1f 7c1f     .......|.|.|.|.|
 80052a0:	7c1f 7c1f 7c1f 7fff 7fff 7c1f 7c1f 7c1f     .|.|.|.....|.|.|
 80052b0:	7c1f 7c1f 7c1f 7c1f 7c1f 0000 0000 0000     .|.|.|.|.|......
	...
 80052c8:	0000 3fff 3fff 03e0 03e0 03e0 03e0 03e0     ...?.?..........
 80052d8:	03e0 03e0 03e0 03e0 03e0 03e0 03e0 03e0     ................
 80052e8:	03e0 3fff 3fff 0000 0000 0000 0000 0000     ...?.?..........
 80052f8:	0000 0000 0000 1ffc 1ffc 007c 007c 007c     ..........|.|.|.
 8005308:	007c 007c 007c 007c 007c 007c 007c 007c     |.|.|.|.|.|.|.|.
 8005318:	0078 0078 38f8 3ff0 3fc0 0000 0000 0000     x.x..8.?.?......
	...
 8005330:	0000 3c1f 3c1e 3c3c 3c78 3cf0 3de0 3fe0     ...<.<<<x<.<.=.?
 8005340:	3fc0 3f80 3fc0 3fe0 3df0 3cf0 3c78 3c7c     .?.?.?.?.=.<x<|<
 8005350:	3c3e 3c1f 3c0f 0000 0000 0000 0000 0000     ><.<.<..........
 8005360:	0000 0000 0000 3e00 3e00 3e00 3e00 3e00     .......>.>.>.>.>
 8005370:	3e00 3e00 3e00 3e00 3e00 3e00 3e00 3e00     .>.>.>.>.>.>.>.>
 8005380:	3e00 3e00 3e00 3fff 3fff 0000 0000 0000     .>.>.>.?.?......
	...
 8005398:	0000 f81f fc1f fc1f fe3f fe3f fe3f ff7f     ........?.?.?...
 80053a8:	ff77 ff77 f7f7 f7e7 f3e7 f3e7 f3c7 f007     w.w.............
 80053b8:	f007 f007 f007 0000 0000 0000 0000 0000     ................
 80053c8:	0000 0000 0000 7c0f 7c0f 7e0f 7f0f 7f0f     .......|.|.~....
 80053d8:	7f8f 7f8f 7fcf 7bef 79ef 79ff 78ff 78ff     .......{.y.y.x.x
 80053e8:	787f 783f 783f 781f 781f 0000 0000 0000     .x?x?x.x.x......
	...
 8005400:	0000 07f0 1ffc 3e3e 7c1f 780f 780f f80f     ......>>.|.x.x..
 8005410:	f80f f80f f80f f80f f80f 780f 780f 7c1f     ...........x.x.|
 8005420:	3e3e 1ffc 07f0 0000 0000 0000 0000 0000     >>..............
 8005430:	0000 0000 0000 3ffc 3fff 3e1f 3e0f 3e0f     .......?.?.>.>.>
 8005440:	3e0f 3e0f 3e1f 3e3f 3ffc 3ff0 3e00 3e00     .>.>.>?>.?.?.>.>
 8005450:	3e00 3e00 3e00 3e00 3e00 0000 0000 0000     .>.>.>.>.>......
	...
 8005468:	0000 07f0 1ffc 3e3e 7c1f 780f 780f f80f     ......>>.|.x.x..
 8005478:	f80f f80f f80f f80f f80f 780f 780f 7c1f     ...........x.x.|
 8005488:	3e3e 1ffc 07f8 007c 003f 000f 0003 0000     >>....|.?.......
 8005498:	0000 0000 0000 3ff0 3ffc 3c7e 3c3e 3c1e     .......?.?~<><.<
 80054a8:	3c1e 3c3e 3c3c 3cfc 3ff0 3fe0 3df0 3cf8     .<><<<.<.?.?.=.<
 80054b8:	3c7c 3c3e 3c1e 3c1f 3c0f 0000 0000 0000     |<><.<.<.<......
	...
 80054d0:	0000 07fc 1ffe 3e0e 3c00 3c00 3c00 3e00     .......>.<.<.<.>
 80054e0:	1fc0 0ff8 03fe 007f 001f 000f 000f 201f     ............... 
 80054f0:	3c3e 3ffc 1ff0 0000 0000 0000 0000 0000     ><.?............
 8005500:	0000 0000 0000 ffff ffff 03e0 03e0 03e0     ................
 8005510:	03e0 03e0 03e0 03e0 03e0 03e0 03e0 03e0     ................
 8005520:	03e0 03e0 03e0 03e0 03e0 0000 0000 0000     ................
	...
 8005538:	0000 7c0f 7c0f 7c0f 7c0f 7c0f 7c0f 7c0f     ...|.|.|.|.|.|.|
 8005548:	7c0f 7c0f 7c0f 7c0f 7c0f 7c0f 3c1e 3c1e     .|.|.|.|.|.|.<.<
 8005558:	3e3e 1ffc 07f0 0000 0000 0000 0000 0000     >>..............
 8005568:	0000 0000 0000 f007 f007 f807 780f 7c0f     .............x.|
 8005578:	3c1e 3c1e 3e1e 1e3c 1f3c 1f78 0f78 0ff8     .<.<.><.<.x.x...
 8005588:	07f0 07f0 07f0 03e0 03e0 0000 0000 0000     ................
	...
 80055a0:	0000 e003 f003 f003 f007 f3e7 f3e7 f3e7     ................
 80055b0:	73e7 7bf7 7ff7 7fff 7f7f 7f7f 7f7e 3f7e     .s.{........~.~?
 80055c0:	3e3e 3e3e 3e3e 0000 0000 0000 0000 0000     >>>>>>..........
 80055d0:	0000 0000 0000 f807 7c0f 3e1e 3e3e 1f3c     .........|.>>><.
 80055e0:	0ff8 07f0 07e0 03e0 03e0 07f0 0ff8 0f7c     ..............|.
 80055f0:	1e7c 3c3e 781f 780f f00f 0000 0000 0000     |.><.x.x........
	...
 8005608:	0000 f807 7807 7c0f 3c1e 3e1e 1f3c 0f78     .....x.|.<.><.x.
 8005618:	0ff8 07f0 03e0 03e0 03e0 03e0 03e0 03e0     ................
 8005628:	03e0 03e0 03e0 0000 0000 0000 0000 0000     ................
 8005638:	0000 0000 0000 7fff 7fff 000f 001f 003e     ..............>.
 8005648:	007c 00f8 00f0 01e0 03e0 07c0 0f80 0f00     |...............
 8005658:	1e00 3e00 7c00 7fff 7fff 0000 0000 0000     ...>.|..........
 8005668:	0000 0000 07ff 0780 0780 0780 0780 0780     ................
 8005678:	0780 0780 0780 0780 0780 0780 0780 0780     ................
 8005688:	0780 0780 0780 0780 0780 0780 0780 0780     ................
 8005698:	0780 07ff 07ff 0000 7800 7800 3c00 3c00     .........x.x.<.<
 80056a8:	1e00 1e00 0f00 0f00 0780 0780 03c0 03c0     ................
 80056b8:	01e0 01e0 00f0 00f0 0078 0078 003c 003c     ........x.x.<.<.
 80056c8:	001e 001e 000f 000f 0007 0000 7ff0 00f0     ................
 80056d8:	00f0 00f0 00f0 00f0 00f0 00f0 00f0 00f0     ................
 80056e8:	00f0 00f0 00f0 00f0 00f0 00f0 00f0 00f0     ................
 80056f8:	00f0 00f0 00f0 00f0 00f0 7ff0 7ff0 0000     ................
 8005708:	00c0 01c0 01c0 03e0 03e0 07f0 07f0 0778     ..............x.
 8005718:	0f78 0f38 1e3c 1e3c 3c1e 3c1e 380f 780f     x.8.<.<..<.<.8.x
 8005728:	7807 0000 0000 0000 0000 0000 0000 0000     .x..............
	...
 8005764:	0000 ffff ffff 0000 0000 0000 00f0 0000     ................
	...
 80057b0:	0ff8 3ffc 3c7c 003e 003e 003e 07fe 1ffe     ...?|<>.>.>.....
 80057c0:	3e3e 7c3e 783e 7c3e 7c7e 3fff 1fcf 0000     >>>|>x>|~|.?....
	...
 80057d8:	3c00 3c00 3c00 3c00 3c00 3c00 3df8 3ffe     .<.<.<.<.<.<.=.?
 80057e8:	3f3e 3e1f 3c0f 3c0f 3c0f 3c0f 3c0f 3c0f     >?.>.<.<.<.<.<.<
 80057f8:	3c1f 3c1e 3f3e 3ffc 3bf0 0000 0000 0000     .<.<>?.?.;......
	...
 8005818:	03fe 0fff 1f87 3e00 3e00 3c00 7c00 7c00     .......>.>.<.|.|
 8005828:	7c00 3c00 3e00 3e00 1f87 0fff 03fe 0000     .|.<.>.>........
	...
 8005840:	001f 001f 001f 001f 001f 001f 07ff 1fff     ................
 8005850:	3e3f 3c1f 7c1f 7c1f 7c1f 781f 781f 7c1f     ?>.<.|.|.|.x.x.|
 8005860:	7c1f 3c3f 3e7f 1fff 0fdf 0000 0000 0000     .|?<.>..........
	...
 8005880:	03f8 0ffc 1f3e 3e1e 3c1f 7c1f 7fff 7fff     ....>..>.<.|....
 8005890:	7c00 7c00 3c00 3e00 1f07 0fff 03fe 0000     .|.|.<.>........
	...
 80058a8:	01ff 03e1 03c0 07c0 07c0 07c0 7fff 7fff     ................
 80058b8:	07c0 07c0 07c0 07c0 07c0 07c0 07c0 07c0     ................
 80058c8:	07c0 07c0 07c0 07c0 07c0 0000 0000 0000     ................
	...
 80058e8:	07ef 1fff 3e7f 3c1f 7c1f 7c1f 781f 781f     .....>.<.|.|.x.x
 80058f8:	781f 7c1f 7c1f 3c3f 3e7f 1fff 0fdf 001e     .x.|.|?<.>......
 8005908:	001e 001e 387c 3ff8 3c00 3c00 3c00 3c00     ....|8.?.<.<.<.<
 8005918:	3c00 3c00 3dfc 3ffe 3f9e 3f1f 3e1f 3c1f     .<.<.=.?.?.?.>.<
 8005928:	3c1f 3c1f 3c1f 3c1f 3c1f 3c1f 3c1f 3c1f     .<.<.<.<.<.<.<.<
 8005938:	3c1f 0000 0000 0000 0000 0000 01f0 01f0     .<..............
	...
 8005950:	7fe0 7fe0 01e0 01e0 01e0 01e0 01e0 01e0     ................
 8005960:	01e0 01e0 01e0 01e0 01e0 01e0 01e0 0000     ................
	...
 8005978:	00f8 00f8 0000 0000 0000 0000 3ff8 3ff8     .............?.?
 8005988:	00f8 00f8 00f8 00f8 00f8 00f8 00f8 00f8     ................
 8005998:	00f8 00f8 00f8 00f8 00f8 00f8 00f8 00f0     ................
 80059a8:	71f0 7fe0 3c00 3c00 3c00 3c00 3c00 3c00     .q...<.<.<.<.<.<
 80059b8:	3c1f 3c3e 3c7c 3cf8 3df0 3de0 3fc0 3fc0     .<><|<.<.=.=.?.?
 80059c8:	3fe0 3df0 3cf8 3c7c 3c3e 3c1f 3c1f 0000     .?.=.<|<><.<.<..
	...
 80059e0:	7ff0 01f0 01f0 01f0 01f0 01f0 01f0 01f0     ................
 80059f0:	01f0 01f0 01f0 01f0 01f0 01f0 01f0 01f0     ................
 8005a00:	01f0 01f0 01f0 01f0 01f0 0000 0000 0000     ................
	...
 8005a20:	f79e ffff ffff ffff fbe7 f9e7 f1c7 f1c7     ................
 8005a30:	f1c7 f1c7 f1c7 f1c7 f1c7 f1c7 f1c7 0000     ................
	...
 8005a54:	3dfc 3ffe 3f9e 3f1f 3e1f 3c1f 3c1f 3c1f     .=.?.?.?.>.<.<.<
 8005a64:	3c1f 3c1f 3c1f 3c1f 3c1f 3c1f 3c1f 0000     .<.<.<.<.<.<.<..
	...
 8005a88:	07f0 1ffc 3e3e 3c1f 7c1f 780f 780f 780f     ....>>.<.|.x.x.x
 8005a98:	780f 780f 7c1f 3c1f 3e3e 1ffc 07f0 0000     .x.x.|.<>>......
	...
 8005abc:	3df8 3ffe 3f3e 3e1f 3c0f 3c0f 3c0f 3c0f     .=.?>?.>.<.<.<.<
 8005acc:	3c0f 3c0f 3c1f 3e1e 3f3e 3ffc 3ff8 3c00     .<.<.<.>>?.?.?.<
 8005adc:	3c00 3c00 3c00 3c00 0000 0000 0000 0000     .<.<.<.<........
 8005aec:	0000 0000 07ee 1ffe 3e7e 3c1e 7c1e 781e     ........~>.<.|.x
 8005afc:	781e 781e 781e 781e 7c1e 7c3e 3e7e 1ffe     .x.x.x.x.|>|~>..
 8005b0c:	0fde 001e 001e 001e 001e 001e 0000 0000     ................
	...
 8005b24:	1f7f 1fff 1fe7 1fc7 1f87 1f00 1f00 1f00     ................
 8005b34:	1f00 1f00 1f00 1f00 1f00 1f00 1f00 0000     ................
	...
 8005b58:	07fc 1ffe 1e0e 3e00 3e00 3f00 1fe0 07fc     .......>.>.?....
 8005b68:	00fe 003e 001e 001e 3c3e 3ffc 1ff0 0000     ..>.....><.?....
	...
 8005b84:	0000 0780 0780 0780 7fff 7fff 0780 0780     ................
 8005b94:	0780 0780 0780 0780 0780 0780 0780 0780     ................
 8005ba4:	07c0 03ff 01ff 0000 0000 0000 0000 0000     ................
	...
 8005bc0:	3c1e 3c1e 3c1e 3c1e 3c1e 3c1e 3c1e 3c1e     .<.<.<.<.<.<.<.<
 8005bd0:	3c1e 3c1e 3c3e 3c7e 3efe 1ffe 0fde 0000     .<.<><~<.>......
	...
 8005bf4:	f007 780f 780f 3c1e 3c1e 3e1e 1e3c 1e3c     ...x.x.<.<.><.<.
 8005c04:	0f78 0f78 0ff0 07f0 07f0 03e0 03e0 0000     x.x.............
	...
 8005c28:	f003 f1e3 f3e3 f3e7 f3f7 f3f7 7ff7 7f77     ..............w.
 8005c38:	7f7f 7f7f 7f7f 3e3e 3e3e 3e3e 3e3e 0000     ......>>>>>>>>..
	...
 8005c5c:	7c0f 3e1e 3e3c 1f3c 0ff8 07f0 07f0 03e0     .|.><><.........
 8005c6c:	07f0 07f8 0ff8 1e7c 3e3e 3c1f 781f 0000     ......|.>>.<.x..
	...
 8005c90:	f807 780f 7c0f 3c1e 3c1e 1e3c 1e3c 1f3c     ...x.|.<.<<.<.<.
 8005ca0:	0f78 0ff8 07f0 07f0 03e0 03e0 03c0 03c0     x...............
 8005cb0:	03c0 0780 0f80 7f00 0000 0000 0000 0000     ................
 8005cc0:	0000 0000 3fff 3fff 001f 003e 007c 00f8     .....?.?..>.|...
 8005cd0:	01f0 03e0 07c0 0f80 1f00 1e00 3c00 7fff     .............<..
 8005ce0:	7fff 0000 0000 0000 0000 0000 01fe 03e0     ................
 8005cf0:	03c0 03c0 03c0 03c0 01e0 01e0 01e0 01c0     ................
 8005d00:	03c0 3f80 3f80 03c0 01c0 01e0 01e0 01e0     ...?.?..........
 8005d10:	03c0 03c0 03c0 03c0 03e0 01fe 007e 0000     ............~...
 8005d20:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 01c0     ................
 8005d30:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 01c0     ................
 8005d40:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 01c0     ................
 8005d50:	01c0 0000 3fc0 03e0 01e0 01e0 01e0 01e0     .....?..........
 8005d60:	01c0 03c0 03c0 01c0 01e0 00fe 00fe 01e0     ................
 8005d70:	01c0 03c0 03c0 01c0 01e0 01e0 01e0 01e0     ................
 8005d80:	03e0 3fc0 3f00 0000 0000 0000 0000 0000     ...?.?..........
	...
 8005d9c:	0000 3f07 7fc7 73e7 f1ff f07e 0000 0000     ...?...s..~.....
	...
 8005dbc:	5953 4353 4b4c 3a20 2520 646c 7a48 0a0d     SYSCLK : %ldHz..
 8005dcc:	0000 0000 4348 4b4c 2020 3a20 2520 646c     ....HCLK   : %ld
 8005ddc:	7a48 0a0d 0000 0000 4350 4b4c 2031 3a20     Hz......PCLK1  :
 8005dec:	2520 646c 7a48 0a0d 0000 0000 4350 4b4c      %ldHz......PCLK
 8005dfc:	2032 3a20 2520 646c 7a48 0a0d 000a 0000     2  : %ldHz......
 8005e0c:	6548 6c6c 216f 0000 6554 7473 002e 0000     Hello!..Test....

08005e1c <AHBPrescTable>:
	...
 8005e24:	0201 0403 0706 0908                         ........

08005e2c <APBPrescTable>:
 8005e2c:	0000 0000 0201 0403 2d23 2b30 0020 6c68     ........#-0+ .hl
 8005e3c:	004c 6665 4567 4746 3000 3231 3433 3635     L.efgEFG.0123456
 8005e4c:	3837 4139 4342 4544 0046 3130 3332 3534     789ABCDEF.012345
 8005e5c:	3736 3938 6261 6463 6665 0000               6789abcdef..

08005e68 <_init>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	bf00      	nop
 8005e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6e:	bc08      	pop	{r3}
 8005e70:	469e      	mov	lr, r3
 8005e72:	4770      	bx	lr

08005e74 <_fini>:
 8005e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e76:	bf00      	nop
 8005e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7a:	bc08      	pop	{r3}
 8005e7c:	469e      	mov	lr, r3
 8005e7e:	4770      	bx	lr
