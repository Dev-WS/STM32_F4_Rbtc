
STM32_F4_Rbtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  08005588  08005588  00015588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005590  08005590  00015590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  20000000  08005598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005ec  20000090  08005628  00020090  2**2
                  ALLOC
  7 ._user_heap_stack 00000404  2000067c  08005c14  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fbe6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001fe0  00000000  00000000  0002fca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f98  00000000  00000000  00031c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ec0  00000000  00000000  00032c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003e99  00000000  00000000  00033ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e2b9  00000000  00000000  00037979  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ed572  00000000  00000000  00045c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  001331a4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000472c  00000000  00000000  00133220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005570 	.word	0x08005570

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08005570 	.word	0x08005570

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_Init+0x34>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_Init+0x34>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x34>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x34>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d76:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f933 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 f810 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f000 f806 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f943 	bl	800104e <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 f90b 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000028 	.word	0x20000028
 8000dfc:	20000004 	.word	0x20000004
 8000e00:	20000000 	.word	0x20000000

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000004 	.word	0x20000004
 8000e28:	200004e4 	.word	0x200004e4

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200004e4 	.word	0x200004e4

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <__NVIC_EnableIRQ+0x38>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff29 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff3e 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff31 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffa2 	bl	8000fa0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800106a:	f000 f802 	bl	8001072 <HAL_SYSTICK_Callback>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d004      	beq.n	800109e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00c      	b.n	80010b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2205      	movs	r2, #5
 80010a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
 80010de:	e16b      	b.n	80013b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	f040 815a 	bne.w	80013b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x4a>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b12      	cmp	r3, #18
 800110c:	d123      	bne.n	8001156 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	69b9      	ldr	r1, [r7, #24]
 8001152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0203 	and.w	r2, r3, #3
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d00b      	beq.n	80011aa <HAL_GPIO_Init+0xe6>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800119e:	2b11      	cmp	r3, #17
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b12      	cmp	r3, #18
 80011a8:	d130      	bne.n	800120c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80b4 	beq.w	80013b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b5f      	ldr	r3, [pc, #380]	; (80013cc <HAL_GPIO_Init+0x308>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a5e      	ldr	r2, [pc, #376]	; (80013cc <HAL_GPIO_Init+0x308>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b5c      	ldr	r3, [pc, #368]	; (80013cc <HAL_GPIO_Init+0x308>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001266:	4a5a      	ldr	r2, [pc, #360]	; (80013d0 <HAL_GPIO_Init+0x30c>)
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a51      	ldr	r2, [pc, #324]	; (80013d4 <HAL_GPIO_Init+0x310>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d02b      	beq.n	80012ea <HAL_GPIO_Init+0x226>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a50      	ldr	r2, [pc, #320]	; (80013d8 <HAL_GPIO_Init+0x314>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d025      	beq.n	80012e6 <HAL_GPIO_Init+0x222>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4f      	ldr	r2, [pc, #316]	; (80013dc <HAL_GPIO_Init+0x318>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d01f      	beq.n	80012e2 <HAL_GPIO_Init+0x21e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4e      	ldr	r2, [pc, #312]	; (80013e0 <HAL_GPIO_Init+0x31c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d019      	beq.n	80012de <HAL_GPIO_Init+0x21a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4d      	ldr	r2, [pc, #308]	; (80013e4 <HAL_GPIO_Init+0x320>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d013      	beq.n	80012da <HAL_GPIO_Init+0x216>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4c      	ldr	r2, [pc, #304]	; (80013e8 <HAL_GPIO_Init+0x324>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00d      	beq.n	80012d6 <HAL_GPIO_Init+0x212>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4b      	ldr	r2, [pc, #300]	; (80013ec <HAL_GPIO_Init+0x328>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d007      	beq.n	80012d2 <HAL_GPIO_Init+0x20e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4a      	ldr	r2, [pc, #296]	; (80013f0 <HAL_GPIO_Init+0x32c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_GPIO_Init+0x20a>
 80012ca:	2307      	movs	r3, #7
 80012cc:	e00e      	b.n	80012ec <HAL_GPIO_Init+0x228>
 80012ce:	2308      	movs	r3, #8
 80012d0:	e00c      	b.n	80012ec <HAL_GPIO_Init+0x228>
 80012d2:	2306      	movs	r3, #6
 80012d4:	e00a      	b.n	80012ec <HAL_GPIO_Init+0x228>
 80012d6:	2305      	movs	r3, #5
 80012d8:	e008      	b.n	80012ec <HAL_GPIO_Init+0x228>
 80012da:	2304      	movs	r3, #4
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x228>
 80012de:	2303      	movs	r3, #3
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x228>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x228>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x228>
 80012ea:	2300      	movs	r3, #0
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	f002 0203 	and.w	r2, r2, #3
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012fc:	4934      	ldr	r1, [pc, #208]	; (80013d0 <HAL_GPIO_Init+0x30c>)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130a:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <HAL_GPIO_Init+0x330>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800132e:	4a31      	ldr	r2, [pc, #196]	; (80013f4 <HAL_GPIO_Init+0x330>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001334:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <HAL_GPIO_Init+0x330>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001358:	4a26      	ldr	r2, [pc, #152]	; (80013f4 <HAL_GPIO_Init+0x330>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <HAL_GPIO_Init+0x330>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <HAL_GPIO_Init+0x330>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_GPIO_Init+0x330>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ac:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <HAL_GPIO_Init+0x330>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	f67f ae90 	bls.w	80010e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c0:	bf00      	nop
 80013c2:	3724      	adds	r7, #36	; 0x24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40013800 	.word	0x40013800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40021400 	.word	0x40021400
 80013ec:	40021800 	.word	0x40021800
 80013f0:	40021c00 	.word	0x40021c00
 80013f4:	40013c00 	.word	0x40013c00

080013f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e001      	b.n	800141a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800141a:	7bfb      	ldrb	r3, [r7, #15]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001444:	e003      	b.n	800144e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e10f      	b.n	800168e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d106      	bne.n	8001488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f912 	bl	80016ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2224      	movs	r2, #36	; 0x24
 800148c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0201 	bic.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014a0:	f001 f934 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 80014a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4a7b      	ldr	r2, [pc, #492]	; (8001698 <HAL_I2C_Init+0x23c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d807      	bhi.n	80014c0 <HAL_I2C_Init+0x64>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a7a      	ldr	r2, [pc, #488]	; (800169c <HAL_I2C_Init+0x240>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	bf94      	ite	ls
 80014b8:	2301      	movls	r3, #1
 80014ba:	2300      	movhi	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	e006      	b.n	80014ce <HAL_I2C_Init+0x72>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4a77      	ldr	r2, [pc, #476]	; (80016a0 <HAL_I2C_Init+0x244>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	bf94      	ite	ls
 80014c8:	2301      	movls	r3, #1
 80014ca:	2300      	movhi	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0db      	b.n	800168e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4a72      	ldr	r2, [pc, #456]	; (80016a4 <HAL_I2C_Init+0x248>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0c9b      	lsrs	r3, r3, #18
 80014e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a64      	ldr	r2, [pc, #400]	; (8001698 <HAL_I2C_Init+0x23c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d802      	bhi.n	8001510 <HAL_I2C_Init+0xb4>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3301      	adds	r3, #1
 800150e:	e009      	b.n	8001524 <HAL_I2C_Init+0xc8>
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	4a63      	ldr	r2, [pc, #396]	; (80016a8 <HAL_I2C_Init+0x24c>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	3301      	adds	r3, #1
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	430b      	orrs	r3, r1
 800152a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001536:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4956      	ldr	r1, [pc, #344]	; (8001698 <HAL_I2C_Init+0x23c>)
 8001540:	428b      	cmp	r3, r1
 8001542:	d80d      	bhi.n	8001560 <HAL_I2C_Init+0x104>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e59      	subs	r1, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001552:	3301      	adds	r3, #1
 8001554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001558:	2b04      	cmp	r3, #4
 800155a:	bf38      	it	cc
 800155c:	2304      	movcc	r3, #4
 800155e:	e04f      	b.n	8001600 <HAL_I2C_Init+0x1a4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d111      	bne.n	800158c <HAL_I2C_Init+0x130>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1e58      	subs	r0, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	440b      	add	r3, r1
 8001576:	fbb0 f3f3 	udiv	r3, r0, r3
 800157a:	3301      	adds	r3, #1
 800157c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	e012      	b.n	80015b2 <HAL_I2C_Init+0x156>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1e58      	subs	r0, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	0099      	lsls	r1, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_I2C_Init+0x15e>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e022      	b.n	8001600 <HAL_I2C_Init+0x1a4>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10e      	bne.n	80015e0 <HAL_I2C_Init+0x184>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1e58      	subs	r0, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6859      	ldr	r1, [r3, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	440b      	add	r3, r1
 80015d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d4:	3301      	adds	r3, #1
 80015d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015de:	e00f      	b.n	8001600 <HAL_I2C_Init+0x1a4>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1e58      	subs	r0, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	0099      	lsls	r1, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	6809      	ldr	r1, [r1, #0]
 8001604:	4313      	orrs	r3, r2
 8001606:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800162e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6911      	ldr	r1, [r2, #16]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68d2      	ldr	r2, [r2, #12]
 800163a:	4311      	orrs	r1, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	430b      	orrs	r3, r1
 8001642:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2220      	movs	r2, #32
 800167a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	000186a0 	.word	0x000186a0
 800169c:	001e847f 	.word	0x001e847f
 80016a0:	003d08ff 	.word	0x003d08ff
 80016a4:	431bde83 	.word	0x431bde83
 80016a8:	10624dd3 	.word	0x10624dd3

080016ac <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	461a      	mov	r2, r3
 80016cc:	460b      	mov	r3, r1
 80016ce:	817b      	strh	r3, [r7, #10]
 80016d0:	4613      	mov	r3, r2
 80016d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff fbaa 	bl	8000e2c <HAL_GetTick>
 80016d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	f040 80e0 	bne.w	80018a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2319      	movs	r3, #25
 80016ee:	2201      	movs	r2, #1
 80016f0:	4970      	ldr	r1, [pc, #448]	; (80018b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 fa7a 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016fe:	2302      	movs	r3, #2
 8001700:	e0d3      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_I2C_Master_Transmit+0x50>
 800170c:	2302      	movs	r3, #2
 800170e:	e0cc      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b01      	cmp	r3, #1
 8001724:	d007      	beq.n	8001736 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0201 	orr.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001744:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2221      	movs	r2, #33	; 0x21
 800174a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2210      	movs	r2, #16
 8001752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	893a      	ldrh	r2, [r7, #8]
 8001766:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4a50      	ldr	r2, [pc, #320]	; (80018b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001778:	8979      	ldrh	r1, [r7, #10]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	6a3a      	ldr	r2, [r7, #32]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f9be 	bl	8001b00 <I2C_MasterRequestWrite>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e08d      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017a4:	e066      	b.n	8001874 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	6a39      	ldr	r1, [r7, #32]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 faf4 	bl	8001d98 <I2C_WaitOnTXEFlagUntilTimeout>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00d      	beq.n	80017d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d107      	bne.n	80017ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e06b      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b04      	cmp	r3, #4
 800180e:	d11b      	bne.n	8001848 <HAL_I2C_Master_Transmit+0x188>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001814:	2b00      	cmp	r3, #0
 8001816:	d017      	beq.n	8001848 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001832:	b29b      	uxth	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	3b01      	subs	r3, #1
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	6a39      	ldr	r1, [r7, #32]
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 fae4 	bl	8001e1a <I2C_WaitOnBTFFlagUntilTimeout>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00d      	beq.n	8001874 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	2b04      	cmp	r3, #4
 800185e:	d107      	bne.n	8001870 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e01a      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	2b00      	cmp	r3, #0
 800187a:	d194      	bne.n	80017a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2220      	movs	r2, #32
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e000      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018a8:	2302      	movs	r3, #2
  }
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	00100002 	.word	0x00100002
 80018b8:	ffff0000 	.word	0xffff0000

080018bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	460b      	mov	r3, r1
 80018ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff faae 	bl	8000e2c <HAL_GetTick>
 80018d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b20      	cmp	r3, #32
 80018e0:	f040 8105 	bne.w	8001aee <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2319      	movs	r3, #25
 80018ea:	2201      	movs	r2, #1
 80018ec:	4982      	ldr	r1, [pc, #520]	; (8001af8 <HAL_I2C_IsDeviceReady+0x23c>)
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 f97c 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80018fa:	2302      	movs	r3, #2
 80018fc:	e0f8      	b.n	8001af0 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_I2C_IsDeviceReady+0x50>
 8001908:	2302      	movs	r3, #2
 800190a:	e0f1      	b.n	8001af0 <HAL_I2C_IsDeviceReady+0x234>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b01      	cmp	r3, #1
 8001920:	d007      	beq.n	8001932 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0201 	orr.w	r2, r2, #1
 8001930:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001940:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2224      	movs	r2, #36	; 0x24
 8001946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4a6a      	ldr	r2, [pc, #424]	; (8001afc <HAL_I2C_IsDeviceReady+0x240>)
 8001954:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001964:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f93a 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0b6      	b.n	8001af0 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001982:	897b      	ldrh	r3, [r7, #10]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001990:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001992:	f7ff fa4b 	bl	8000e2c <HAL_GetTick>
 8001996:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	bf0c      	ite	eq
 80019a6:	2301      	moveq	r3, #1
 80019a8:	2300      	movne	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019bc:	bf0c      	ite	eq
 80019be:	2301      	moveq	r3, #1
 80019c0:	2300      	movne	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80019c6:	e025      	b.n	8001a14 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019c8:	f7ff fa30 	bl	8000e2c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d302      	bcc.n	80019de <HAL_I2C_IsDeviceReady+0x122>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d103      	bne.n	80019e6 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	22a0      	movs	r2, #160	; 0xa0
 80019e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2ba0      	cmp	r3, #160	; 0xa0
 8001a1e:	d005      	beq.n	8001a2c <HAL_I2C_IsDeviceReady+0x170>
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d102      	bne.n	8001a2c <HAL_I2C_IsDeviceReady+0x170>
 8001a26:	7dbb      	ldrb	r3, [r7, #22]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0cd      	beq.n	80019c8 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d129      	bne.n	8001a96 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a50:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2319      	movs	r3, #25
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4921      	ldr	r1, [pc, #132]	; (8001af8 <HAL_I2C_IsDeviceReady+0x23c>)
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 f8ba 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e036      	b.n	8001af0 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2220      	movs	r2, #32
 8001a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e02c      	b.n	8001af0 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001aae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2319      	movs	r3, #25
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	490f      	ldr	r1, [pc, #60]	; (8001af8 <HAL_I2C_IsDeviceReady+0x23c>)
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f896 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e012      	b.n	8001af0 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	3301      	adds	r3, #1
 8001ace:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	f4ff af3e 	bcc.w	8001956 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2220      	movs	r2, #32
 8001ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8001aee:	2302      	movs	r3, #2
  }
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	00100002 	.word	0x00100002
 8001afc:	ffff0000 	.word	0xffff0000

08001b00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d006      	beq.n	8001b2a <I2C_MasterRequestWrite+0x2a>
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d003      	beq.n	8001b2a <I2C_MasterRequestWrite+0x2a>
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b28:	d108      	bne.n	8001b3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e00b      	b.n	8001b54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	2b12      	cmp	r3, #18
 8001b42:	d107      	bne.n	8001b54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f843 	bl	8001bec <I2C_WaitOnFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e035      	b.n	8001bdc <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b78:	d108      	bne.n	8001b8c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b7a:	897b      	ldrh	r3, [r7, #10]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	e01b      	b.n	8001bc4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b8c:	897b      	ldrh	r3, [r7, #10]
 8001b8e:	11db      	asrs	r3, r3, #7
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f003 0306 	and.w	r3, r3, #6
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f063 030f 	orn	r3, r3, #15
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	490e      	ldr	r1, [pc, #56]	; (8001be4 <I2C_MasterRequestWrite+0xe4>)
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 f875 	bl	8001c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e010      	b.n	8001bdc <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001bba:	897b      	ldrh	r3, [r7, #10]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4907      	ldr	r1, [pc, #28]	; (8001be8 <I2C_MasterRequestWrite+0xe8>)
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f865 	bl	8001c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	00010008 	.word	0x00010008
 8001be8:	00010002 	.word	0x00010002

08001bec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bfc:	e025      	b.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d021      	beq.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c06:	f7ff f911 	bl	8000e2c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d302      	bcc.n	8001c1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d116      	bne.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f043 0220 	orr.w	r2, r3, #32
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e023      	b.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	0c1b      	lsrs	r3, r3, #16
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d10d      	bne.n	8001c70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf0c      	ite	eq
 8001c66:	2301      	moveq	r3, #1
 8001c68:	2300      	movne	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	e00c      	b.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	43da      	mvns	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf0c      	ite	eq
 8001c82:	2301      	moveq	r3, #1
 8001c84:	2300      	movne	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d0b6      	beq.n	8001bfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ca8:	e051      	b.n	8001d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb8:	d123      	bne.n	8001d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f043 0204 	orr.w	r2, r3, #4
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e046      	b.n	8001d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d021      	beq.n	8001d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0a:	f7ff f88f 	bl	8000e2c <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d302      	bcc.n	8001d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d116      	bne.n	8001d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f043 0220 	orr.w	r2, r3, #32
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e020      	b.n	8001d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	0c1b      	lsrs	r3, r3, #16
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d10c      	bne.n	8001d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4013      	ands	r3, r2
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf14      	ite	ne
 8001d6a:	2301      	movne	r3, #1
 8001d6c:	2300      	moveq	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	e00b      	b.n	8001d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	43da      	mvns	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf14      	ite	ne
 8001d84:	2301      	movne	r3, #1
 8001d86:	2300      	moveq	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d18d      	bne.n	8001caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001da4:	e02d      	b.n	8001e02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f878 	bl	8001e9c <I2C_IsAcknowledgeFailed>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e02d      	b.n	8001e12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d021      	beq.n	8001e02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dbe:	f7ff f835 	bl	8000e2c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d302      	bcc.n	8001dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d116      	bne.n	8001e02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f043 0220 	orr.w	r2, r3, #32
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e007      	b.n	8001e12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0c:	2b80      	cmp	r3, #128	; 0x80
 8001e0e:	d1ca      	bne.n	8001da6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e26:	e02d      	b.n	8001e84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 f837 	bl	8001e9c <I2C_IsAcknowledgeFailed>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e02d      	b.n	8001e94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3e:	d021      	beq.n	8001e84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e40:	f7fe fff4 	bl	8000e2c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d302      	bcc.n	8001e56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d116      	bne.n	8001e84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f043 0220 	orr.w	r2, r3, #32
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e007      	b.n	8001e94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d1ca      	bne.n	8001e28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb2:	d11b      	bne.n	8001eec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ebc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f043 0204 	orr.w	r2, r3, #4
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e22d      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d075      	beq.n	8002006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1a:	4ba3      	ldr	r3, [pc, #652]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d00c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f26:	4ba0      	ldr	r3, [pc, #640]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d112      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f32:	4b9d      	ldr	r3, [pc, #628]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4b99      	ldr	r3, [pc, #612]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d05b      	beq.n	8002004 <HAL_RCC_OscConfig+0x108>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d157      	bne.n	8002004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e208      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f60:	d106      	bne.n	8001f70 <HAL_RCC_OscConfig+0x74>
 8001f62:	4b91      	ldr	r3, [pc, #580]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a90      	ldr	r2, [pc, #576]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e01d      	b.n	8001fac <HAL_RCC_OscConfig+0xb0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x98>
 8001f7a:	4b8b      	ldr	r3, [pc, #556]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a8a      	ldr	r2, [pc, #552]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b88      	ldr	r3, [pc, #544]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a87      	ldr	r2, [pc, #540]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0xb0>
 8001f94:	4b84      	ldr	r3, [pc, #528]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a83      	ldr	r2, [pc, #524]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b81      	ldr	r3, [pc, #516]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a80      	ldr	r2, [pc, #512]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe ff3a 	bl	8000e2c <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7fe ff36 	bl	8000e2c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e1cd      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b76      	ldr	r3, [pc, #472]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0xc0>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe ff26 	bl	8000e2c <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7fe ff22 	bl	8000e2c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e1b9      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0xe8>
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d063      	beq.n	80020da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002012:	4b65      	ldr	r3, [pc, #404]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201e:	4b62      	ldr	r3, [pc, #392]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002026:	2b08      	cmp	r3, #8
 8002028:	d11c      	bne.n	8002064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202a:	4b5f      	ldr	r3, [pc, #380]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d116      	bne.n	8002064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	4b5c      	ldr	r3, [pc, #368]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_RCC_OscConfig+0x152>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d001      	beq.n	800204e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e18d      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	4b56      	ldr	r3, [pc, #344]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4952      	ldr	r1, [pc, #328]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	e03a      	b.n	80020da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d020      	beq.n	80020ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206c:	4b4f      	ldr	r3, [pc, #316]	; (80021ac <HAL_RCC_OscConfig+0x2b0>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002072:	f7fe fedb 	bl	8000e2c <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207a:	f7fe fed7 	bl	8000e2c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e16e      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4940      	ldr	r1, [pc, #256]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
 80020ac:	e015      	b.n	80020da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_OscConfig+0x2b0>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7fe feba 	bl	8000e2c <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020bc:	f7fe feb6 	bl	8000e2c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e14d      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d030      	beq.n	8002148 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d016      	beq.n	800211c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ee:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <HAL_RCC_OscConfig+0x2b4>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7fe fe9a 	bl	8000e2c <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fc:	f7fe fe96 	bl	8000e2c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e12d      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x200>
 800211a:	e015      	b.n	8002148 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_RCC_OscConfig+0x2b4>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7fe fe83 	bl	8000e2c <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212a:	f7fe fe7f 	bl	8000e2c <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e116      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800213e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80a0 	beq.w	8002296 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10f      	bne.n	8002186 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x2b8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d121      	bne.n	80021d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_RCC_OscConfig+0x2b8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_RCC_OscConfig+0x2b8>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219e:	f7fe fe45 	bl	8000e2c <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	e011      	b.n	80021ca <HAL_RCC_OscConfig+0x2ce>
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	42470000 	.word	0x42470000
 80021b0:	42470e80 	.word	0x42470e80
 80021b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe fe38 	bl	8000e2c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0cf      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ca:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_RCC_OscConfig+0x478>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_OscConfig+0x2f0>
 80021de:	4b66      	ldr	r3, [pc, #408]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	4a65      	ldr	r2, [pc, #404]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ea:	e01c      	b.n	8002226 <HAL_RCC_OscConfig+0x32a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d10c      	bne.n	800220e <HAL_RCC_OscConfig+0x312>
 80021f4:	4b60      	ldr	r3, [pc, #384]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	4a5f      	ldr	r2, [pc, #380]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002200:	4b5d      	ldr	r3, [pc, #372]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	4a5c      	ldr	r2, [pc, #368]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6713      	str	r3, [r2, #112]	; 0x70
 800220c:	e00b      	b.n	8002226 <HAL_RCC_OscConfig+0x32a>
 800220e:	4b5a      	ldr	r3, [pc, #360]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a59      	ldr	r2, [pc, #356]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	4b57      	ldr	r3, [pc, #348]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a56      	ldr	r2, [pc, #344]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d015      	beq.n	800225a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7fe fdfd 	bl	8000e2c <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7fe fdf9 	bl	8000e2c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e08e      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	4b4a      	ldr	r3, [pc, #296]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ee      	beq.n	8002236 <HAL_RCC_OscConfig+0x33a>
 8002258:	e014      	b.n	8002284 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7fe fde7 	bl	8000e2c <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe fde3 	bl	8000e2c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e078      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d105      	bne.n	8002296 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228a:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a3a      	ldr	r2, [pc, #232]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 8002290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d064      	beq.n	8002368 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229e:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d05c      	beq.n	8002364 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d141      	bne.n	8002336 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b32      	ldr	r3, [pc, #200]	; (800237c <HAL_RCC_OscConfig+0x480>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7fe fdb8 	bl	8000e2c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe fdb4 	bl	8000e2c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e04b      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	491d      	ldr	r1, [pc, #116]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002308:	4b1c      	ldr	r3, [pc, #112]	; (800237c <HAL_RCC_OscConfig+0x480>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe fd8d 	bl	8000e2c <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002316:	f7fe fd89 	bl	8000e2c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e020      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x41a>
 8002334:	e018      	b.n	8002368 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_RCC_OscConfig+0x480>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7fe fd76 	bl	8000e2c <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002344:	f7fe fd72 	bl	8000e2c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e009      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_RCC_OscConfig+0x47c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x448>
 8002362:	e001      	b.n	8002368 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40007000 	.word	0x40007000
 8002378:	40023800 	.word	0x40023800
 800237c:	42470060 	.word	0x42470060

08002380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0ca      	b.n	800252a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002394:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_RCC_ClockConfig+0x1b4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d90c      	bls.n	80023bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b64      	ldr	r3, [pc, #400]	; (8002534 <HAL_RCC_ClockConfig+0x1b4>)
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b62      	ldr	r3, [pc, #392]	; (8002534 <HAL_RCC_ClockConfig+0x1b4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0b6      	b.n	800252a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d4:	4b58      	ldr	r3, [pc, #352]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a57      	ldr	r2, [pc, #348]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80023da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ec:	4b52      	ldr	r3, [pc, #328]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a51      	ldr	r2, [pc, #324]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80023f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f8:	4b4f      	ldr	r3, [pc, #316]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	494c      	ldr	r1, [pc, #304]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d044      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	4b46      	ldr	r3, [pc, #280]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d119      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e07d      	b.n	800252a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d003      	beq.n	800243e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243a:	2b03      	cmp	r3, #3
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243e:	4b3e      	ldr	r3, [pc, #248]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e06d      	b.n	800252a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244e:	4b3a      	ldr	r3, [pc, #232]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e065      	b.n	800252a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245e:	4b36      	ldr	r3, [pc, #216]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f023 0203 	bic.w	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4933      	ldr	r1, [pc, #204]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002470:	f7fe fcdc 	bl	8000e2c <HAL_GetTick>
 8002474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	e00a      	b.n	800248e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002478:	f7fe fcd8 	bl	8000e2c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	; 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e04d      	b.n	800252a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 020c 	and.w	r2, r3, #12
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	429a      	cmp	r2, r3
 800249e:	d1eb      	bne.n	8002478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCC_ClockConfig+0x1b4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d20c      	bcs.n	80024c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <HAL_RCC_ClockConfig+0x1b4>)
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <HAL_RCC_ClockConfig+0x1b4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e030      	b.n	800252a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d4:	4b18      	ldr	r3, [pc, #96]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4915      	ldr	r1, [pc, #84]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	490d      	ldr	r1, [pc, #52]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002506:	f000 f81d 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 800250a:	4601      	mov	r1, r0
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	4a09      	ldr	r2, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	fa21 f303 	lsr.w	r3, r1, r3
 800251e:	4a08      	ldr	r2, [pc, #32]	; (8002540 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002522:	200f      	movs	r0, #15
 8002524:	f7fe fc3e 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023c00 	.word	0x40023c00
 8002538:	40023800 	.word	0x40023800
 800253c:	08005524 	.word	0x08005524
 8002540:	20000028 	.word	0x20000028

08002544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	2300      	movs	r3, #0
 8002554:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b04      	cmp	r3, #4
 8002564:	d007      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x32>
 8002566:	2b08      	cmp	r3, #8
 8002568:	d008      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x38>
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 80b4 	bne.w	80026d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002572:	60bb      	str	r3, [r7, #8]
       break;
 8002574:	e0b3      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002576:	4b5e      	ldr	r3, [pc, #376]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002578:	60bb      	str	r3, [r7, #8]
      break;
 800257a:	e0b0      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257c:	4b5a      	ldr	r3, [pc, #360]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002584:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002586:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d04a      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002592:	4b55      	ldr	r3, [pc, #340]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	f04f 0400 	mov.w	r4, #0
 800259c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	ea03 0501 	and.w	r5, r3, r1
 80025a8:	ea04 0602 	and.w	r6, r4, r2
 80025ac:	4629      	mov	r1, r5
 80025ae:	4632      	mov	r2, r6
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	f04f 0400 	mov.w	r4, #0
 80025b8:	0154      	lsls	r4, r2, #5
 80025ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025be:	014b      	lsls	r3, r1, #5
 80025c0:	4619      	mov	r1, r3
 80025c2:	4622      	mov	r2, r4
 80025c4:	1b49      	subs	r1, r1, r5
 80025c6:	eb62 0206 	sbc.w	r2, r2, r6
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	f04f 0400 	mov.w	r4, #0
 80025d2:	0194      	lsls	r4, r2, #6
 80025d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025d8:	018b      	lsls	r3, r1, #6
 80025da:	1a5b      	subs	r3, r3, r1
 80025dc:	eb64 0402 	sbc.w	r4, r4, r2
 80025e0:	f04f 0100 	mov.w	r1, #0
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	00e2      	lsls	r2, r4, #3
 80025ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025ee:	00d9      	lsls	r1, r3, #3
 80025f0:	460b      	mov	r3, r1
 80025f2:	4614      	mov	r4, r2
 80025f4:	195b      	adds	r3, r3, r5
 80025f6:	eb44 0406 	adc.w	r4, r4, r6
 80025fa:	f04f 0100 	mov.w	r1, #0
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	0262      	lsls	r2, r4, #9
 8002604:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002608:	0259      	lsls	r1, r3, #9
 800260a:	460b      	mov	r3, r1
 800260c:	4614      	mov	r4, r2
 800260e:	4618      	mov	r0, r3
 8002610:	4621      	mov	r1, r4
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f04f 0400 	mov.w	r4, #0
 8002618:	461a      	mov	r2, r3
 800261a:	4623      	mov	r3, r4
 800261c:	f7fe fa1e 	bl	8000a5c <__aeabi_uldivmod>
 8002620:	4603      	mov	r3, r0
 8002622:	460c      	mov	r4, r1
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	e049      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002628:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	f04f 0400 	mov.w	r4, #0
 8002632:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	ea03 0501 	and.w	r5, r3, r1
 800263e:	ea04 0602 	and.w	r6, r4, r2
 8002642:	4629      	mov	r1, r5
 8002644:	4632      	mov	r2, r6
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	f04f 0400 	mov.w	r4, #0
 800264e:	0154      	lsls	r4, r2, #5
 8002650:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002654:	014b      	lsls	r3, r1, #5
 8002656:	4619      	mov	r1, r3
 8002658:	4622      	mov	r2, r4
 800265a:	1b49      	subs	r1, r1, r5
 800265c:	eb62 0206 	sbc.w	r2, r2, r6
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	f04f 0400 	mov.w	r4, #0
 8002668:	0194      	lsls	r4, r2, #6
 800266a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800266e:	018b      	lsls	r3, r1, #6
 8002670:	1a5b      	subs	r3, r3, r1
 8002672:	eb64 0402 	sbc.w	r4, r4, r2
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	00e2      	lsls	r2, r4, #3
 8002680:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002684:	00d9      	lsls	r1, r3, #3
 8002686:	460b      	mov	r3, r1
 8002688:	4614      	mov	r4, r2
 800268a:	195b      	adds	r3, r3, r5
 800268c:	eb44 0406 	adc.w	r4, r4, r6
 8002690:	f04f 0100 	mov.w	r1, #0
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	02a2      	lsls	r2, r4, #10
 800269a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800269e:	0299      	lsls	r1, r3, #10
 80026a0:	460b      	mov	r3, r1
 80026a2:	4614      	mov	r4, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	4621      	mov	r1, r4
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f04f 0400 	mov.w	r4, #0
 80026ae:	461a      	mov	r2, r3
 80026b0:	4623      	mov	r3, r4
 80026b2:	f7fe f9d3 	bl	8000a5c <__aeabi_uldivmod>
 80026b6:	4603      	mov	r3, r0
 80026b8:	460c      	mov	r4, r1
 80026ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	3301      	adds	r3, #1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	60bb      	str	r3, [r7, #8]
      break;
 80026d6:	e002      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026da:	60bb      	str	r3, [r7, #8]
      break;
 80026dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026de:	68bb      	ldr	r3, [r7, #8]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	00f42400 	.word	0x00f42400
 80026f0:	007a1200 	.word	0x007a1200

080026f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_RCC_GetHCLKFreq+0x14>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000028 	.word	0x20000028

0800270c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002710:	f7ff fff0 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002714:	4601      	mov	r1, r0
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0a9b      	lsrs	r3, r3, #10
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4a03      	ldr	r2, [pc, #12]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002722:	5cd3      	ldrb	r3, [r2, r3]
 8002724:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40023800 	.word	0x40023800
 8002730:	08005534 	.word	0x08005534

08002734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002738:	f7ff ffdc 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 800273c:	4601      	mov	r1, r0
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	0b5b      	lsrs	r3, r3, #13
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	4a03      	ldr	r2, [pc, #12]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40023800 	.word	0x40023800
 8002758:	08005534 	.word	0x08005534

0800275c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e01d      	b.n	80027aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f815 	bl	80027b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f000 fb4a 	bl	8002e34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b06      	cmp	r3, #6
 80027ee:	d007      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2201      	movs	r2, #1
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fdf0 	bl	8003408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a15      	ldr	r2, [pc, #84]	; (8002884 <HAL_TIM_PWM_Start+0x74>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_TIM_PWM_Start+0x2c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_TIM_PWM_Start+0x78>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_TIM_PWM_Start+0x30>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_TIM_PWM_Start+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002854:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b06      	cmp	r3, #6
 8002866:	d007      	beq.n	8002878 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40010000 	.word	0x40010000
 8002888:	40010400 	.word	0x40010400

0800288c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d122      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d11b      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0202 	mvn.w	r2, #2
 80028b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fa92 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fa84 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fa95 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d122      	bne.n	800293c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b04      	cmp	r3, #4
 8002902:	d11b      	bne.n	800293c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0204 	mvn.w	r2, #4
 800290c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2202      	movs	r2, #2
 8002912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fa68 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 8002928:	e005      	b.n	8002936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fa5a 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fa6b 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	d122      	bne.n	8002990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b08      	cmp	r3, #8
 8002956:	d11b      	bne.n	8002990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0208 	mvn.w	r2, #8
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2204      	movs	r2, #4
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fa3e 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fa30 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fa41 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b10      	cmp	r3, #16
 800299c:	d122      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d11b      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0210 	mvn.w	r2, #16
 80029b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2208      	movs	r2, #8
 80029ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fa14 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fa06 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fa17 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d10e      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d107      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0201 	mvn.w	r2, #1
 8002a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f001 fc88 	bl	8004320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	2b80      	cmp	r3, #128	; 0x80
 8002a1c:	d10e      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d107      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fd15 	bl	8003466 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d10e      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b40      	cmp	r3, #64	; 0x40
 8002a56:	d107      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f9dc 	bl	8002e20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d10e      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d107      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0220 	mvn.w	r2, #32
 8002a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fcdf 	bl	8003452 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e0b4      	b.n	8002c20 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b0c      	cmp	r3, #12
 8002aca:	f200 809f 	bhi.w	8002c0c <HAL_TIM_PWM_ConfigChannel+0x170>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002b09 	.word	0x08002b09
 8002ad8:	08002c0d 	.word	0x08002c0d
 8002adc:	08002c0d 	.word	0x08002c0d
 8002ae0:	08002c0d 	.word	0x08002c0d
 8002ae4:	08002b49 	.word	0x08002b49
 8002ae8:	08002c0d 	.word	0x08002c0d
 8002aec:	08002c0d 	.word	0x08002c0d
 8002af0:	08002c0d 	.word	0x08002c0d
 8002af4:	08002b8b 	.word	0x08002b8b
 8002af8:	08002c0d 	.word	0x08002c0d
 8002afc:	08002c0d 	.word	0x08002c0d
 8002b00:	08002c0d 	.word	0x08002c0d
 8002b04:	08002bcb 	.word	0x08002bcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fa30 	bl	8002f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0208 	orr.w	r2, r2, #8
 8002b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0204 	bic.w	r2, r2, #4
 8002b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6999      	ldr	r1, [r3, #24]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	619a      	str	r2, [r3, #24]
      break;
 8002b46:	e062      	b.n	8002c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fa80 	bl	8003054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6999      	ldr	r1, [r3, #24]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	021a      	lsls	r2, r3, #8
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	619a      	str	r2, [r3, #24]
      break;
 8002b88:	e041      	b.n	8002c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fad5 	bl	8003140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0208 	orr.w	r2, r2, #8
 8002ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0204 	bic.w	r2, r2, #4
 8002bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69d9      	ldr	r1, [r3, #28]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	61da      	str	r2, [r3, #28]
      break;
 8002bc8:	e021      	b.n	8002c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fb29 	bl	8003228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69da      	ldr	r2, [r3, #28]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69d9      	ldr	r1, [r3, #28]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	021a      	lsls	r2, r3, #8
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	61da      	str	r2, [r3, #28]
      break;
 8002c0a:	e000      	b.n	8002c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002c0c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_TIM_GenerateEvent+0x18>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e014      	b.n	8002c6a <HAL_TIM_GenerateEvent+0x42>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_ConfigClockSource+0x18>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e0a6      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x166>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d067      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x120>
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	d80b      	bhi.n	8002ce2 <HAL_TIM_ConfigClockSource+0x6c>
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d073      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x140>
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	d802      	bhi.n	8002cd8 <HAL_TIM_ConfigClockSource+0x62>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d06f      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002cd6:	e078      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d06c      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x140>
 8002cdc:	2b30      	cmp	r3, #48	; 0x30
 8002cde:	d06a      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002ce0:	e073      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ce2:	2b70      	cmp	r3, #112	; 0x70
 8002ce4:	d00d      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x8c>
 8002ce6:	2b70      	cmp	r3, #112	; 0x70
 8002ce8:	d804      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x7e>
 8002cea:	2b50      	cmp	r3, #80	; 0x50
 8002cec:	d033      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0xe0>
 8002cee:	2b60      	cmp	r3, #96	; 0x60
 8002cf0:	d041      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002cf2:	e06a      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf8:	d066      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0x152>
 8002cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfe:	d017      	beq.n	8002d30 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002d00:	e063      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f000 fb59 	bl	80033c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	609a      	str	r2, [r3, #8]
      break;
 8002d2e:	e04c      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	6899      	ldr	r1, [r3, #8]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f000 fb42 	bl	80033c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d52:	609a      	str	r2, [r3, #8]
      break;
 8002d54:	e039      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 fab6 	bl	80032d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2150      	movs	r1, #80	; 0x50
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fb0f 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8002d74:	e029      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f000 fad5 	bl	8003332 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2160      	movs	r1, #96	; 0x60
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 faff 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8002d94:	e019      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f000 fa96 	bl	80032d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2140      	movs	r1, #64	; 0x40
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 faef 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8002db4:	e009      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	f000 fae6 	bl	8003392 <TIM_ITRx_SetConfig>
      break;
 8002dc6:	e000      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002dc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a40      	ldr	r2, [pc, #256]	; (8002f48 <TIM_Base_SetConfig+0x114>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d013      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e52:	d00f      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a3d      	ldr	r2, [pc, #244]	; (8002f4c <TIM_Base_SetConfig+0x118>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00b      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a3c      	ldr	r2, [pc, #240]	; (8002f50 <TIM_Base_SetConfig+0x11c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3b      	ldr	r2, [pc, #236]	; (8002f54 <TIM_Base_SetConfig+0x120>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3a      	ldr	r2, [pc, #232]	; (8002f58 <TIM_Base_SetConfig+0x124>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d108      	bne.n	8002e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a2f      	ldr	r2, [pc, #188]	; (8002f48 <TIM_Base_SetConfig+0x114>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d02b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e94:	d027      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <TIM_Base_SetConfig+0x118>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d023      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a2b      	ldr	r2, [pc, #172]	; (8002f50 <TIM_Base_SetConfig+0x11c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01f      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <TIM_Base_SetConfig+0x120>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a29      	ldr	r2, [pc, #164]	; (8002f58 <TIM_Base_SetConfig+0x124>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d017      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a28      	ldr	r2, [pc, #160]	; (8002f5c <TIM_Base_SetConfig+0x128>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <TIM_Base_SetConfig+0x12c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00f      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <TIM_Base_SetConfig+0x130>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <TIM_Base_SetConfig+0x134>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a24      	ldr	r2, [pc, #144]	; (8002f6c <TIM_Base_SetConfig+0x138>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <TIM_Base_SetConfig+0x13c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <TIM_Base_SetConfig+0x114>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_Base_SetConfig+0xf8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <TIM_Base_SetConfig+0x124>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d103      	bne.n	8002f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	615a      	str	r2, [r3, #20]
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40014800 	.word	0x40014800
 8002f68:	40001800 	.word	0x40001800
 8002f6c:	40001c00 	.word	0x40001c00
 8002f70:	40002000 	.word	0x40002000

08002f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f023 0201 	bic.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f023 0302 	bic.w	r3, r3, #2
 8002fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a20      	ldr	r2, [pc, #128]	; (800304c <TIM_OC1_SetConfig+0xd8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <TIM_OC1_SetConfig+0x64>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <TIM_OC1_SetConfig+0xdc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10c      	bne.n	8002ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f023 0308 	bic.w	r3, r3, #8
 8002fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a15      	ldr	r2, [pc, #84]	; (800304c <TIM_OC1_SetConfig+0xd8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d003      	beq.n	8003002 <TIM_OC1_SetConfig+0x8e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <TIM_OC1_SetConfig+0xdc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d111      	bne.n	8003026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	621a      	str	r2, [r3, #32]
}
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40010000 	.word	0x40010000
 8003050:	40010400 	.word	0x40010400

08003054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0210 	bic.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0320 	bic.w	r3, r3, #32
 800309e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a22      	ldr	r2, [pc, #136]	; (8003138 <TIM_OC2_SetConfig+0xe4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d003      	beq.n	80030bc <TIM_OC2_SetConfig+0x68>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a21      	ldr	r2, [pc, #132]	; (800313c <TIM_OC2_SetConfig+0xe8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d10d      	bne.n	80030d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a17      	ldr	r2, [pc, #92]	; (8003138 <TIM_OC2_SetConfig+0xe4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_OC2_SetConfig+0x94>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a16      	ldr	r2, [pc, #88]	; (800313c <TIM_OC2_SetConfig+0xe8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d113      	bne.n	8003110 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40010400 	.word	0x40010400

08003140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a21      	ldr	r2, [pc, #132]	; (8003220 <TIM_OC3_SetConfig+0xe0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <TIM_OC3_SetConfig+0x66>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a20      	ldr	r2, [pc, #128]	; (8003224 <TIM_OC3_SetConfig+0xe4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d10d      	bne.n	80031c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a16      	ldr	r2, [pc, #88]	; (8003220 <TIM_OC3_SetConfig+0xe0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_OC3_SetConfig+0x92>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a15      	ldr	r2, [pc, #84]	; (8003224 <TIM_OC3_SetConfig+0xe4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d113      	bne.n	80031fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	621a      	str	r2, [r3, #32]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40010000 	.word	0x40010000
 8003224:	40010400 	.word	0x40010400

08003228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800325e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	031b      	lsls	r3, r3, #12
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a12      	ldr	r2, [pc, #72]	; (80032cc <TIM_OC4_SetConfig+0xa4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_OC4_SetConfig+0x68>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <TIM_OC4_SetConfig+0xa8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d109      	bne.n	80032a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	019b      	lsls	r3, r3, #6
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	621a      	str	r2, [r3, #32]
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40010400 	.word	0x40010400

080032d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f023 0201 	bic.w	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 030a 	bic.w	r3, r3, #10
 8003310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	621a      	str	r2, [r3, #32]
}
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003332:	b480      	push	{r7}
 8003334:	b087      	sub	sp, #28
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f023 0210 	bic.w	r2, r3, #16
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800335c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	031b      	lsls	r3, r3, #12
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800336e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f043 0307 	orr.w	r3, r3, #7
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	609a      	str	r2, [r3, #8]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	021a      	lsls	r2, r3, #8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	609a      	str	r2, [r3, #8]
}
 80033fc:	bf00      	nop
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	2201      	movs	r2, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a1a      	ldr	r2, [r3, #32]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	43db      	mvns	r3, r3
 800342a:	401a      	ands	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a1a      	ldr	r2, [r3, #32]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	fa01 f303 	lsl.w	r3, r1, r3
 8003440:	431a      	orrs	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	621a      	str	r2, [r3, #32]
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e03f      	b.n	800350c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d106      	bne.n	80034a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f837 	bl	8003514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2224      	movs	r2, #36	; 0x24
 80034aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fbd8 	bl	8003c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b20      	cmp	r3, #32
 8003546:	f040 8083 	bne.w	8003650 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_UART_Transmit+0x2e>
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e07b      	b.n	8003652 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_UART_Transmit+0x40>
 8003564:	2302      	movs	r3, #2
 8003566:	e074      	b.n	8003652 <HAL_UART_Transmit+0x12a>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2221      	movs	r2, #33	; 0x21
 800357a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800357e:	f7fd fc55 	bl	8000e2c <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003590:	e042      	b.n	8003618 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a8:	d122      	bne.n	80035f0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2200      	movs	r2, #0
 80035b2:	2180      	movs	r1, #128	; 0x80
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f9f1 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e046      	b.n	8003652 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035d6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d103      	bne.n	80035e8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	3302      	adds	r3, #2
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	e017      	b.n	8003618 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3301      	adds	r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	e013      	b.n	8003618 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2200      	movs	r2, #0
 80035f8:	2180      	movs	r1, #128	; 0x80
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f9ce 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e023      	b.n	8003652 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	60ba      	str	r2, [r7, #8]
 8003610:	781a      	ldrb	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1b7      	bne.n	8003592 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2200      	movs	r2, #0
 800362a:	2140      	movs	r1, #64	; 0x40
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f9b5 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e00a      	b.n	8003652 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	e000      	b.n	8003652 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800365a:	b480      	push	{r7}
 800365c:	b085      	sub	sp, #20
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	4613      	mov	r3, r2
 8003666:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b20      	cmp	r3, #32
 8003672:	d130      	bne.n	80036d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_UART_Transmit_IT+0x26>
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e029      	b.n	80036d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_UART_Transmit_IT+0x38>
 800368e:	2302      	movs	r3, #2
 8003690:	e022      	b.n	80036d8 <HAL_UART_Transmit_IT+0x7e>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	88fa      	ldrh	r2, [r7, #6]
 80036a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	88fa      	ldrh	r2, [r7, #6]
 80036aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2221      	movs	r2, #33	; 0x21
 80036b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e000      	b.n	80036d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
  }
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d140      	bne.n	8003780 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_UART_Receive_IT+0x26>
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e039      	b.n	8003782 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_UART_Receive_IT+0x38>
 8003718:	2302      	movs	r3, #2
 800371a:	e032      	b.n	8003782 <HAL_UART_Receive_IT+0x9e>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	88fa      	ldrh	r2, [r7, #6]
 800372e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2222      	movs	r2, #34	; 0x22
 8003740:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800375a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0220 	orr.w	r2, r2, #32
 800377a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e000      	b.n	8003782 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10d      	bne.n	80037e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_UART_IRQHandler+0x52>
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f9c8 	bl	8003b70 <UART_Receive_IT>
      return;
 80037e0:	e0cc      	b.n	800397c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80ab 	beq.w	8003940 <HAL_UART_IRQHandler+0x1b0>
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d105      	bne.n	8003800 <HAL_UART_IRQHandler+0x70>
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80a0 	beq.w	8003940 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_UART_IRQHandler+0x90>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_UART_IRQHandler+0xb0>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	f043 0202 	orr.w	r2, r3, #2
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_UART_IRQHandler+0xd0>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	f043 0204 	orr.w	r2, r3, #4
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_UART_IRQHandler+0xf0>
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	f043 0208 	orr.w	r2, r3, #8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d078      	beq.n	800397a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <HAL_UART_IRQHandler+0x112>
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f967 	bl	8003b70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <HAL_UART_IRQHandler+0x13a>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d031      	beq.n	800392e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8b0 	bl	8003a30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d123      	bne.n	8003926 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d013      	beq.n	800391e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fa:	4a22      	ldr	r2, [pc, #136]	; (8003984 <HAL_UART_IRQHandler+0x1f4>)
 80038fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003902:	4618      	mov	r0, r3
 8003904:	f7fd fbbc 	bl	8001080 <HAL_DMA_Abort_IT>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d016      	beq.n	800393c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003918:	4610      	mov	r0, r2
 800391a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391c:	e00e      	b.n	800393c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f832 	bl	8003988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003924:	e00a      	b.n	800393c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f82e 	bl	8003988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392c:	e006      	b.n	800393c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f82a 	bl	8003988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800393a:	e01e      	b.n	800397a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393c:	bf00      	nop
    return;
 800393e:	e01c      	b.n	800397a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_UART_IRQHandler+0x1cc>
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f89d 	bl	8003a94 <UART_Transmit_IT>
    return;
 800395a:	e00f      	b.n	800397c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <HAL_UART_IRQHandler+0x1ec>
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f8e5 	bl	8003b40 <UART_EndTransmit_IT>
    return;
 8003976:	bf00      	nop
 8003978:	e000      	b.n	800397c <HAL_UART_IRQHandler+0x1ec>
    return;
 800397a:	bf00      	nop
  }
}
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	08003a6d 	.word	0x08003a6d

08003988 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ac:	e02c      	b.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d028      	beq.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <UART_WaitOnFlagUntilTimeout+0x30>
 80039bc:	f7fd fa36 	bl	8000e2c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d21d      	bcs.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e00f      	b.n	8003a28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	4013      	ands	r3, r2
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d0c3      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a46:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f7ff ff7e 	bl	8003988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b21      	cmp	r3, #33	; 0x21
 8003aa6:	d144      	bne.n	8003b32 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab0:	d11a      	bne.n	8003ae8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	1c9a      	adds	r2, r3, #2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]
 8003ada:	e00e      	b.n	8003afa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	621a      	str	r2, [r3, #32]
 8003ae6:	e008      	b.n	8003afa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	1c59      	adds	r1, r3, #1
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6211      	str	r1, [r2, #32]
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4619      	mov	r1, r3
 8003b08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10f      	bne.n	8003b2e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e000      	b.n	8003b34 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
  }
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fe31 	bl	80047c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b22      	cmp	r3, #34	; 0x22
 8003b82:	d171      	bne.n	8003c68 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8c:	d123      	bne.n	8003bd6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10e      	bne.n	8003bba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	1c9a      	adds	r2, r3, #2
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8003bb8:	e029      	b.n	8003c0e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bd4:	e01b      	b.n	8003c0e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6858      	ldr	r0, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	1c59      	adds	r1, r3, #1
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6291      	str	r1, [r2, #40]	; 0x28
 8003bee:	b2c2      	uxtb	r2, r0
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	e00c      	b.n	8003c0e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	1c58      	adds	r0, r3, #1
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	6288      	str	r0, [r1, #40]	; 0x28
 8003c06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d120      	bne.n	8003c64 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0220 	bic.w	r2, r2, #32
 8003c30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0201 	bic.w	r2, r2, #1
 8003c50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fd9c 	bl	8004798 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	e002      	b.n	8003c6a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c74:	b5b0      	push	{r4, r5, r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003cb4:	f023 030c 	bic.w	r3, r3, #12
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	68f9      	ldr	r1, [r7, #12]
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce0:	f040 80e4 	bne.w	8003eac <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4aab      	ldr	r2, [pc, #684]	; (8003f98 <UART_SetConfig+0x324>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <UART_SetConfig+0x84>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4aaa      	ldr	r2, [pc, #680]	; (8003f9c <UART_SetConfig+0x328>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d16c      	bne.n	8003dd2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003cf8:	f7fe fd1c 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	009a      	lsls	r2, r3, #2
 8003d06:	441a      	add	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	4aa3      	ldr	r2, [pc, #652]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	011c      	lsls	r4, r3, #4
 8003d1c:	f7fe fd0a 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	009a      	lsls	r2, r3, #2
 8003d2a:	441a      	add	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	fbb2 f5f3 	udiv	r5, r2, r3
 8003d36:	f7fe fcfd 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	009a      	lsls	r2, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	4a93      	ldr	r2, [pc, #588]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2264      	movs	r2, #100	; 0x64
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	1aeb      	subs	r3, r5, r3
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	3332      	adds	r3, #50	; 0x32
 8003d64:	4a8e      	ldr	r2, [pc, #568]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d72:	441c      	add	r4, r3
 8003d74:	f7fe fcde 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	009a      	lsls	r2, r3, #2
 8003d82:	441a      	add	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	fbb2 f5f3 	udiv	r5, r2, r3
 8003d8e:	f7fe fcd1 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009a      	lsls	r2, r3, #2
 8003d9c:	441a      	add	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	4a7d      	ldr	r2, [pc, #500]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2264      	movs	r2, #100	; 0x64
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	1aeb      	subs	r3, r5, r3
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	3332      	adds	r3, #50	; 0x32
 8003dbc:	4a78      	ldr	r2, [pc, #480]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	f003 0207 	and.w	r2, r3, #7
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4422      	add	r2, r4
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	e154      	b.n	800407c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003dd2:	f7fe fc9b 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009a      	lsls	r2, r3, #2
 8003de0:	441a      	add	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	4a6c      	ldr	r2, [pc, #432]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	011c      	lsls	r4, r3, #4
 8003df6:	f7fe fc89 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009a      	lsls	r2, r3, #2
 8003e04:	441a      	add	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003e10:	f7fe fc7c 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003e14:	4602      	mov	r2, r0
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009a      	lsls	r2, r3, #2
 8003e1e:	441a      	add	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	4a5d      	ldr	r2, [pc, #372]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	2264      	movs	r2, #100	; 0x64
 8003e34:	fb02 f303 	mul.w	r3, r2, r3
 8003e38:	1aeb      	subs	r3, r5, r3
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	3332      	adds	r3, #50	; 0x32
 8003e3e:	4a58      	ldr	r2, [pc, #352]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e4c:	441c      	add	r4, r3
 8003e4e:	f7fe fc5d 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003e52:	4602      	mov	r2, r0
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009a      	lsls	r2, r3, #2
 8003e5c:	441a      	add	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fbb2 f5f3 	udiv	r5, r2, r3
 8003e68:	f7fe fc50 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	009a      	lsls	r2, r3, #2
 8003e76:	441a      	add	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e82:	4a47      	ldr	r2, [pc, #284]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003e84:	fba2 2303 	umull	r2, r3, r2, r3
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	2264      	movs	r2, #100	; 0x64
 8003e8c:	fb02 f303 	mul.w	r3, r2, r3
 8003e90:	1aeb      	subs	r3, r5, r3
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	3332      	adds	r3, #50	; 0x32
 8003e96:	4a42      	ldr	r2, [pc, #264]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	f003 0207 	and.w	r2, r3, #7
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4422      	add	r2, r4
 8003ea8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003eaa:	e0e7      	b.n	800407c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a39      	ldr	r2, [pc, #228]	; (8003f98 <UART_SetConfig+0x324>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <UART_SetConfig+0x24c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a38      	ldr	r2, [pc, #224]	; (8003f9c <UART_SetConfig+0x328>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d171      	bne.n	8003fa4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003ec0:	f7fe fc38 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	009a      	lsls	r2, r3, #2
 8003ece:	441a      	add	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	4a31      	ldr	r2, [pc, #196]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	011c      	lsls	r4, r3, #4
 8003ee4:	f7fe fc26 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	009a      	lsls	r2, r3, #2
 8003ef2:	441a      	add	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	fbb2 f5f3 	udiv	r5, r2, r3
 8003efe:	f7fe fc19 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8003f02:	4602      	mov	r2, r0
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	009a      	lsls	r2, r3, #2
 8003f0c:	441a      	add	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	4a21      	ldr	r2, [pc, #132]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	2264      	movs	r2, #100	; 0x64
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	1aeb      	subs	r3, r5, r3
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	3332      	adds	r3, #50	; 0x32
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f38:	441c      	add	r4, r3
 8003f3a:	f7fe fbfb 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	009a      	lsls	r2, r3, #2
 8003f48:	441a      	add	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f54:	f7fe fbee 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009a      	lsls	r2, r3, #2
 8003f62:	441a      	add	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	2264      	movs	r2, #100	; 0x64
 8003f78:	fb02 f303 	mul.w	r3, r2, r3
 8003f7c:	1aeb      	subs	r3, r5, r3
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	3332      	adds	r3, #50	; 0x32
 8003f82:	4a07      	ldr	r2, [pc, #28]	; (8003fa0 <UART_SetConfig+0x32c>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	f003 020f 	and.w	r2, r3, #15
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4422      	add	r2, r4
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	e071      	b.n	800407c <UART_SetConfig+0x408>
 8003f98:	40011000 	.word	0x40011000
 8003f9c:	40011400 	.word	0x40011400
 8003fa0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003fa4:	f7fe fbb2 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	009a      	lsls	r2, r3, #2
 8003fb2:	441a      	add	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbe:	4a31      	ldr	r2, [pc, #196]	; (8004084 <UART_SetConfig+0x410>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	011c      	lsls	r4, r3, #4
 8003fc8:	f7fe fba0 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009a      	lsls	r2, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	fbb2 f5f3 	udiv	r5, r2, r3
 8003fe2:	f7fe fb93 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009a      	lsls	r2, r3, #2
 8003ff0:	441a      	add	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	4a21      	ldr	r2, [pc, #132]	; (8004084 <UART_SetConfig+0x410>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	2264      	movs	r2, #100	; 0x64
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	1aeb      	subs	r3, r5, r3
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	3332      	adds	r3, #50	; 0x32
 8004010:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <UART_SetConfig+0x410>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800401c:	441c      	add	r4, r3
 800401e:	f7fe fb75 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8004022:	4602      	mov	r2, r0
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	009a      	lsls	r2, r3, #2
 800402c:	441a      	add	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	fbb2 f5f3 	udiv	r5, r2, r3
 8004038:	f7fe fb68 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 800403c:	4602      	mov	r2, r0
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009a      	lsls	r2, r3, #2
 8004046:	441a      	add	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	4a0c      	ldr	r2, [pc, #48]	; (8004084 <UART_SetConfig+0x410>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	2264      	movs	r2, #100	; 0x64
 800405c:	fb02 f303 	mul.w	r3, r2, r3
 8004060:	1aeb      	subs	r3, r5, r3
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	3332      	adds	r3, #50	; 0x32
 8004066:	4a07      	ldr	r2, [pc, #28]	; (8004084 <UART_SetConfig+0x410>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	f003 020f 	and.w	r2, r3, #15
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4422      	add	r2, r4
 8004078:	609a      	str	r2, [r3, #8]
}
 800407a:	e7ff      	b.n	800407c <UART_SetConfig+0x408>
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bdb0      	pop	{r4, r5, r7, pc}
 8004084:	51eb851f 	.word	0x51eb851f

08004088 <Error_handler>:

extern duty_H1;
extern duty_H2;

void Error_handler(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
	while(1);
 800408c:	e7fe      	b.n	800408c <Error_handler+0x4>
	...

08004090 <GPIO_Init>:
void receive_string(uint8_t* x){
	HAL_UART_Receive(&uart2, x, sizeof(*x), 1000);
}

void GPIO_Init()
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	4b5f      	ldr	r3, [pc, #380]	; (8004218 <GPIO_Init+0x188>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	4a5e      	ldr	r2, [pc, #376]	; (8004218 <GPIO_Init+0x188>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6313      	str	r3, [r2, #48]	; 0x30
 80040a6:	4b5c      	ldr	r3, [pc, #368]	; (8004218 <GPIO_Init+0x188>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	4b58      	ldr	r3, [pc, #352]	; (8004218 <GPIO_Init+0x188>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4a57      	ldr	r2, [pc, #348]	; (8004218 <GPIO_Init+0x188>)
 80040bc:	f043 0302 	orr.w	r3, r3, #2
 80040c0:	6313      	str	r3, [r2, #48]	; 0x30
 80040c2:	4b55      	ldr	r3, [pc, #340]	; (8004218 <GPIO_Init+0x188>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	4b51      	ldr	r3, [pc, #324]	; (8004218 <GPIO_Init+0x188>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	4a50      	ldr	r2, [pc, #320]	; (8004218 <GPIO_Init+0x188>)
 80040d8:	f043 0308 	orr.w	r3, r3, #8
 80040dc:	6313      	str	r3, [r2, #48]	; 0x30
 80040de:	4b4e      	ldr	r3, [pc, #312]	; (8004218 <GPIO_Init+0x188>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_USART2_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	4b4a      	ldr	r3, [pc, #296]	; (8004218 <GPIO_Init+0x188>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	4a49      	ldr	r2, [pc, #292]	; (8004218 <GPIO_Init+0x188>)
 80040f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f8:	6413      	str	r3, [r2, #64]	; 0x40
 80040fa:	4b47      	ldr	r3, [pc, #284]	; (8004218 <GPIO_Init+0x188>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	4b43      	ldr	r3, [pc, #268]	; (8004218 <GPIO_Init+0x188>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	4a42      	ldr	r2, [pc, #264]	; (8004218 <GPIO_Init+0x188>)
 8004110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004114:	6413      	str	r3, [r2, #64]	; 0x40
 8004116:	4b40      	ldr	r3, [pc, #256]	; (8004218 <GPIO_Init+0x188>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	4b3c      	ldr	r3, [pc, #240]	; (8004218 <GPIO_Init+0x188>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	4a3b      	ldr	r2, [pc, #236]	; (8004218 <GPIO_Init+0x188>)
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	6413      	str	r3, [r2, #64]	; 0x40
 8004132:	4b39      	ldr	r3, [pc, #228]	; (8004218 <GPIO_Init+0x188>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_TIM4_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	4b35      	ldr	r3, [pc, #212]	; (8004218 <GPIO_Init+0x188>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	4a34      	ldr	r2, [pc, #208]	; (8004218 <GPIO_Init+0x188>)
 8004148:	f043 0304 	orr.w	r3, r3, #4
 800414c:	6413      	str	r3, [r2, #64]	; 0x40
 800414e:	4b32      	ldr	r3, [pc, #200]	; (8004218 <GPIO_Init+0x188>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800415a:	2003      	movs	r0, #3
 800415c:	f7fc ff42 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>



	 gpio.Pin = GPIO_PIN_2;
 8004160:	4b2e      	ldr	r3, [pc, #184]	; (800421c <GPIO_Init+0x18c>)
 8004162:	2204      	movs	r2, #4
 8004164:	601a      	str	r2, [r3, #0]
	 gpio.Mode =GPIO_MODE_AF_PP;
 8004166:	4b2d      	ldr	r3, [pc, #180]	; (800421c <GPIO_Init+0x18c>)
 8004168:	2202      	movs	r2, #2
 800416a:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_PULLUP;
 800416c:	4b2b      	ldr	r3, [pc, #172]	; (800421c <GPIO_Init+0x18c>)
 800416e:	2201      	movs	r2, #1
 8004170:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8004172:	4b2a      	ldr	r3, [pc, #168]	; (800421c <GPIO_Init+0x18c>)
 8004174:	2200      	movs	r2, #0
 8004176:	60da      	str	r2, [r3, #12]
	 gpio.Alternate =  GPIO_AF7_USART2; //TX
 8004178:	4b28      	ldr	r3, [pc, #160]	; (800421c <GPIO_Init+0x18c>)
 800417a:	2207      	movs	r2, #7
 800417c:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOA,&gpio);
 800417e:	4927      	ldr	r1, [pc, #156]	; (800421c <GPIO_Init+0x18c>)
 8004180:	4827      	ldr	r0, [pc, #156]	; (8004220 <GPIO_Init+0x190>)
 8004182:	f7fc ff9f 	bl	80010c4 <HAL_GPIO_Init>

	 gpio.Pin = GPIO_PIN_3; //RX
 8004186:	4b25      	ldr	r3, [pc, #148]	; (800421c <GPIO_Init+0x18c>)
 8004188:	2208      	movs	r2, #8
 800418a:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_OD;
 800418c:	4b23      	ldr	r3, [pc, #140]	; (800421c <GPIO_Init+0x18c>)
 800418e:	2212      	movs	r2, #18
 8004190:	605a      	str	r2, [r3, #4]
	 HAL_GPIO_Init(GPIOA,&gpio);
 8004192:	4922      	ldr	r1, [pc, #136]	; (800421c <GPIO_Init+0x18c>)
 8004194:	4822      	ldr	r0, [pc, #136]	; (8004220 <GPIO_Init+0x190>)
 8004196:	f7fc ff95 	bl	80010c4 <HAL_GPIO_Init>

	 gpio.Pin = GPIO_PIN_8 |GPIO_PIN_9;
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <GPIO_Init+0x18c>)
 800419c:	f44f 7240 	mov.w	r2, #768	; 0x300
 80041a0:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_OD;
 80041a2:	4b1e      	ldr	r3, [pc, #120]	; (800421c <GPIO_Init+0x18c>)
 80041a4:	2212      	movs	r2, #18
 80041a6:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_PULLUP;
 80041a8:	4b1c      	ldr	r3, [pc, #112]	; (800421c <GPIO_Init+0x18c>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80041ae:	4b1b      	ldr	r3, [pc, #108]	; (800421c <GPIO_Init+0x18c>)
 80041b0:	2202      	movs	r2, #2
 80041b2:	60da      	str	r2, [r3, #12]
	 gpio.Alternate = GPIO_AF4_I2C1;
 80041b4:	4b19      	ldr	r3, [pc, #100]	; (800421c <GPIO_Init+0x18c>)
 80041b6:	2204      	movs	r2, #4
 80041b8:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOB, &gpio);
 80041ba:	4918      	ldr	r1, [pc, #96]	; (800421c <GPIO_Init+0x18c>)
 80041bc:	4819      	ldr	r0, [pc, #100]	; (8004224 <GPIO_Init+0x194>)
 80041be:	f7fc ff81 	bl	80010c4 <HAL_GPIO_Init>

	 	 //TIM2
	 gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80041c2:	4b16      	ldr	r3, [pc, #88]	; (800421c <GPIO_Init+0x18c>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	605a      	str	r2, [r3, #4]
	 gpio.Pin = GPIO_PIN_5;
 80041c8:	4b14      	ldr	r3, [pc, #80]	; (800421c <GPIO_Init+0x18c>)
 80041ca:	2220      	movs	r2, #32
 80041cc:	601a      	str	r2, [r3, #0]
	 gpio.Pull = GPIO_NOPULL;
 80041ce:	4b13      	ldr	r3, [pc, #76]	; (800421c <GPIO_Init+0x18c>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80041d4:	4b11      	ldr	r3, [pc, #68]	; (800421c <GPIO_Init+0x18c>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	60da      	str	r2, [r3, #12]
	 gpio.Alternate = GPIO_AF1_TIM1;
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <GPIO_Init+0x18c>)
 80041dc:	2201      	movs	r2, #1
 80041de:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOA, &gpio);
 80041e0:	490e      	ldr	r1, [pc, #56]	; (800421c <GPIO_Init+0x18c>)
 80041e2:	480f      	ldr	r0, [pc, #60]	; (8004220 <GPIO_Init+0x190>)
 80041e4:	f7fc ff6e 	bl	80010c4 <HAL_GPIO_Init>

//	 	 //TIM4
	 gpio.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <GPIO_Init+0x18c>)
 80041ea:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80041ee:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_PP;
 80041f0:	4b0a      	ldr	r3, [pc, #40]	; (800421c <GPIO_Init+0x18c>)
 80041f2:	2202      	movs	r2, #2
 80041f4:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_NOPULL;
 80041f6:	4b09      	ldr	r3, [pc, #36]	; (800421c <GPIO_Init+0x18c>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <GPIO_Init+0x18c>)
 80041fe:	2202      	movs	r2, #2
 8004200:	60da      	str	r2, [r3, #12]
	 gpio.Alternate = GPIO_AF2_TIM4;
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <GPIO_Init+0x18c>)
 8004204:	2202      	movs	r2, #2
 8004206:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOD, &gpio);
 8004208:	4904      	ldr	r1, [pc, #16]	; (800421c <GPIO_Init+0x18c>)
 800420a:	4807      	ldr	r0, [pc, #28]	; (8004228 <GPIO_Init+0x198>)
 800420c:	f7fc ff5a 	bl	80010c4 <HAL_GPIO_Init>

}
 8004210:	bf00      	nop
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40023800 	.word	0x40023800
 800421c:	20000600 	.word	0x20000600
 8004220:	40020000 	.word	0x40020000
 8004224:	40020400 	.word	0x40020400
 8004228:	40020c00 	.word	0x40020c00

0800422c <UART2_Init>:

void UART2_Init()
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
	uart2.Instance = USART2;
 8004230:	4b13      	ldr	r3, [pc, #76]	; (8004280 <UART2_Init+0x54>)
 8004232:	4a14      	ldr	r2, [pc, #80]	; (8004284 <UART2_Init+0x58>)
 8004234:	601a      	str	r2, [r3, #0]
	uart2.Init.BaudRate = 115200;
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <UART2_Init+0x54>)
 8004238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800423c:	605a      	str	r2, [r3, #4]
	uart2.Init.WordLength = UART_WORDLENGTH_8B;
 800423e:	4b10      	ldr	r3, [pc, #64]	; (8004280 <UART2_Init+0x54>)
 8004240:	2200      	movs	r2, #0
 8004242:	609a      	str	r2, [r3, #8]
	uart2.Init.StopBits = UART_STOPBITS_1;
 8004244:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <UART2_Init+0x54>)
 8004246:	2200      	movs	r2, #0
 8004248:	60da      	str	r2, [r3, #12]
	uart2.Init.Parity = UART_PARITY_NONE;
 800424a:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <UART2_Init+0x54>)
 800424c:	2200      	movs	r2, #0
 800424e:	611a      	str	r2, [r3, #16]
	uart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <UART2_Init+0x54>)
 8004252:	2200      	movs	r2, #0
 8004254:	619a      	str	r2, [r3, #24]
	uart2.Init.Mode = UART_MODE_TX_RX;
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <UART2_Init+0x54>)
 8004258:	220c      	movs	r2, #12
 800425a:	615a      	str	r2, [r3, #20]
	 if ( HAL_UART_Init(&uart2) != HAL_OK )
 800425c:	4808      	ldr	r0, [pc, #32]	; (8004280 <UART2_Init+0x54>)
 800425e:	f7ff f90c 	bl	800347a <HAL_UART_Init>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <UART2_Init+0x40>
	 {
	 	Error_handler();
 8004268:	f7ff ff0e 	bl	8004088 <Error_handler>
	 }

	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 800426c:	2026      	movs	r0, #38	; 0x26
 800426e:	f7fc fee0 	bl	8001032 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004272:	2200      	movs	r2, #0
 8004274:	2101      	movs	r1, #1
 8004276:	2026      	movs	r0, #38	; 0x26
 8004278:	f7fc febf 	bl	8000ffa <HAL_NVIC_SetPriority>
}
 800427c:	bf00      	nop
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000580 	.word	0x20000580
 8004284:	40004400 	.word	0x40004400

08004288 <I2C1_Init>:

void I2C1_Init()
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 800428c:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <I2C1_Init+0x50>)
 800428e:	4a13      	ldr	r2, [pc, #76]	; (80042dc <I2C1_Init+0x54>)
 8004290:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <I2C1_Init+0x50>)
 8004294:	4a12      	ldr	r2, [pc, #72]	; (80042e0 <I2C1_Init+0x58>)
 8004296:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004298:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <I2C1_Init+0x50>)
 800429a:	2200      	movs	r2, #0
 800429c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800429e:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <I2C1_Init+0x50>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <I2C1_Init+0x50>)
 80042a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042aa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <I2C1_Init+0x50>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80042b2:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <I2C1_Init+0x50>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <I2C1_Init+0x50>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042be:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <I2C1_Init+0x50>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042c4:	4804      	ldr	r0, [pc, #16]	; (80042d8 <I2C1_Init+0x50>)
 80042c6:	f7fd f8c9 	bl	800145c <HAL_I2C_Init>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <I2C1_Init+0x4c>
	  {
	    Error_handler();
 80042d0:	f7ff feda 	bl	8004088 <Error_handler>

	  }
}
 80042d4:	bf00      	nop
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000528 	.word	0x20000528
 80042dc:	40005400 	.word	0x40005400
 80042e0:	000186a0 	.word	0x000186a0

080042e4 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 80042e8:	4802      	ldr	r0, [pc, #8]	; (80042f4 <TIM2_IRQHandler+0x10>)
 80042ea:	f7fe facf 	bl	800288c <HAL_TIM_IRQHandler>
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200005c0 	.word	0x200005c0

080042f8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 80042fc:	4802      	ldr	r0, [pc, #8]	; (8004308 <TIM4_IRQHandler+0x10>)
 80042fe:	f7fe fac5 	bl	800288c <HAL_TIM_IRQHandler>
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200004e8 	.word	0x200004e8

0800430c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&uart2);
 8004310:	4802      	ldr	r0, [pc, #8]	; (800431c <USART2_IRQHandler+0x10>)
 8004312:	f7ff fa3d 	bl	8003790 <HAL_UART_IRQHandler>

}
 8004316:	bf00      	nop
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000580 	.word	0x20000580

08004320 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET)
 8004328:	2120      	movs	r1, #32
 800432a:	4812      	ldr	r0, [pc, #72]	; (8004374 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800432c:	f7fd f864 	bl	80013f8 <HAL_GPIO_ReadPin>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d105      	bne.n	8004342 <HAL_TIM_PeriodElapsedCallback+0x22>
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8004336:	2201      	movs	r2, #1
 8004338:	2120      	movs	r1, #32
 800433a:	480e      	ldr	r0, [pc, #56]	; (8004374 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800433c:	f7fd f874 	bl	8001428 <HAL_GPIO_WritePin>
 8004340:	e004      	b.n	800434c <HAL_TIM_PeriodElapsedCallback+0x2c>
 else
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8004342:	2200      	movs	r2, #0
 8004344:	2120      	movs	r1, #32
 8004346:	480b      	ldr	r0, [pc, #44]	; (8004374 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004348:	f7fd f86e 	bl	8001428 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, duty_H1);
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_H1);
 8004356:	4b08      	ldr	r3, [pc, #32]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b08      	ldr	r3, [pc, #32]	; (800437c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, duty_H1);
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40

}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40020000 	.word	0x40020000
 8004378:	20000024 	.word	0x20000024
 800437c:	200004e8 	.word	0x200004e8

08004380 <TIM2_Init>:

void TIM2_Init()
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
	htim2.Instance = TIM2;
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <TIM2_Init+0x4c>)
 8004386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800438a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 10000-1;
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <TIM2_Init+0x4c>)
 800438e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004392:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004394:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <TIM2_Init+0x4c>)
 8004396:	2200      	movs	r2, #0
 8004398:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 800439a:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <TIM2_Init+0x4c>)
 800439c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043a0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043a2:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <TIM2_Init+0x4c>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0;
 80043a8:	4b08      	ldr	r3, [pc, #32]	; (80043cc <TIM2_Init+0x4c>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	615a      	str	r2, [r3, #20]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <TIM2_Init+0x4c>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 80043b4:	4805      	ldr	r0, [pc, #20]	; (80043cc <TIM2_Init+0x4c>)
 80043b6:	f7fe f9d1 	bl	800275c <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 80043ba:	4804      	ldr	r0, [pc, #16]	; (80043cc <TIM2_Init+0x4c>)
 80043bc:	f7fe fa03 	bl	80027c6 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80043c0:	201c      	movs	r0, #28
 80043c2:	f7fc fe36 	bl	8001032 <HAL_NVIC_EnableIRQ>
}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	200005c0 	.word	0x200005c0

080043d0 <TIM4_Init>:

void TIM4_Init()
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08e      	sub	sp, #56	; 0x38
 80043d4:	af00      	add	r7, sp, #0
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	605a      	str	r2, [r3, #4]
 80043e0:	609a      	str	r2, [r3, #8]
 80043e2:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043e4:	f107 0320 	add.w	r3, r7, #32
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80043ee:	1d3b      	adds	r3, r7, #4
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	611a      	str	r2, [r3, #16]
 80043fc:	615a      	str	r2, [r3, #20]
 80043fe:	619a      	str	r2, [r3, #24]

	 htim4.Instance = TIM4;
 8004400:	4b3e      	ldr	r3, [pc, #248]	; (80044fc <TIM4_Init+0x12c>)
 8004402:	4a3f      	ldr	r2, [pc, #252]	; (8004500 <TIM4_Init+0x130>)
 8004404:	601a      	str	r2, [r3, #0]
	 htim4.Init.Period = 1000 - 1;
 8004406:	4b3d      	ldr	r3, [pc, #244]	; (80044fc <TIM4_Init+0x12c>)
 8004408:	f240 32e7 	movw	r2, #999	; 0x3e7
 800440c:	60da      	str	r2, [r3, #12]
	 htim4.Init.Prescaler = 10000 - 1;
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <TIM4_Init+0x12c>)
 8004410:	f242 720f 	movw	r2, #9999	; 0x270f
 8004414:	605a      	str	r2, [r3, #4]
	 htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004416:	4b39      	ldr	r3, [pc, #228]	; (80044fc <TIM4_Init+0x12c>)
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
	 htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800441c:	4b37      	ldr	r3, [pc, #220]	; (80044fc <TIM4_Init+0x12c>)
 800441e:	2200      	movs	r2, #0
 8004420:	609a      	str	r2, [r3, #8]
	 htim4.Init.RepetitionCounter = 0;
 8004422:	4b36      	ldr	r3, [pc, #216]	; (80044fc <TIM4_Init+0x12c>)
 8004424:	2200      	movs	r2, #0
 8004426:	615a      	str	r2, [r3, #20]
	 htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004428:	4b34      	ldr	r3, [pc, #208]	; (80044fc <TIM4_Init+0x12c>)
 800442a:	2280      	movs	r2, #128	; 0x80
 800442c:	619a      	str	r2, [r3, #24]

	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800442e:	4833      	ldr	r0, [pc, #204]	; (80044fc <TIM4_Init+0x12c>)
 8004430:	f7fe f994 	bl	800275c <HAL_TIM_Base_Init>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <TIM4_Init+0x6e>
	  {
	    Error_handler();
 800443a:	f7ff fe25 	bl	8004088 <Error_handler>
	  }
//		HAL_TIM_Base_Start_IT(&htim4);
//		HAL_NVIC_EnableIRQ(TIM4_IRQn);

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800443e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004448:	4619      	mov	r1, r3
 800444a:	482c      	ldr	r0, [pc, #176]	; (80044fc <TIM4_Init+0x12c>)
 800444c:	f7fe fc13 	bl	8002c76 <HAL_TIM_ConfigClockSource>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <TIM4_Init+0x8a>
	  {
	    Error_handler();
 8004456:	f7ff fe17 	bl	8004088 <Error_handler>
	  }

	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800445a:	2360      	movs	r3, #96	; 0x60
 800445c:	607b      	str	r3, [r7, #4]
	 sConfigOC.Pulse = 499;
 800445e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004462:	60bb      	str	r3, [r7, #8]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
	 sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004468:	2304      	movs	r3, #4
 800446a:	617b      	str	r3, [r7, #20]

	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800446c:	1d3b      	adds	r3, r7, #4
 800446e:	2200      	movs	r2, #0
 8004470:	4619      	mov	r1, r3
 8004472:	4822      	ldr	r0, [pc, #136]	; (80044fc <TIM4_Init+0x12c>)
 8004474:	f7fe fb12 	bl	8002a9c <HAL_TIM_PWM_ConfigChannel>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <TIM4_Init+0xb2>
	  {
	    Error_handler();
 800447e:	f7ff fe03 	bl	8004088 <Error_handler>
	  }
	  sConfigOC.Pulse = duty_H1;
 8004482:	4b20      	ldr	r3, [pc, #128]	; (8004504 <TIM4_Init+0x134>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60bb      	str	r3, [r7, #8]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004488:	1d3b      	adds	r3, r7, #4
 800448a:	2204      	movs	r2, #4
 800448c:	4619      	mov	r1, r3
 800448e:	481b      	ldr	r0, [pc, #108]	; (80044fc <TIM4_Init+0x12c>)
 8004490:	f7fe fb04 	bl	8002a9c <HAL_TIM_PWM_ConfigChannel>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <TIM4_Init+0xce>
	  {
	    Error_handler();
 800449a:	f7ff fdf5 	bl	8004088 <Error_handler>
	  }
	  sConfigOC.Pulse = duty_H1;
 800449e:	4b19      	ldr	r3, [pc, #100]	; (8004504 <TIM4_Init+0x134>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60bb      	str	r3, [r7, #8]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80044a4:	1d3b      	adds	r3, r7, #4
 80044a6:	2208      	movs	r2, #8
 80044a8:	4619      	mov	r1, r3
 80044aa:	4814      	ldr	r0, [pc, #80]	; (80044fc <TIM4_Init+0x12c>)
 80044ac:	f7fe faf6 	bl	8002a9c <HAL_TIM_PWM_ConfigChannel>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <TIM4_Init+0xea>
	  {
	    Error_handler();
 80044b6:	f7ff fde7 	bl	8004088 <Error_handler>
	  }
	  sConfigOC.Pulse = 199;
 80044ba:	23c7      	movs	r3, #199	; 0xc7
 80044bc:	60bb      	str	r3, [r7, #8]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80044be:	1d3b      	adds	r3, r7, #4
 80044c0:	220c      	movs	r2, #12
 80044c2:	4619      	mov	r1, r3
 80044c4:	480d      	ldr	r0, [pc, #52]	; (80044fc <TIM4_Init+0x12c>)
 80044c6:	f7fe fae9 	bl	8002a9c <HAL_TIM_PWM_ConfigChannel>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <TIM4_Init+0x104>
	  {
	    Error_handler();
 80044d0:	f7ff fdda 	bl	8004088 <Error_handler>
	  }
	  HAL_NVIC_SetPriority( TIM4_IRQn, 0, 0);
 80044d4:	2200      	movs	r2, #0
 80044d6:	2100      	movs	r1, #0
 80044d8:	201e      	movs	r0, #30
 80044da:	f7fc fd8e 	bl	8000ffa <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ( TIM4_IRQn );
 80044de:	201e      	movs	r0, #30
 80044e0:	f7fc fda7 	bl	8001032 <HAL_NVIC_EnableIRQ>

	  HAL_TIM_GenerateEvent( &htim4, TIM_EVENTSOURCE_UPDATE );
 80044e4:	2101      	movs	r1, #1
 80044e6:	4805      	ldr	r0, [pc, #20]	; (80044fc <TIM4_Init+0x12c>)
 80044e8:	f7fe fb9e 	bl	8002c28 <HAL_TIM_GenerateEvent>
	  HAL_TIM_GenerateEvent( &htim4, TIM_EVENTSOURCE_CC1 );
 80044ec:	2102      	movs	r1, #2
 80044ee:	4803      	ldr	r0, [pc, #12]	; (80044fc <TIM4_Init+0x12c>)
 80044f0:	f7fe fb9a 	bl	8002c28 <HAL_TIM_GenerateEvent>

}
 80044f4:	bf00      	nop
 80044f6:	3738      	adds	r7, #56	; 0x38
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	200004e8 	.word	0x200004e8
 8004500:	40000800 	.word	0x40000800
 8004504:	20000024 	.word	0x20000024

08004508 <main>:
uint8_t m = 0x5A;
uint8_t dataRS = 0x00;
uint8_t multiple = 0x64;

int main(void)
{
 8004508:	b590      	push	{r4, r7, lr}
 800450a:	b09b      	sub	sp, #108	; 0x6c
 800450c:	af00      	add	r7, sp, #0
	char msg[100];

	HAL_Init();
 800450e:	f7fc fc25 	bl	8000d5c <HAL_Init>
	SystemConfigClk();
 8004512:	f000 f8d1 	bl	80046b8 <SystemConfigClk>
	GPIO_Init();
 8004516:	f7ff fdbb 	bl	8004090 <GPIO_Init>
    UART2_Init();
 800451a:	f7ff fe87 	bl	800422c <UART2_Init>
    I2C1_Init();
 800451e:	f7ff feb3 	bl	8004288 <I2C1_Init>
    TIM2_Init();
 8004522:	f7ff ff2d 	bl	8004380 <TIM2_Init>
    TIM4_Init();
 8004526:	f7ff ff53 	bl	80043d0 <TIM4_Init>
    SSD1306_Init();
 800452a:	f000 f965 	bl	80047f8 <SSD1306_Init>

    HAL_TIM_Base_Start_IT(&htim4);
 800452e:	485a      	ldr	r0, [pc, #360]	; (8004698 <main+0x190>)
 8004530:	f7fe f949 	bl	80027c6 <HAL_TIM_Base_Start_IT>

    HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8004534:	2100      	movs	r1, #0
 8004536:	4858      	ldr	r0, [pc, #352]	; (8004698 <main+0x190>)
 8004538:	f7fe f96a 	bl	8002810 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 800453c:	2104      	movs	r1, #4
 800453e:	4856      	ldr	r0, [pc, #344]	; (8004698 <main+0x190>)
 8004540:	f7fe f966 	bl	8002810 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8004544:	2108      	movs	r1, #8
 8004546:	4854      	ldr	r0, [pc, #336]	; (8004698 <main+0x190>)
 8004548:	f7fe f962 	bl	8002810 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 800454c:	210c      	movs	r1, #12
 800454e:	4852      	ldr	r0, [pc, #328]	; (8004698 <main+0x190>)
 8004550:	f7fe f95e 	bl	8002810 <HAL_TIM_PWM_Start>

    memset(msg,0,sizeof(msg));
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	2264      	movs	r2, #100	; 0x64
 8004558:	2100      	movs	r1, #0
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fb8e 	bl	8004c7c <memset>
	sprintf(msg,"SYSCLK : %ldHz\r\n",HAL_RCC_GetSysClockFreq());
 8004560:	f7fd fff0 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	1d3b      	adds	r3, r7, #4
 8004568:	494c      	ldr	r1, [pc, #304]	; (800469c <main+0x194>)
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fb8e 	bl	8004c8c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8004570:	1d3b      	adds	r3, r7, #4
 8004572:	4618      	mov	r0, r3
 8004574:	f7fb fe2c 	bl	80001d0 <strlen>
 8004578:	4603      	mov	r3, r0
 800457a:	b29a      	uxth	r2, r3
 800457c:	1d39      	adds	r1, r7, #4
 800457e:	f04f 33ff 	mov.w	r3, #4294967295
 8004582:	4847      	ldr	r0, [pc, #284]	; (80046a0 <main+0x198>)
 8004584:	f7fe ffd0 	bl	8003528 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	2264      	movs	r2, #100	; 0x64
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fb74 	bl	8004c7c <memset>
	sprintf(msg,"HCLK   : %ldHz\r\n",HAL_RCC_GetHCLKFreq());
 8004594:	f7fe f8ae 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8004598:	4602      	mov	r2, r0
 800459a:	1d3b      	adds	r3, r7, #4
 800459c:	4941      	ldr	r1, [pc, #260]	; (80046a4 <main+0x19c>)
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fb74 	bl	8004c8c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80045a4:	1d3b      	adds	r3, r7, #4
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fb fe12 	bl	80001d0 <strlen>
 80045ac:	4603      	mov	r3, r0
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	1d39      	adds	r1, r7, #4
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295
 80045b6:	483a      	ldr	r0, [pc, #232]	; (80046a0 <main+0x198>)
 80045b8:	f7fe ffb6 	bl	8003528 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 80045bc:	1d3b      	adds	r3, r7, #4
 80045be:	2264      	movs	r2, #100	; 0x64
 80045c0:	2100      	movs	r1, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fb5a 	bl	8004c7c <memset>
	sprintf(msg,"PCLK1  : %ldHz\r\n",HAL_RCC_GetPCLK1Freq());
 80045c8:	f7fe f8a0 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 80045cc:	4602      	mov	r2, r0
 80045ce:	1d3b      	adds	r3, r7, #4
 80045d0:	4935      	ldr	r1, [pc, #212]	; (80046a8 <main+0x1a0>)
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fb5a 	bl	8004c8c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80045d8:	1d3b      	adds	r3, r7, #4
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fb fdf8 	bl	80001d0 <strlen>
 80045e0:	4603      	mov	r3, r0
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	1d39      	adds	r1, r7, #4
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ea:	482d      	ldr	r0, [pc, #180]	; (80046a0 <main+0x198>)
 80045ec:	f7fe ff9c 	bl	8003528 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	2264      	movs	r2, #100	; 0x64
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fb40 	bl	8004c7c <memset>
	sprintf(msg,"PCLK2  : %ldHz\r\n",HAL_RCC_GetPCLK2Freq());
 80045fc:	f7fe f89a 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8004600:	4602      	mov	r2, r0
 8004602:	1d3b      	adds	r3, r7, #4
 8004604:	4929      	ldr	r1, [pc, #164]	; (80046ac <main+0x1a4>)
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fb40 	bl	8004c8c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800460c:	1d3b      	adds	r3, r7, #4
 800460e:	4618      	mov	r0, r3
 8004610:	f7fb fdde 	bl	80001d0 <strlen>
 8004614:	4603      	mov	r3, r0
 8004616:	b29a      	uxth	r2, r3
 8004618:	1d39      	adds	r1, r7, #4
 800461a:	f04f 33ff 	mov.w	r3, #4294967295
 800461e:	4820      	ldr	r0, [pc, #128]	; (80046a0 <main+0x198>)
 8004620:	f7fe ff82 	bl	8003528 <HAL_UART_Transmit>


	HAL_UART_Receive_IT(&uart2, &dataRS, 1);
 8004624:	2201      	movs	r2, #1
 8004626:	4922      	ldr	r1, [pc, #136]	; (80046b0 <main+0x1a8>)
 8004628:	481d      	ldr	r0, [pc, #116]	; (80046a0 <main+0x198>)
 800462a:	f7ff f85b 	bl	80036e4 <HAL_UART_Receive_IT>
	HAL_UART_Transmit_IT(&uart2, &dataRS, 1);
 800462e:	2201      	movs	r2, #1
 8004630:	491f      	ldr	r1, [pc, #124]	; (80046b0 <main+0x1a8>)
 8004632:	481b      	ldr	r0, [pc, #108]	; (80046a0 <main+0x198>)
 8004634:	f7ff f811 	bl	800365a <HAL_UART_Transmit_IT>
	while(1){




		if (dataRS > 100) dataRS = 100;
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <main+0x1a8>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b64      	cmp	r3, #100	; 0x64
 800463e:	d902      	bls.n	8004646 <main+0x13e>
 8004640:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <main+0x1a8>)
 8004642:	2264      	movs	r2, #100	; 0x64
 8004644:	701a      	strb	r2, [r3, #0]
		if (dataRS < 0) dataRS = 0;

		duty_H1 = (dataRS*0.01)*999;
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <main+0x1a8>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fb ff6a 	bl	8000524 <__aeabi_i2d>
 8004650:	a30d      	add	r3, pc, #52	; (adr r3, 8004688 <main+0x180>)
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f7fb ffcf 	bl	80005f8 <__aeabi_dmul>
 800465a:	4603      	mov	r3, r0
 800465c:	460c      	mov	r4, r1
 800465e:	4618      	mov	r0, r3
 8004660:	4621      	mov	r1, r4
 8004662:	a30b      	add	r3, pc, #44	; (adr r3, 8004690 <main+0x188>)
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f7fb ffc6 	bl	80005f8 <__aeabi_dmul>
 800466c:	4603      	mov	r3, r0
 800466e:	460c      	mov	r4, r1
 8004670:	4618      	mov	r0, r3
 8004672:	4621      	mov	r1, r4
 8004674:	f7fc f9d2 	bl	8000a1c <__aeabi_d2uiz>
 8004678:	4603      	mov	r3, r0
 800467a:	b29a      	uxth	r2, r3
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <main+0x1ac>)
 800467e:	801a      	strh	r2, [r3, #0]
		if (dataRS > 100) dataRS = 100;
 8004680:	e7da      	b.n	8004638 <main+0x130>
 8004682:	bf00      	nop
 8004684:	f3af 8000 	nop.w
 8004688:	47ae147b 	.word	0x47ae147b
 800468c:	3f847ae1 	.word	0x3f847ae1
 8004690:	00000000 	.word	0x00000000
 8004694:	408f3800 	.word	0x408f3800
 8004698:	200004e8 	.word	0x200004e8
 800469c:	080054d4 	.word	0x080054d4
 80046a0:	20000580 	.word	0x20000580
 80046a4:	080054e8 	.word	0x080054e8
 80046a8:	080054fc 	.word	0x080054fc
 80046ac:	08005510 	.word	0x08005510
 80046b0:	200000c9 	.word	0x200000c9
 80046b4:	20000024 	.word	0x20000024

080046b8 <SystemConfigClk>:

	return 0;
}

void SystemConfigClk()
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b094      	sub	sp, #80	; 0x50
 80046bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc_init = {0};
 80046be:	f107 0320 	add.w	r3, r7, #32
 80046c2:	2230      	movs	r2, #48	; 0x30
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fad8 	bl	8004c7c <memset>
	RCC_ClkInitTypeDef clk_init = {0};
 80046cc:	f107 030c 	add.w	r3, r7, #12
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 80046dc:	2300      	movs	r3, #0
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	4b2b      	ldr	r3, [pc, #172]	; (8004790 <SystemConfigClk+0xd8>)
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	4a2a      	ldr	r2, [pc, #168]	; (8004790 <SystemConfigClk+0xd8>)
 80046e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ea:	6413      	str	r3, [r2, #64]	; 0x40
 80046ec:	4b28      	ldr	r3, [pc, #160]	; (8004790 <SystemConfigClk+0xd8>)
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046f8:	2300      	movs	r3, #0
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	4b25      	ldr	r3, [pc, #148]	; (8004794 <SystemConfigClk+0xdc>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a24      	ldr	r2, [pc, #144]	; (8004794 <SystemConfigClk+0xdc>)
 8004702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b22      	ldr	r3, [pc, #136]	; (8004794 <SystemConfigClk+0xdc>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	687b      	ldr	r3, [r7, #4]

	memset(&osc_init,0,sizeof(osc_init));
 8004714:	f107 0320 	add.w	r3, r7, #32
 8004718:	2230      	movs	r2, #48	; 0x30
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f000 faad 	bl	8004c7c <memset>
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004722:	2301      	movs	r3, #1
 8004724:	623b      	str	r3, [r7, #32]
    osc_init.HSEState = RCC_HSE_BYPASS;
 8004726:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
    osc_init.PLL.PLLState = RCC_PLL_ON;
 800472c:	2302      	movs	r3, #2
 800472e:	63bb      	str	r3, [r7, #56]	; 0x38
    osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004730:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004734:	63fb      	str	r3, [r7, #60]	; 0x3c
	osc_init.PLL.PLLM = 4;
 8004736:	2304      	movs	r3, #4
 8004738:	643b      	str	r3, [r7, #64]	; 0x40
	osc_init.PLL.PLLN = 100;
 800473a:	2364      	movs	r3, #100	; 0x64
 800473c:	647b      	str	r3, [r7, #68]	; 0x44
	osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 800473e:	2302      	movs	r3, #2
 8004740:	64bb      	str	r3, [r7, #72]	; 0x48
	osc_init.PLL.PLLQ = 7;
 8004742:	2307      	movs	r3, #7
 8004744:	64fb      	str	r3, [r7, #76]	; 0x4c

    //osc_init.HSEState = RCC_HSE_ON;
    if ( HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8004746:	f107 0320 	add.w	r3, r7, #32
 800474a:	4618      	mov	r0, r3
 800474c:	f7fd fbd6 	bl	8001efc <HAL_RCC_OscConfig>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <SystemConfigClk+0xa2>
    {
    	Error_handler();
 8004756:	f7ff fc97 	bl	8004088 <Error_handler>
    }

    clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800475a:	230f      	movs	r3, #15
 800475c:	60fb      	str	r3, [r7, #12]
    					RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    //clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  // NOT WORKING
 800475e:	2302      	movs	r3, #2
 8004760:	613b      	str	r3, [r7, #16]
    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
    clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8004766:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800476a:	61bb      	str	r3, [r7, #24]
    clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800476c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004770:	61fb      	str	r3, [r7, #28]

    if( HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_3) != HAL_OK)
 8004772:	f107 030c 	add.w	r3, r7, #12
 8004776:	2103      	movs	r1, #3
 8004778:	4618      	mov	r0, r3
 800477a:	f7fd fe01 	bl	8002380 <HAL_RCC_ClockConfig>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <SystemConfigClk+0xd0>
    {
    	Error_handler();
 8004784:	f7ff fc80 	bl	8004088 <Error_handler>
    }

}
 8004788:	bf00      	nop
 800478a:	3750      	adds	r7, #80	; 0x50
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40023800 	.word	0x40023800
 8004794:	40007000 	.word	0x40007000

08004798 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2){
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a05      	ldr	r2, [pc, #20]	; (80047bc <HAL_UART_RxCpltCallback+0x24>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d104      	bne.n	80047b4 <HAL_UART_RxCpltCallback+0x1c>

		HAL_UART_Receive_IT(&uart2, &dataRS, 1);
 80047aa:	2201      	movs	r2, #1
 80047ac:	4904      	ldr	r1, [pc, #16]	; (80047c0 <HAL_UART_RxCpltCallback+0x28>)
 80047ae:	4805      	ldr	r0, [pc, #20]	; (80047c4 <HAL_UART_RxCpltCallback+0x2c>)
 80047b0:	f7fe ff98 	bl	80036e4 <HAL_UART_Receive_IT>

	}

}
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40004400 	.word	0x40004400
 80047c0:	200000c9 	.word	0x200000c9
 80047c4:	20000580 	.word	0x20000580

080047c8 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2){
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a05      	ldr	r2, [pc, #20]	; (80047ec <HAL_UART_TxCpltCallback+0x24>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d104      	bne.n	80047e4 <HAL_UART_TxCpltCallback+0x1c>

		HAL_UART_Transmit_IT(&uart2, &dataRS, 1);
 80047da:	2201      	movs	r2, #1
 80047dc:	4904      	ldr	r1, [pc, #16]	; (80047f0 <HAL_UART_TxCpltCallback+0x28>)
 80047de:	4805      	ldr	r0, [pc, #20]	; (80047f4 <HAL_UART_TxCpltCallback+0x2c>)
 80047e0:	f7fe ff3b 	bl	800365a <HAL_UART_Transmit_IT>
	}

}
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40004400 	.word	0x40004400
 80047f0:	200000c9 	.word	0x200000c9
 80047f4:	20000580 	.word	0x20000580

080047f8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80047fe:	f000 f905 	bl	8004a0c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8004802:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004806:	2201      	movs	r2, #1
 8004808:	2178      	movs	r1, #120	; 0x78
 800480a:	485b      	ldr	r0, [pc, #364]	; (8004978 <SSD1306_Init+0x180>)
 800480c:	f7fd f856 	bl	80018bc <HAL_I2C_IsDeviceReady>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8004816:	2300      	movs	r3, #0
 8004818:	e0a9      	b.n	800496e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800481a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800481e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004820:	e002      	b.n	8004828 <SSD1306_Init+0x30>
		p--;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3b01      	subs	r3, #1
 8004826:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f9      	bne.n	8004822 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800482e:	22ae      	movs	r2, #174	; 0xae
 8004830:	2100      	movs	r1, #0
 8004832:	2078      	movs	r0, #120	; 0x78
 8004834:	f000 f946 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8004838:	2220      	movs	r2, #32
 800483a:	2100      	movs	r1, #0
 800483c:	2078      	movs	r0, #120	; 0x78
 800483e:	f000 f941 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004842:	2210      	movs	r2, #16
 8004844:	2100      	movs	r1, #0
 8004846:	2078      	movs	r0, #120	; 0x78
 8004848:	f000 f93c 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800484c:	22b0      	movs	r2, #176	; 0xb0
 800484e:	2100      	movs	r1, #0
 8004850:	2078      	movs	r0, #120	; 0x78
 8004852:	f000 f937 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8004856:	22c8      	movs	r2, #200	; 0xc8
 8004858:	2100      	movs	r1, #0
 800485a:	2078      	movs	r0, #120	; 0x78
 800485c:	f000 f932 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004860:	2200      	movs	r2, #0
 8004862:	2100      	movs	r1, #0
 8004864:	2078      	movs	r0, #120	; 0x78
 8004866:	f000 f92d 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800486a:	2210      	movs	r2, #16
 800486c:	2100      	movs	r1, #0
 800486e:	2078      	movs	r0, #120	; 0x78
 8004870:	f000 f928 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004874:	2240      	movs	r2, #64	; 0x40
 8004876:	2100      	movs	r1, #0
 8004878:	2078      	movs	r0, #120	; 0x78
 800487a:	f000 f923 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800487e:	2281      	movs	r2, #129	; 0x81
 8004880:	2100      	movs	r1, #0
 8004882:	2078      	movs	r0, #120	; 0x78
 8004884:	f000 f91e 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004888:	22ff      	movs	r2, #255	; 0xff
 800488a:	2100      	movs	r1, #0
 800488c:	2078      	movs	r0, #120	; 0x78
 800488e:	f000 f919 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004892:	22a1      	movs	r2, #161	; 0xa1
 8004894:	2100      	movs	r1, #0
 8004896:	2078      	movs	r0, #120	; 0x78
 8004898:	f000 f914 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800489c:	22a6      	movs	r2, #166	; 0xa6
 800489e:	2100      	movs	r1, #0
 80048a0:	2078      	movs	r0, #120	; 0x78
 80048a2:	f000 f90f 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80048a6:	22a8      	movs	r2, #168	; 0xa8
 80048a8:	2100      	movs	r1, #0
 80048aa:	2078      	movs	r0, #120	; 0x78
 80048ac:	f000 f90a 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80048b0:	223f      	movs	r2, #63	; 0x3f
 80048b2:	2100      	movs	r1, #0
 80048b4:	2078      	movs	r0, #120	; 0x78
 80048b6:	f000 f905 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80048ba:	22a4      	movs	r2, #164	; 0xa4
 80048bc:	2100      	movs	r1, #0
 80048be:	2078      	movs	r0, #120	; 0x78
 80048c0:	f000 f900 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80048c4:	22d3      	movs	r2, #211	; 0xd3
 80048c6:	2100      	movs	r1, #0
 80048c8:	2078      	movs	r0, #120	; 0x78
 80048ca:	f000 f8fb 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80048ce:	2200      	movs	r2, #0
 80048d0:	2100      	movs	r1, #0
 80048d2:	2078      	movs	r0, #120	; 0x78
 80048d4:	f000 f8f6 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80048d8:	22d5      	movs	r2, #213	; 0xd5
 80048da:	2100      	movs	r1, #0
 80048dc:	2078      	movs	r0, #120	; 0x78
 80048de:	f000 f8f1 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80048e2:	22f0      	movs	r2, #240	; 0xf0
 80048e4:	2100      	movs	r1, #0
 80048e6:	2078      	movs	r0, #120	; 0x78
 80048e8:	f000 f8ec 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80048ec:	22d9      	movs	r2, #217	; 0xd9
 80048ee:	2100      	movs	r1, #0
 80048f0:	2078      	movs	r0, #120	; 0x78
 80048f2:	f000 f8e7 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80048f6:	2222      	movs	r2, #34	; 0x22
 80048f8:	2100      	movs	r1, #0
 80048fa:	2078      	movs	r0, #120	; 0x78
 80048fc:	f000 f8e2 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004900:	22da      	movs	r2, #218	; 0xda
 8004902:	2100      	movs	r1, #0
 8004904:	2078      	movs	r0, #120	; 0x78
 8004906:	f000 f8dd 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800490a:	2212      	movs	r2, #18
 800490c:	2100      	movs	r1, #0
 800490e:	2078      	movs	r0, #120	; 0x78
 8004910:	f000 f8d8 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8004914:	22db      	movs	r2, #219	; 0xdb
 8004916:	2100      	movs	r1, #0
 8004918:	2078      	movs	r0, #120	; 0x78
 800491a:	f000 f8d3 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800491e:	2220      	movs	r2, #32
 8004920:	2100      	movs	r1, #0
 8004922:	2078      	movs	r0, #120	; 0x78
 8004924:	f000 f8ce 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8004928:	228d      	movs	r2, #141	; 0x8d
 800492a:	2100      	movs	r1, #0
 800492c:	2078      	movs	r0, #120	; 0x78
 800492e:	f000 f8c9 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8004932:	2214      	movs	r2, #20
 8004934:	2100      	movs	r1, #0
 8004936:	2078      	movs	r0, #120	; 0x78
 8004938:	f000 f8c4 	bl	8004ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800493c:	22af      	movs	r2, #175	; 0xaf
 800493e:	2100      	movs	r1, #0
 8004940:	2078      	movs	r0, #120	; 0x78
 8004942:	f000 f8bf 	bl	8004ac4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8004946:	222e      	movs	r2, #46	; 0x2e
 8004948:	2100      	movs	r1, #0
 800494a:	2078      	movs	r0, #120	; 0x78
 800494c:	f000 f8ba 	bl	8004ac4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8004950:	2000      	movs	r0, #0
 8004952:	f000 f843 	bl	80049dc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8004956:	f000 f813 	bl	8004980 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800495a:	4b08      	ldr	r3, [pc, #32]	; (800497c <SSD1306_Init+0x184>)
 800495c:	2200      	movs	r2, #0
 800495e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <SSD1306_Init+0x184>)
 8004962:	2200      	movs	r2, #0
 8004964:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8004966:	4b05      	ldr	r3, [pc, #20]	; (800497c <SSD1306_Init+0x184>)
 8004968:	2201      	movs	r2, #1
 800496a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800496c:	2301      	movs	r3, #1
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000528 	.word	0x20000528
 800497c:	200004cc 	.word	0x200004cc

08004980 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8004986:	2300      	movs	r3, #0
 8004988:	71fb      	strb	r3, [r7, #7]
 800498a:	e01d      	b.n	80049c8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	3b50      	subs	r3, #80	; 0x50
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	2100      	movs	r1, #0
 8004996:	2078      	movs	r0, #120	; 0x78
 8004998:	f000 f894 	bl	8004ac4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800499c:	2200      	movs	r2, #0
 800499e:	2100      	movs	r1, #0
 80049a0:	2078      	movs	r0, #120	; 0x78
 80049a2:	f000 f88f 	bl	8004ac4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80049a6:	2210      	movs	r2, #16
 80049a8:	2100      	movs	r1, #0
 80049aa:	2078      	movs	r0, #120	; 0x78
 80049ac:	f000 f88a 	bl	8004ac4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	01db      	lsls	r3, r3, #7
 80049b4:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <SSD1306_UpdateScreen+0x58>)
 80049b6:	441a      	add	r2, r3
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	2140      	movs	r1, #64	; 0x40
 80049bc:	2078      	movs	r0, #120	; 0x78
 80049be:	f000 f839 	bl	8004a34 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	3301      	adds	r3, #1
 80049c6:	71fb      	strb	r3, [r7, #7]
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	2b07      	cmp	r3, #7
 80049cc:	d9de      	bls.n	800498c <SSD1306_UpdateScreen+0xc>
	}
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200000cc 	.word	0x200000cc

080049dc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <SSD1306_Fill+0x14>
 80049ec:	2300      	movs	r3, #0
 80049ee:	e000      	b.n	80049f2 <SSD1306_Fill+0x16>
 80049f0:	23ff      	movs	r3, #255	; 0xff
 80049f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049f6:	4619      	mov	r1, r3
 80049f8:	4803      	ldr	r0, [pc, #12]	; (8004a08 <SSD1306_Fill+0x2c>)
 80049fa:	f000 f93f 	bl	8004c7c <memset>
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	200000cc 	.word	0x200000cc

08004a0c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8004a12:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <ssd1306_I2C_Init+0x24>)
 8004a14:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004a16:	e002      	b.n	8004a1e <ssd1306_I2C_Init+0x12>
		p--;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f9      	bne.n	8004a18 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	0003d090 	.word	0x0003d090

08004a34 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b0c7      	sub	sp, #284	; 0x11c
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4639      	mov	r1, r7
 8004a40:	600a      	str	r2, [r1, #0]
 8004a42:	4619      	mov	r1, r3
 8004a44:	1dfb      	adds	r3, r7, #7
 8004a46:	4622      	mov	r2, r4
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	1dbb      	adds	r3, r7, #6
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	1d3b      	adds	r3, r7, #4
 8004a52:	460a      	mov	r2, r1
 8004a54:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8004a56:	f107 030c 	add.w	r3, r7, #12
 8004a5a:	1dba      	adds	r2, r7, #6
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8004a60:	2300      	movs	r3, #0
 8004a62:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8004a66:	e010      	b.n	8004a8a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8004a68:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004a6c:	463a      	mov	r2, r7
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	441a      	add	r2, r3
 8004a72:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004a76:	3301      	adds	r3, #1
 8004a78:	7811      	ldrb	r1, [r2, #0]
 8004a7a:	f107 020c 	add.w	r2, r7, #12
 8004a7e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8004a80:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004a84:	3301      	adds	r3, #1
 8004a86:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8004a8a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	1d3a      	adds	r2, r7, #4
 8004a92:	8812      	ldrh	r2, [r2, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d8e7      	bhi.n	8004a68 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8004a98:	1dfb      	adds	r3, r7, #7
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	b299      	uxth	r1, r3
 8004a9e:	1d3b      	adds	r3, r7, #4
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	b298      	uxth	r0, r3
 8004aa6:	f107 020c 	add.w	r2, r7, #12
 8004aaa:	230a      	movs	r3, #10
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4803      	ldr	r0, [pc, #12]	; (8004ac0 <ssd1306_I2C_WriteMulti+0x8c>)
 8004ab2:	f7fc fe05 	bl	80016c0 <HAL_I2C_Master_Transmit>
}
 8004ab6:	bf00      	nop
 8004ab8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd90      	pop	{r4, r7, pc}
 8004ac0:	20000528 	.word	0x20000528

08004ac4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	71bb      	strb	r3, [r7, #6]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8004ad6:	79bb      	ldrb	r3, [r7, #6]
 8004ad8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8004ada:	797b      	ldrb	r3, [r7, #5]
 8004adc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	b299      	uxth	r1, r3
 8004ae2:	f107 020c 	add.w	r2, r7, #12
 8004ae6:	230a      	movs	r3, #10
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	2302      	movs	r3, #2
 8004aec:	4803      	ldr	r0, [pc, #12]	; (8004afc <ssd1306_I2C_Write+0x38>)
 8004aee:	f7fc fde7 	bl	80016c0 <HAL_I2C_Master_Transmit>
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20000528 	.word	0x20000528

08004b00 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8004b04:	f7fc f97e 	bl	8000e04 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8004b08:	f7fc faad 	bl	8001066 <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 8004b0c:	bf00      	nop
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004b18:	4b11      	ldr	r3, [pc, #68]	; (8004b60 <_sbrk+0x50>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <_sbrk+0x16>
		heap_end = &end;
 8004b20:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <_sbrk+0x50>)
 8004b22:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <_sbrk+0x54>)
 8004b24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004b26:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <_sbrk+0x50>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004b2c:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <_sbrk+0x50>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4413      	add	r3, r2
 8004b34:	466a      	mov	r2, sp
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d907      	bls.n	8004b4a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004b3a:	f000 f875 	bl	8004c28 <__errno>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	230c      	movs	r3, #12
 8004b42:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004b44:	f04f 33ff 	mov.w	r3, #4294967295
 8004b48:	e006      	b.n	8004b58 <_sbrk+0x48>
	}

	heap_end += incr;
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <_sbrk+0x50>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4413      	add	r3, r2
 8004b52:	4a03      	ldr	r2, [pc, #12]	; (8004b60 <_sbrk+0x50>)
 8004b54:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004b56:	68fb      	ldr	r3, [r7, #12]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	200004d8 	.word	0x200004d8
 8004b64:	20000680 	.word	0x20000680

08004b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b6c:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <SystemInit+0x60>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <SystemInit+0x60>)
 8004b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004b7c:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <SystemInit+0x64>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a12      	ldr	r2, [pc, #72]	; (8004bcc <SystemInit+0x64>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004b88:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <SystemInit+0x64>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <SystemInit+0x64>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a0e      	ldr	r2, [pc, #56]	; (8004bcc <SystemInit+0x64>)
 8004b94:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <SystemInit+0x64>)
 8004ba0:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <SystemInit+0x68>)
 8004ba2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004ba4:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <SystemInit+0x64>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a08      	ldr	r2, [pc, #32]	; (8004bcc <SystemInit+0x64>)
 8004baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <SystemInit+0x64>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004bb6:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <SystemInit+0x60>)
 8004bb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bbc:	609a      	str	r2, [r3, #8]
#endif
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000ed00 	.word	0xe000ed00
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	24003010 	.word	0x24003010

08004bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bda:	e003      	b.n	8004be4 <LoopCopyDataInit>

08004bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004be2:	3104      	adds	r1, #4

08004be4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004be4:	480b      	ldr	r0, [pc, #44]	; (8004c14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004be6:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004bec:	d3f6      	bcc.n	8004bdc <CopyDataInit>
  ldr  r2, =_sbss
 8004bee:	4a0b      	ldr	r2, [pc, #44]	; (8004c1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004bf0:	e002      	b.n	8004bf8 <LoopFillZerobss>

08004bf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004bf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004bf4:	f842 3b04 	str.w	r3, [r2], #4

08004bf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004bf8:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004bfc:	d3f9      	bcc.n	8004bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004bfe:	f7ff ffb3 	bl	8004b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c02:	f000 f817 	bl	8004c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c06:	f7ff fc7f 	bl	8004508 <main>
  bx  lr    
 8004c0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004c10:	08005598 	.word	0x08005598
  ldr  r0, =_sdata
 8004c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c18:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8004c1c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8004c20:	2000067c 	.word	0x2000067c

08004c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c24:	e7fe      	b.n	8004c24 <ADC_IRQHandler>
	...

08004c28 <__errno>:
 8004c28:	4b01      	ldr	r3, [pc, #4]	; (8004c30 <__errno+0x8>)
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	2000002c 	.word	0x2000002c

08004c34 <__libc_init_array>:
 8004c34:	b570      	push	{r4, r5, r6, lr}
 8004c36:	4e0d      	ldr	r6, [pc, #52]	; (8004c6c <__libc_init_array+0x38>)
 8004c38:	4c0d      	ldr	r4, [pc, #52]	; (8004c70 <__libc_init_array+0x3c>)
 8004c3a:	1ba4      	subs	r4, r4, r6
 8004c3c:	10a4      	asrs	r4, r4, #2
 8004c3e:	2500      	movs	r5, #0
 8004c40:	42a5      	cmp	r5, r4
 8004c42:	d109      	bne.n	8004c58 <__libc_init_array+0x24>
 8004c44:	4e0b      	ldr	r6, [pc, #44]	; (8004c74 <__libc_init_array+0x40>)
 8004c46:	4c0c      	ldr	r4, [pc, #48]	; (8004c78 <__libc_init_array+0x44>)
 8004c48:	f000 fc92 	bl	8005570 <_init>
 8004c4c:	1ba4      	subs	r4, r4, r6
 8004c4e:	10a4      	asrs	r4, r4, #2
 8004c50:	2500      	movs	r5, #0
 8004c52:	42a5      	cmp	r5, r4
 8004c54:	d105      	bne.n	8004c62 <__libc_init_array+0x2e>
 8004c56:	bd70      	pop	{r4, r5, r6, pc}
 8004c58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c5c:	4798      	blx	r3
 8004c5e:	3501      	adds	r5, #1
 8004c60:	e7ee      	b.n	8004c40 <__libc_init_array+0xc>
 8004c62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c66:	4798      	blx	r3
 8004c68:	3501      	adds	r5, #1
 8004c6a:	e7f2      	b.n	8004c52 <__libc_init_array+0x1e>
 8004c6c:	08005590 	.word	0x08005590
 8004c70:	08005590 	.word	0x08005590
 8004c74:	08005590 	.word	0x08005590
 8004c78:	08005594 	.word	0x08005594

08004c7c <memset>:
 8004c7c:	4402      	add	r2, r0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d100      	bne.n	8004c86 <memset+0xa>
 8004c84:	4770      	bx	lr
 8004c86:	f803 1b01 	strb.w	r1, [r3], #1
 8004c8a:	e7f9      	b.n	8004c80 <memset+0x4>

08004c8c <siprintf>:
 8004c8c:	b40e      	push	{r1, r2, r3}
 8004c8e:	b500      	push	{lr}
 8004c90:	b09c      	sub	sp, #112	; 0x70
 8004c92:	ab1d      	add	r3, sp, #116	; 0x74
 8004c94:	9002      	str	r0, [sp, #8]
 8004c96:	9006      	str	r0, [sp, #24]
 8004c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c9c:	4809      	ldr	r0, [pc, #36]	; (8004cc4 <siprintf+0x38>)
 8004c9e:	9107      	str	r1, [sp, #28]
 8004ca0:	9104      	str	r1, [sp, #16]
 8004ca2:	4909      	ldr	r1, [pc, #36]	; (8004cc8 <siprintf+0x3c>)
 8004ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ca8:	9105      	str	r1, [sp, #20]
 8004caa:	6800      	ldr	r0, [r0, #0]
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	a902      	add	r1, sp, #8
 8004cb0:	f000 f866 	bl	8004d80 <_svfiprintf_r>
 8004cb4:	9b02      	ldr	r3, [sp, #8]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	b01c      	add	sp, #112	; 0x70
 8004cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cc0:	b003      	add	sp, #12
 8004cc2:	4770      	bx	lr
 8004cc4:	2000002c 	.word	0x2000002c
 8004cc8:	ffff0208 	.word	0xffff0208

08004ccc <__ssputs_r>:
 8004ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd0:	688e      	ldr	r6, [r1, #8]
 8004cd2:	429e      	cmp	r6, r3
 8004cd4:	4682      	mov	sl, r0
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	4690      	mov	r8, r2
 8004cda:	4699      	mov	r9, r3
 8004cdc:	d837      	bhi.n	8004d4e <__ssputs_r+0x82>
 8004cde:	898a      	ldrh	r2, [r1, #12]
 8004ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ce4:	d031      	beq.n	8004d4a <__ssputs_r+0x7e>
 8004ce6:	6825      	ldr	r5, [r4, #0]
 8004ce8:	6909      	ldr	r1, [r1, #16]
 8004cea:	1a6f      	subs	r7, r5, r1
 8004cec:	6965      	ldr	r5, [r4, #20]
 8004cee:	2302      	movs	r3, #2
 8004cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cf4:	fb95 f5f3 	sdiv	r5, r5, r3
 8004cf8:	f109 0301 	add.w	r3, r9, #1
 8004cfc:	443b      	add	r3, r7
 8004cfe:	429d      	cmp	r5, r3
 8004d00:	bf38      	it	cc
 8004d02:	461d      	movcc	r5, r3
 8004d04:	0553      	lsls	r3, r2, #21
 8004d06:	d530      	bpl.n	8004d6a <__ssputs_r+0x9e>
 8004d08:	4629      	mov	r1, r5
 8004d0a:	f000 fb2b 	bl	8005364 <_malloc_r>
 8004d0e:	4606      	mov	r6, r0
 8004d10:	b950      	cbnz	r0, 8004d28 <__ssputs_r+0x5c>
 8004d12:	230c      	movs	r3, #12
 8004d14:	f8ca 3000 	str.w	r3, [sl]
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d1e:	81a3      	strh	r3, [r4, #12]
 8004d20:	f04f 30ff 	mov.w	r0, #4294967295
 8004d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d28:	463a      	mov	r2, r7
 8004d2a:	6921      	ldr	r1, [r4, #16]
 8004d2c:	f000 faa8 	bl	8005280 <memcpy>
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3a:	81a3      	strh	r3, [r4, #12]
 8004d3c:	6126      	str	r6, [r4, #16]
 8004d3e:	6165      	str	r5, [r4, #20]
 8004d40:	443e      	add	r6, r7
 8004d42:	1bed      	subs	r5, r5, r7
 8004d44:	6026      	str	r6, [r4, #0]
 8004d46:	60a5      	str	r5, [r4, #8]
 8004d48:	464e      	mov	r6, r9
 8004d4a:	454e      	cmp	r6, r9
 8004d4c:	d900      	bls.n	8004d50 <__ssputs_r+0x84>
 8004d4e:	464e      	mov	r6, r9
 8004d50:	4632      	mov	r2, r6
 8004d52:	4641      	mov	r1, r8
 8004d54:	6820      	ldr	r0, [r4, #0]
 8004d56:	f000 fa9e 	bl	8005296 <memmove>
 8004d5a:	68a3      	ldr	r3, [r4, #8]
 8004d5c:	1b9b      	subs	r3, r3, r6
 8004d5e:	60a3      	str	r3, [r4, #8]
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	441e      	add	r6, r3
 8004d64:	6026      	str	r6, [r4, #0]
 8004d66:	2000      	movs	r0, #0
 8004d68:	e7dc      	b.n	8004d24 <__ssputs_r+0x58>
 8004d6a:	462a      	mov	r2, r5
 8004d6c:	f000 fb54 	bl	8005418 <_realloc_r>
 8004d70:	4606      	mov	r6, r0
 8004d72:	2800      	cmp	r0, #0
 8004d74:	d1e2      	bne.n	8004d3c <__ssputs_r+0x70>
 8004d76:	6921      	ldr	r1, [r4, #16]
 8004d78:	4650      	mov	r0, sl
 8004d7a:	f000 faa5 	bl	80052c8 <_free_r>
 8004d7e:	e7c8      	b.n	8004d12 <__ssputs_r+0x46>

08004d80 <_svfiprintf_r>:
 8004d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	461d      	mov	r5, r3
 8004d86:	898b      	ldrh	r3, [r1, #12]
 8004d88:	061f      	lsls	r7, r3, #24
 8004d8a:	b09d      	sub	sp, #116	; 0x74
 8004d8c:	4680      	mov	r8, r0
 8004d8e:	460c      	mov	r4, r1
 8004d90:	4616      	mov	r6, r2
 8004d92:	d50f      	bpl.n	8004db4 <_svfiprintf_r+0x34>
 8004d94:	690b      	ldr	r3, [r1, #16]
 8004d96:	b96b      	cbnz	r3, 8004db4 <_svfiprintf_r+0x34>
 8004d98:	2140      	movs	r1, #64	; 0x40
 8004d9a:	f000 fae3 	bl	8005364 <_malloc_r>
 8004d9e:	6020      	str	r0, [r4, #0]
 8004da0:	6120      	str	r0, [r4, #16]
 8004da2:	b928      	cbnz	r0, 8004db0 <_svfiprintf_r+0x30>
 8004da4:	230c      	movs	r3, #12
 8004da6:	f8c8 3000 	str.w	r3, [r8]
 8004daa:	f04f 30ff 	mov.w	r0, #4294967295
 8004dae:	e0c8      	b.n	8004f42 <_svfiprintf_r+0x1c2>
 8004db0:	2340      	movs	r3, #64	; 0x40
 8004db2:	6163      	str	r3, [r4, #20]
 8004db4:	2300      	movs	r3, #0
 8004db6:	9309      	str	r3, [sp, #36]	; 0x24
 8004db8:	2320      	movs	r3, #32
 8004dba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dbe:	2330      	movs	r3, #48	; 0x30
 8004dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dc4:	9503      	str	r5, [sp, #12]
 8004dc6:	f04f 0b01 	mov.w	fp, #1
 8004dca:	4637      	mov	r7, r6
 8004dcc:	463d      	mov	r5, r7
 8004dce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004dd2:	b10b      	cbz	r3, 8004dd8 <_svfiprintf_r+0x58>
 8004dd4:	2b25      	cmp	r3, #37	; 0x25
 8004dd6:	d13e      	bne.n	8004e56 <_svfiprintf_r+0xd6>
 8004dd8:	ebb7 0a06 	subs.w	sl, r7, r6
 8004ddc:	d00b      	beq.n	8004df6 <_svfiprintf_r+0x76>
 8004dde:	4653      	mov	r3, sl
 8004de0:	4632      	mov	r2, r6
 8004de2:	4621      	mov	r1, r4
 8004de4:	4640      	mov	r0, r8
 8004de6:	f7ff ff71 	bl	8004ccc <__ssputs_r>
 8004dea:	3001      	adds	r0, #1
 8004dec:	f000 80a4 	beq.w	8004f38 <_svfiprintf_r+0x1b8>
 8004df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df2:	4453      	add	r3, sl
 8004df4:	9309      	str	r3, [sp, #36]	; 0x24
 8004df6:	783b      	ldrb	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 809d 	beq.w	8004f38 <_svfiprintf_r+0x1b8>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f04f 32ff 	mov.w	r2, #4294967295
 8004e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e08:	9304      	str	r3, [sp, #16]
 8004e0a:	9307      	str	r3, [sp, #28]
 8004e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e10:	931a      	str	r3, [sp, #104]	; 0x68
 8004e12:	462f      	mov	r7, r5
 8004e14:	2205      	movs	r2, #5
 8004e16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004e1a:	4850      	ldr	r0, [pc, #320]	; (8004f5c <_svfiprintf_r+0x1dc>)
 8004e1c:	f7fb f9e0 	bl	80001e0 <memchr>
 8004e20:	9b04      	ldr	r3, [sp, #16]
 8004e22:	b9d0      	cbnz	r0, 8004e5a <_svfiprintf_r+0xda>
 8004e24:	06d9      	lsls	r1, r3, #27
 8004e26:	bf44      	itt	mi
 8004e28:	2220      	movmi	r2, #32
 8004e2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e2e:	071a      	lsls	r2, r3, #28
 8004e30:	bf44      	itt	mi
 8004e32:	222b      	movmi	r2, #43	; 0x2b
 8004e34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e38:	782a      	ldrb	r2, [r5, #0]
 8004e3a:	2a2a      	cmp	r2, #42	; 0x2a
 8004e3c:	d015      	beq.n	8004e6a <_svfiprintf_r+0xea>
 8004e3e:	9a07      	ldr	r2, [sp, #28]
 8004e40:	462f      	mov	r7, r5
 8004e42:	2000      	movs	r0, #0
 8004e44:	250a      	movs	r5, #10
 8004e46:	4639      	mov	r1, r7
 8004e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e4c:	3b30      	subs	r3, #48	; 0x30
 8004e4e:	2b09      	cmp	r3, #9
 8004e50:	d94d      	bls.n	8004eee <_svfiprintf_r+0x16e>
 8004e52:	b1b8      	cbz	r0, 8004e84 <_svfiprintf_r+0x104>
 8004e54:	e00f      	b.n	8004e76 <_svfiprintf_r+0xf6>
 8004e56:	462f      	mov	r7, r5
 8004e58:	e7b8      	b.n	8004dcc <_svfiprintf_r+0x4c>
 8004e5a:	4a40      	ldr	r2, [pc, #256]	; (8004f5c <_svfiprintf_r+0x1dc>)
 8004e5c:	1a80      	subs	r0, r0, r2
 8004e5e:	fa0b f000 	lsl.w	r0, fp, r0
 8004e62:	4318      	orrs	r0, r3
 8004e64:	9004      	str	r0, [sp, #16]
 8004e66:	463d      	mov	r5, r7
 8004e68:	e7d3      	b.n	8004e12 <_svfiprintf_r+0x92>
 8004e6a:	9a03      	ldr	r2, [sp, #12]
 8004e6c:	1d11      	adds	r1, r2, #4
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	9103      	str	r1, [sp, #12]
 8004e72:	2a00      	cmp	r2, #0
 8004e74:	db01      	blt.n	8004e7a <_svfiprintf_r+0xfa>
 8004e76:	9207      	str	r2, [sp, #28]
 8004e78:	e004      	b.n	8004e84 <_svfiprintf_r+0x104>
 8004e7a:	4252      	negs	r2, r2
 8004e7c:	f043 0302 	orr.w	r3, r3, #2
 8004e80:	9207      	str	r2, [sp, #28]
 8004e82:	9304      	str	r3, [sp, #16]
 8004e84:	783b      	ldrb	r3, [r7, #0]
 8004e86:	2b2e      	cmp	r3, #46	; 0x2e
 8004e88:	d10c      	bne.n	8004ea4 <_svfiprintf_r+0x124>
 8004e8a:	787b      	ldrb	r3, [r7, #1]
 8004e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e8e:	d133      	bne.n	8004ef8 <_svfiprintf_r+0x178>
 8004e90:	9b03      	ldr	r3, [sp, #12]
 8004e92:	1d1a      	adds	r2, r3, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	9203      	str	r2, [sp, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bfb8      	it	lt
 8004e9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ea0:	3702      	adds	r7, #2
 8004ea2:	9305      	str	r3, [sp, #20]
 8004ea4:	4d2e      	ldr	r5, [pc, #184]	; (8004f60 <_svfiprintf_r+0x1e0>)
 8004ea6:	7839      	ldrb	r1, [r7, #0]
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f7fb f998 	bl	80001e0 <memchr>
 8004eb0:	b138      	cbz	r0, 8004ec2 <_svfiprintf_r+0x142>
 8004eb2:	2340      	movs	r3, #64	; 0x40
 8004eb4:	1b40      	subs	r0, r0, r5
 8004eb6:	fa03 f000 	lsl.w	r0, r3, r0
 8004eba:	9b04      	ldr	r3, [sp, #16]
 8004ebc:	4303      	orrs	r3, r0
 8004ebe:	3701      	adds	r7, #1
 8004ec0:	9304      	str	r3, [sp, #16]
 8004ec2:	7839      	ldrb	r1, [r7, #0]
 8004ec4:	4827      	ldr	r0, [pc, #156]	; (8004f64 <_svfiprintf_r+0x1e4>)
 8004ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004eca:	2206      	movs	r2, #6
 8004ecc:	1c7e      	adds	r6, r7, #1
 8004ece:	f7fb f987 	bl	80001e0 <memchr>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	d038      	beq.n	8004f48 <_svfiprintf_r+0x1c8>
 8004ed6:	4b24      	ldr	r3, [pc, #144]	; (8004f68 <_svfiprintf_r+0x1e8>)
 8004ed8:	bb13      	cbnz	r3, 8004f20 <_svfiprintf_r+0x1a0>
 8004eda:	9b03      	ldr	r3, [sp, #12]
 8004edc:	3307      	adds	r3, #7
 8004ede:	f023 0307 	bic.w	r3, r3, #7
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	9303      	str	r3, [sp, #12]
 8004ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee8:	444b      	add	r3, r9
 8004eea:	9309      	str	r3, [sp, #36]	; 0x24
 8004eec:	e76d      	b.n	8004dca <_svfiprintf_r+0x4a>
 8004eee:	fb05 3202 	mla	r2, r5, r2, r3
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	460f      	mov	r7, r1
 8004ef6:	e7a6      	b.n	8004e46 <_svfiprintf_r+0xc6>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	3701      	adds	r7, #1
 8004efc:	9305      	str	r3, [sp, #20]
 8004efe:	4619      	mov	r1, r3
 8004f00:	250a      	movs	r5, #10
 8004f02:	4638      	mov	r0, r7
 8004f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f08:	3a30      	subs	r2, #48	; 0x30
 8004f0a:	2a09      	cmp	r2, #9
 8004f0c:	d903      	bls.n	8004f16 <_svfiprintf_r+0x196>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0c8      	beq.n	8004ea4 <_svfiprintf_r+0x124>
 8004f12:	9105      	str	r1, [sp, #20]
 8004f14:	e7c6      	b.n	8004ea4 <_svfiprintf_r+0x124>
 8004f16:	fb05 2101 	mla	r1, r5, r1, r2
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	e7f0      	b.n	8004f02 <_svfiprintf_r+0x182>
 8004f20:	ab03      	add	r3, sp, #12
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	4622      	mov	r2, r4
 8004f26:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <_svfiprintf_r+0x1ec>)
 8004f28:	a904      	add	r1, sp, #16
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	f3af 8000 	nop.w
 8004f30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f34:	4681      	mov	r9, r0
 8004f36:	d1d6      	bne.n	8004ee6 <_svfiprintf_r+0x166>
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	065b      	lsls	r3, r3, #25
 8004f3c:	f53f af35 	bmi.w	8004daa <_svfiprintf_r+0x2a>
 8004f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f42:	b01d      	add	sp, #116	; 0x74
 8004f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f48:	ab03      	add	r3, sp, #12
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <_svfiprintf_r+0x1ec>)
 8004f50:	a904      	add	r1, sp, #16
 8004f52:	4640      	mov	r0, r8
 8004f54:	f000 f882 	bl	800505c <_printf_i>
 8004f58:	e7ea      	b.n	8004f30 <_svfiprintf_r+0x1b0>
 8004f5a:	bf00      	nop
 8004f5c:	0800553c 	.word	0x0800553c
 8004f60:	08005542 	.word	0x08005542
 8004f64:	08005546 	.word	0x08005546
 8004f68:	00000000 	.word	0x00000000
 8004f6c:	08004ccd 	.word	0x08004ccd

08004f70 <_printf_common>:
 8004f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f74:	4691      	mov	r9, r2
 8004f76:	461f      	mov	r7, r3
 8004f78:	688a      	ldr	r2, [r1, #8]
 8004f7a:	690b      	ldr	r3, [r1, #16]
 8004f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f80:	4293      	cmp	r3, r2
 8004f82:	bfb8      	it	lt
 8004f84:	4613      	movlt	r3, r2
 8004f86:	f8c9 3000 	str.w	r3, [r9]
 8004f8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f8e:	4606      	mov	r6, r0
 8004f90:	460c      	mov	r4, r1
 8004f92:	b112      	cbz	r2, 8004f9a <_printf_common+0x2a>
 8004f94:	3301      	adds	r3, #1
 8004f96:	f8c9 3000 	str.w	r3, [r9]
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	0699      	lsls	r1, r3, #26
 8004f9e:	bf42      	ittt	mi
 8004fa0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004fa4:	3302      	addmi	r3, #2
 8004fa6:	f8c9 3000 	strmi.w	r3, [r9]
 8004faa:	6825      	ldr	r5, [r4, #0]
 8004fac:	f015 0506 	ands.w	r5, r5, #6
 8004fb0:	d107      	bne.n	8004fc2 <_printf_common+0x52>
 8004fb2:	f104 0a19 	add.w	sl, r4, #25
 8004fb6:	68e3      	ldr	r3, [r4, #12]
 8004fb8:	f8d9 2000 	ldr.w	r2, [r9]
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	42ab      	cmp	r3, r5
 8004fc0:	dc28      	bgt.n	8005014 <_printf_common+0xa4>
 8004fc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fc6:	6822      	ldr	r2, [r4, #0]
 8004fc8:	3300      	adds	r3, #0
 8004fca:	bf18      	it	ne
 8004fcc:	2301      	movne	r3, #1
 8004fce:	0692      	lsls	r2, r2, #26
 8004fd0:	d42d      	bmi.n	800502e <_printf_common+0xbe>
 8004fd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fd6:	4639      	mov	r1, r7
 8004fd8:	4630      	mov	r0, r6
 8004fda:	47c0      	blx	r8
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d020      	beq.n	8005022 <_printf_common+0xb2>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	68e5      	ldr	r5, [r4, #12]
 8004fe4:	f8d9 2000 	ldr.w	r2, [r9]
 8004fe8:	f003 0306 	and.w	r3, r3, #6
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	bf08      	it	eq
 8004ff0:	1aad      	subeq	r5, r5, r2
 8004ff2:	68a3      	ldr	r3, [r4, #8]
 8004ff4:	6922      	ldr	r2, [r4, #16]
 8004ff6:	bf0c      	ite	eq
 8004ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ffc:	2500      	movne	r5, #0
 8004ffe:	4293      	cmp	r3, r2
 8005000:	bfc4      	itt	gt
 8005002:	1a9b      	subgt	r3, r3, r2
 8005004:	18ed      	addgt	r5, r5, r3
 8005006:	f04f 0900 	mov.w	r9, #0
 800500a:	341a      	adds	r4, #26
 800500c:	454d      	cmp	r5, r9
 800500e:	d11a      	bne.n	8005046 <_printf_common+0xd6>
 8005010:	2000      	movs	r0, #0
 8005012:	e008      	b.n	8005026 <_printf_common+0xb6>
 8005014:	2301      	movs	r3, #1
 8005016:	4652      	mov	r2, sl
 8005018:	4639      	mov	r1, r7
 800501a:	4630      	mov	r0, r6
 800501c:	47c0      	blx	r8
 800501e:	3001      	adds	r0, #1
 8005020:	d103      	bne.n	800502a <_printf_common+0xba>
 8005022:	f04f 30ff 	mov.w	r0, #4294967295
 8005026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502a:	3501      	adds	r5, #1
 800502c:	e7c3      	b.n	8004fb6 <_printf_common+0x46>
 800502e:	18e1      	adds	r1, r4, r3
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	2030      	movs	r0, #48	; 0x30
 8005034:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005038:	4422      	add	r2, r4
 800503a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800503e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005042:	3302      	adds	r3, #2
 8005044:	e7c5      	b.n	8004fd2 <_printf_common+0x62>
 8005046:	2301      	movs	r3, #1
 8005048:	4622      	mov	r2, r4
 800504a:	4639      	mov	r1, r7
 800504c:	4630      	mov	r0, r6
 800504e:	47c0      	blx	r8
 8005050:	3001      	adds	r0, #1
 8005052:	d0e6      	beq.n	8005022 <_printf_common+0xb2>
 8005054:	f109 0901 	add.w	r9, r9, #1
 8005058:	e7d8      	b.n	800500c <_printf_common+0x9c>
	...

0800505c <_printf_i>:
 800505c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005060:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005064:	460c      	mov	r4, r1
 8005066:	7e09      	ldrb	r1, [r1, #24]
 8005068:	b085      	sub	sp, #20
 800506a:	296e      	cmp	r1, #110	; 0x6e
 800506c:	4617      	mov	r7, r2
 800506e:	4606      	mov	r6, r0
 8005070:	4698      	mov	r8, r3
 8005072:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005074:	f000 80b3 	beq.w	80051de <_printf_i+0x182>
 8005078:	d822      	bhi.n	80050c0 <_printf_i+0x64>
 800507a:	2963      	cmp	r1, #99	; 0x63
 800507c:	d036      	beq.n	80050ec <_printf_i+0x90>
 800507e:	d80a      	bhi.n	8005096 <_printf_i+0x3a>
 8005080:	2900      	cmp	r1, #0
 8005082:	f000 80b9 	beq.w	80051f8 <_printf_i+0x19c>
 8005086:	2958      	cmp	r1, #88	; 0x58
 8005088:	f000 8083 	beq.w	8005192 <_printf_i+0x136>
 800508c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005090:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005094:	e032      	b.n	80050fc <_printf_i+0xa0>
 8005096:	2964      	cmp	r1, #100	; 0x64
 8005098:	d001      	beq.n	800509e <_printf_i+0x42>
 800509a:	2969      	cmp	r1, #105	; 0x69
 800509c:	d1f6      	bne.n	800508c <_printf_i+0x30>
 800509e:	6820      	ldr	r0, [r4, #0]
 80050a0:	6813      	ldr	r3, [r2, #0]
 80050a2:	0605      	lsls	r5, r0, #24
 80050a4:	f103 0104 	add.w	r1, r3, #4
 80050a8:	d52a      	bpl.n	8005100 <_printf_i+0xa4>
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6011      	str	r1, [r2, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	da03      	bge.n	80050ba <_printf_i+0x5e>
 80050b2:	222d      	movs	r2, #45	; 0x2d
 80050b4:	425b      	negs	r3, r3
 80050b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050ba:	486f      	ldr	r0, [pc, #444]	; (8005278 <_printf_i+0x21c>)
 80050bc:	220a      	movs	r2, #10
 80050be:	e039      	b.n	8005134 <_printf_i+0xd8>
 80050c0:	2973      	cmp	r1, #115	; 0x73
 80050c2:	f000 809d 	beq.w	8005200 <_printf_i+0x1a4>
 80050c6:	d808      	bhi.n	80050da <_printf_i+0x7e>
 80050c8:	296f      	cmp	r1, #111	; 0x6f
 80050ca:	d020      	beq.n	800510e <_printf_i+0xb2>
 80050cc:	2970      	cmp	r1, #112	; 0x70
 80050ce:	d1dd      	bne.n	800508c <_printf_i+0x30>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	f043 0320 	orr.w	r3, r3, #32
 80050d6:	6023      	str	r3, [r4, #0]
 80050d8:	e003      	b.n	80050e2 <_printf_i+0x86>
 80050da:	2975      	cmp	r1, #117	; 0x75
 80050dc:	d017      	beq.n	800510e <_printf_i+0xb2>
 80050de:	2978      	cmp	r1, #120	; 0x78
 80050e0:	d1d4      	bne.n	800508c <_printf_i+0x30>
 80050e2:	2378      	movs	r3, #120	; 0x78
 80050e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050e8:	4864      	ldr	r0, [pc, #400]	; (800527c <_printf_i+0x220>)
 80050ea:	e055      	b.n	8005198 <_printf_i+0x13c>
 80050ec:	6813      	ldr	r3, [r2, #0]
 80050ee:	1d19      	adds	r1, r3, #4
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6011      	str	r1, [r2, #0]
 80050f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050fc:	2301      	movs	r3, #1
 80050fe:	e08c      	b.n	800521a <_printf_i+0x1be>
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6011      	str	r1, [r2, #0]
 8005104:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005108:	bf18      	it	ne
 800510a:	b21b      	sxthne	r3, r3
 800510c:	e7cf      	b.n	80050ae <_printf_i+0x52>
 800510e:	6813      	ldr	r3, [r2, #0]
 8005110:	6825      	ldr	r5, [r4, #0]
 8005112:	1d18      	adds	r0, r3, #4
 8005114:	6010      	str	r0, [r2, #0]
 8005116:	0628      	lsls	r0, r5, #24
 8005118:	d501      	bpl.n	800511e <_printf_i+0xc2>
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	e002      	b.n	8005124 <_printf_i+0xc8>
 800511e:	0668      	lsls	r0, r5, #25
 8005120:	d5fb      	bpl.n	800511a <_printf_i+0xbe>
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	4854      	ldr	r0, [pc, #336]	; (8005278 <_printf_i+0x21c>)
 8005126:	296f      	cmp	r1, #111	; 0x6f
 8005128:	bf14      	ite	ne
 800512a:	220a      	movne	r2, #10
 800512c:	2208      	moveq	r2, #8
 800512e:	2100      	movs	r1, #0
 8005130:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005134:	6865      	ldr	r5, [r4, #4]
 8005136:	60a5      	str	r5, [r4, #8]
 8005138:	2d00      	cmp	r5, #0
 800513a:	f2c0 8095 	blt.w	8005268 <_printf_i+0x20c>
 800513e:	6821      	ldr	r1, [r4, #0]
 8005140:	f021 0104 	bic.w	r1, r1, #4
 8005144:	6021      	str	r1, [r4, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d13d      	bne.n	80051c6 <_printf_i+0x16a>
 800514a:	2d00      	cmp	r5, #0
 800514c:	f040 808e 	bne.w	800526c <_printf_i+0x210>
 8005150:	4665      	mov	r5, ip
 8005152:	2a08      	cmp	r2, #8
 8005154:	d10b      	bne.n	800516e <_printf_i+0x112>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	07db      	lsls	r3, r3, #31
 800515a:	d508      	bpl.n	800516e <_printf_i+0x112>
 800515c:	6923      	ldr	r3, [r4, #16]
 800515e:	6862      	ldr	r2, [r4, #4]
 8005160:	429a      	cmp	r2, r3
 8005162:	bfde      	ittt	le
 8005164:	2330      	movle	r3, #48	; 0x30
 8005166:	f805 3c01 	strble.w	r3, [r5, #-1]
 800516a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800516e:	ebac 0305 	sub.w	r3, ip, r5
 8005172:	6123      	str	r3, [r4, #16]
 8005174:	f8cd 8000 	str.w	r8, [sp]
 8005178:	463b      	mov	r3, r7
 800517a:	aa03      	add	r2, sp, #12
 800517c:	4621      	mov	r1, r4
 800517e:	4630      	mov	r0, r6
 8005180:	f7ff fef6 	bl	8004f70 <_printf_common>
 8005184:	3001      	adds	r0, #1
 8005186:	d14d      	bne.n	8005224 <_printf_i+0x1c8>
 8005188:	f04f 30ff 	mov.w	r0, #4294967295
 800518c:	b005      	add	sp, #20
 800518e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005192:	4839      	ldr	r0, [pc, #228]	; (8005278 <_printf_i+0x21c>)
 8005194:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005198:	6813      	ldr	r3, [r2, #0]
 800519a:	6821      	ldr	r1, [r4, #0]
 800519c:	1d1d      	adds	r5, r3, #4
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6015      	str	r5, [r2, #0]
 80051a2:	060a      	lsls	r2, r1, #24
 80051a4:	d50b      	bpl.n	80051be <_printf_i+0x162>
 80051a6:	07ca      	lsls	r2, r1, #31
 80051a8:	bf44      	itt	mi
 80051aa:	f041 0120 	orrmi.w	r1, r1, #32
 80051ae:	6021      	strmi	r1, [r4, #0]
 80051b0:	b91b      	cbnz	r3, 80051ba <_printf_i+0x15e>
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	f022 0220 	bic.w	r2, r2, #32
 80051b8:	6022      	str	r2, [r4, #0]
 80051ba:	2210      	movs	r2, #16
 80051bc:	e7b7      	b.n	800512e <_printf_i+0xd2>
 80051be:	064d      	lsls	r5, r1, #25
 80051c0:	bf48      	it	mi
 80051c2:	b29b      	uxthmi	r3, r3
 80051c4:	e7ef      	b.n	80051a6 <_printf_i+0x14a>
 80051c6:	4665      	mov	r5, ip
 80051c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80051cc:	fb02 3311 	mls	r3, r2, r1, r3
 80051d0:	5cc3      	ldrb	r3, [r0, r3]
 80051d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051d6:	460b      	mov	r3, r1
 80051d8:	2900      	cmp	r1, #0
 80051da:	d1f5      	bne.n	80051c8 <_printf_i+0x16c>
 80051dc:	e7b9      	b.n	8005152 <_printf_i+0xf6>
 80051de:	6813      	ldr	r3, [r2, #0]
 80051e0:	6825      	ldr	r5, [r4, #0]
 80051e2:	6961      	ldr	r1, [r4, #20]
 80051e4:	1d18      	adds	r0, r3, #4
 80051e6:	6010      	str	r0, [r2, #0]
 80051e8:	0628      	lsls	r0, r5, #24
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	d501      	bpl.n	80051f2 <_printf_i+0x196>
 80051ee:	6019      	str	r1, [r3, #0]
 80051f0:	e002      	b.n	80051f8 <_printf_i+0x19c>
 80051f2:	066a      	lsls	r2, r5, #25
 80051f4:	d5fb      	bpl.n	80051ee <_printf_i+0x192>
 80051f6:	8019      	strh	r1, [r3, #0]
 80051f8:	2300      	movs	r3, #0
 80051fa:	6123      	str	r3, [r4, #16]
 80051fc:	4665      	mov	r5, ip
 80051fe:	e7b9      	b.n	8005174 <_printf_i+0x118>
 8005200:	6813      	ldr	r3, [r2, #0]
 8005202:	1d19      	adds	r1, r3, #4
 8005204:	6011      	str	r1, [r2, #0]
 8005206:	681d      	ldr	r5, [r3, #0]
 8005208:	6862      	ldr	r2, [r4, #4]
 800520a:	2100      	movs	r1, #0
 800520c:	4628      	mov	r0, r5
 800520e:	f7fa ffe7 	bl	80001e0 <memchr>
 8005212:	b108      	cbz	r0, 8005218 <_printf_i+0x1bc>
 8005214:	1b40      	subs	r0, r0, r5
 8005216:	6060      	str	r0, [r4, #4]
 8005218:	6863      	ldr	r3, [r4, #4]
 800521a:	6123      	str	r3, [r4, #16]
 800521c:	2300      	movs	r3, #0
 800521e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005222:	e7a7      	b.n	8005174 <_printf_i+0x118>
 8005224:	6923      	ldr	r3, [r4, #16]
 8005226:	462a      	mov	r2, r5
 8005228:	4639      	mov	r1, r7
 800522a:	4630      	mov	r0, r6
 800522c:	47c0      	blx	r8
 800522e:	3001      	adds	r0, #1
 8005230:	d0aa      	beq.n	8005188 <_printf_i+0x12c>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	079b      	lsls	r3, r3, #30
 8005236:	d413      	bmi.n	8005260 <_printf_i+0x204>
 8005238:	68e0      	ldr	r0, [r4, #12]
 800523a:	9b03      	ldr	r3, [sp, #12]
 800523c:	4298      	cmp	r0, r3
 800523e:	bfb8      	it	lt
 8005240:	4618      	movlt	r0, r3
 8005242:	e7a3      	b.n	800518c <_printf_i+0x130>
 8005244:	2301      	movs	r3, #1
 8005246:	464a      	mov	r2, r9
 8005248:	4639      	mov	r1, r7
 800524a:	4630      	mov	r0, r6
 800524c:	47c0      	blx	r8
 800524e:	3001      	adds	r0, #1
 8005250:	d09a      	beq.n	8005188 <_printf_i+0x12c>
 8005252:	3501      	adds	r5, #1
 8005254:	68e3      	ldr	r3, [r4, #12]
 8005256:	9a03      	ldr	r2, [sp, #12]
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	42ab      	cmp	r3, r5
 800525c:	dcf2      	bgt.n	8005244 <_printf_i+0x1e8>
 800525e:	e7eb      	b.n	8005238 <_printf_i+0x1dc>
 8005260:	2500      	movs	r5, #0
 8005262:	f104 0919 	add.w	r9, r4, #25
 8005266:	e7f5      	b.n	8005254 <_printf_i+0x1f8>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1ac      	bne.n	80051c6 <_printf_i+0x16a>
 800526c:	7803      	ldrb	r3, [r0, #0]
 800526e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005272:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005276:	e76c      	b.n	8005152 <_printf_i+0xf6>
 8005278:	0800554d 	.word	0x0800554d
 800527c:	0800555e 	.word	0x0800555e

08005280 <memcpy>:
 8005280:	b510      	push	{r4, lr}
 8005282:	1e43      	subs	r3, r0, #1
 8005284:	440a      	add	r2, r1
 8005286:	4291      	cmp	r1, r2
 8005288:	d100      	bne.n	800528c <memcpy+0xc>
 800528a:	bd10      	pop	{r4, pc}
 800528c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005290:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005294:	e7f7      	b.n	8005286 <memcpy+0x6>

08005296 <memmove>:
 8005296:	4288      	cmp	r0, r1
 8005298:	b510      	push	{r4, lr}
 800529a:	eb01 0302 	add.w	r3, r1, r2
 800529e:	d807      	bhi.n	80052b0 <memmove+0x1a>
 80052a0:	1e42      	subs	r2, r0, #1
 80052a2:	4299      	cmp	r1, r3
 80052a4:	d00a      	beq.n	80052bc <memmove+0x26>
 80052a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80052ae:	e7f8      	b.n	80052a2 <memmove+0xc>
 80052b0:	4283      	cmp	r3, r0
 80052b2:	d9f5      	bls.n	80052a0 <memmove+0xa>
 80052b4:	1881      	adds	r1, r0, r2
 80052b6:	1ad2      	subs	r2, r2, r3
 80052b8:	42d3      	cmn	r3, r2
 80052ba:	d100      	bne.n	80052be <memmove+0x28>
 80052bc:	bd10      	pop	{r4, pc}
 80052be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80052c6:	e7f7      	b.n	80052b8 <memmove+0x22>

080052c8 <_free_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4605      	mov	r5, r0
 80052cc:	2900      	cmp	r1, #0
 80052ce:	d045      	beq.n	800535c <_free_r+0x94>
 80052d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d4:	1f0c      	subs	r4, r1, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bfb8      	it	lt
 80052da:	18e4      	addlt	r4, r4, r3
 80052dc:	f000 f8d2 	bl	8005484 <__malloc_lock>
 80052e0:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <_free_r+0x98>)
 80052e2:	6813      	ldr	r3, [r2, #0]
 80052e4:	4610      	mov	r0, r2
 80052e6:	b933      	cbnz	r3, 80052f6 <_free_r+0x2e>
 80052e8:	6063      	str	r3, [r4, #4]
 80052ea:	6014      	str	r4, [r2, #0]
 80052ec:	4628      	mov	r0, r5
 80052ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052f2:	f000 b8c8 	b.w	8005486 <__malloc_unlock>
 80052f6:	42a3      	cmp	r3, r4
 80052f8:	d90c      	bls.n	8005314 <_free_r+0x4c>
 80052fa:	6821      	ldr	r1, [r4, #0]
 80052fc:	1862      	adds	r2, r4, r1
 80052fe:	4293      	cmp	r3, r2
 8005300:	bf04      	itt	eq
 8005302:	681a      	ldreq	r2, [r3, #0]
 8005304:	685b      	ldreq	r3, [r3, #4]
 8005306:	6063      	str	r3, [r4, #4]
 8005308:	bf04      	itt	eq
 800530a:	1852      	addeq	r2, r2, r1
 800530c:	6022      	streq	r2, [r4, #0]
 800530e:	6004      	str	r4, [r0, #0]
 8005310:	e7ec      	b.n	80052ec <_free_r+0x24>
 8005312:	4613      	mov	r3, r2
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	b10a      	cbz	r2, 800531c <_free_r+0x54>
 8005318:	42a2      	cmp	r2, r4
 800531a:	d9fa      	bls.n	8005312 <_free_r+0x4a>
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	1858      	adds	r0, r3, r1
 8005320:	42a0      	cmp	r0, r4
 8005322:	d10b      	bne.n	800533c <_free_r+0x74>
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	4401      	add	r1, r0
 8005328:	1858      	adds	r0, r3, r1
 800532a:	4282      	cmp	r2, r0
 800532c:	6019      	str	r1, [r3, #0]
 800532e:	d1dd      	bne.n	80052ec <_free_r+0x24>
 8005330:	6810      	ldr	r0, [r2, #0]
 8005332:	6852      	ldr	r2, [r2, #4]
 8005334:	605a      	str	r2, [r3, #4]
 8005336:	4401      	add	r1, r0
 8005338:	6019      	str	r1, [r3, #0]
 800533a:	e7d7      	b.n	80052ec <_free_r+0x24>
 800533c:	d902      	bls.n	8005344 <_free_r+0x7c>
 800533e:	230c      	movs	r3, #12
 8005340:	602b      	str	r3, [r5, #0]
 8005342:	e7d3      	b.n	80052ec <_free_r+0x24>
 8005344:	6820      	ldr	r0, [r4, #0]
 8005346:	1821      	adds	r1, r4, r0
 8005348:	428a      	cmp	r2, r1
 800534a:	bf04      	itt	eq
 800534c:	6811      	ldreq	r1, [r2, #0]
 800534e:	6852      	ldreq	r2, [r2, #4]
 8005350:	6062      	str	r2, [r4, #4]
 8005352:	bf04      	itt	eq
 8005354:	1809      	addeq	r1, r1, r0
 8005356:	6021      	streq	r1, [r4, #0]
 8005358:	605c      	str	r4, [r3, #4]
 800535a:	e7c7      	b.n	80052ec <_free_r+0x24>
 800535c:	bd38      	pop	{r3, r4, r5, pc}
 800535e:	bf00      	nop
 8005360:	200004dc 	.word	0x200004dc

08005364 <_malloc_r>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	1ccd      	adds	r5, r1, #3
 8005368:	f025 0503 	bic.w	r5, r5, #3
 800536c:	3508      	adds	r5, #8
 800536e:	2d0c      	cmp	r5, #12
 8005370:	bf38      	it	cc
 8005372:	250c      	movcc	r5, #12
 8005374:	2d00      	cmp	r5, #0
 8005376:	4606      	mov	r6, r0
 8005378:	db01      	blt.n	800537e <_malloc_r+0x1a>
 800537a:	42a9      	cmp	r1, r5
 800537c:	d903      	bls.n	8005386 <_malloc_r+0x22>
 800537e:	230c      	movs	r3, #12
 8005380:	6033      	str	r3, [r6, #0]
 8005382:	2000      	movs	r0, #0
 8005384:	bd70      	pop	{r4, r5, r6, pc}
 8005386:	f000 f87d 	bl	8005484 <__malloc_lock>
 800538a:	4a21      	ldr	r2, [pc, #132]	; (8005410 <_malloc_r+0xac>)
 800538c:	6814      	ldr	r4, [r2, #0]
 800538e:	4621      	mov	r1, r4
 8005390:	b991      	cbnz	r1, 80053b8 <_malloc_r+0x54>
 8005392:	4c20      	ldr	r4, [pc, #128]	; (8005414 <_malloc_r+0xb0>)
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	b91b      	cbnz	r3, 80053a0 <_malloc_r+0x3c>
 8005398:	4630      	mov	r0, r6
 800539a:	f000 f863 	bl	8005464 <_sbrk_r>
 800539e:	6020      	str	r0, [r4, #0]
 80053a0:	4629      	mov	r1, r5
 80053a2:	4630      	mov	r0, r6
 80053a4:	f000 f85e 	bl	8005464 <_sbrk_r>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d124      	bne.n	80053f6 <_malloc_r+0x92>
 80053ac:	230c      	movs	r3, #12
 80053ae:	6033      	str	r3, [r6, #0]
 80053b0:	4630      	mov	r0, r6
 80053b2:	f000 f868 	bl	8005486 <__malloc_unlock>
 80053b6:	e7e4      	b.n	8005382 <_malloc_r+0x1e>
 80053b8:	680b      	ldr	r3, [r1, #0]
 80053ba:	1b5b      	subs	r3, r3, r5
 80053bc:	d418      	bmi.n	80053f0 <_malloc_r+0x8c>
 80053be:	2b0b      	cmp	r3, #11
 80053c0:	d90f      	bls.n	80053e2 <_malloc_r+0x7e>
 80053c2:	600b      	str	r3, [r1, #0]
 80053c4:	50cd      	str	r5, [r1, r3]
 80053c6:	18cc      	adds	r4, r1, r3
 80053c8:	4630      	mov	r0, r6
 80053ca:	f000 f85c 	bl	8005486 <__malloc_unlock>
 80053ce:	f104 000b 	add.w	r0, r4, #11
 80053d2:	1d23      	adds	r3, r4, #4
 80053d4:	f020 0007 	bic.w	r0, r0, #7
 80053d8:	1ac3      	subs	r3, r0, r3
 80053da:	d0d3      	beq.n	8005384 <_malloc_r+0x20>
 80053dc:	425a      	negs	r2, r3
 80053de:	50e2      	str	r2, [r4, r3]
 80053e0:	e7d0      	b.n	8005384 <_malloc_r+0x20>
 80053e2:	428c      	cmp	r4, r1
 80053e4:	684b      	ldr	r3, [r1, #4]
 80053e6:	bf16      	itet	ne
 80053e8:	6063      	strne	r3, [r4, #4]
 80053ea:	6013      	streq	r3, [r2, #0]
 80053ec:	460c      	movne	r4, r1
 80053ee:	e7eb      	b.n	80053c8 <_malloc_r+0x64>
 80053f0:	460c      	mov	r4, r1
 80053f2:	6849      	ldr	r1, [r1, #4]
 80053f4:	e7cc      	b.n	8005390 <_malloc_r+0x2c>
 80053f6:	1cc4      	adds	r4, r0, #3
 80053f8:	f024 0403 	bic.w	r4, r4, #3
 80053fc:	42a0      	cmp	r0, r4
 80053fe:	d005      	beq.n	800540c <_malloc_r+0xa8>
 8005400:	1a21      	subs	r1, r4, r0
 8005402:	4630      	mov	r0, r6
 8005404:	f000 f82e 	bl	8005464 <_sbrk_r>
 8005408:	3001      	adds	r0, #1
 800540a:	d0cf      	beq.n	80053ac <_malloc_r+0x48>
 800540c:	6025      	str	r5, [r4, #0]
 800540e:	e7db      	b.n	80053c8 <_malloc_r+0x64>
 8005410:	200004dc 	.word	0x200004dc
 8005414:	200004e0 	.word	0x200004e0

08005418 <_realloc_r>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	4607      	mov	r7, r0
 800541c:	4614      	mov	r4, r2
 800541e:	460e      	mov	r6, r1
 8005420:	b921      	cbnz	r1, 800542c <_realloc_r+0x14>
 8005422:	4611      	mov	r1, r2
 8005424:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005428:	f7ff bf9c 	b.w	8005364 <_malloc_r>
 800542c:	b922      	cbnz	r2, 8005438 <_realloc_r+0x20>
 800542e:	f7ff ff4b 	bl	80052c8 <_free_r>
 8005432:	4625      	mov	r5, r4
 8005434:	4628      	mov	r0, r5
 8005436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005438:	f000 f826 	bl	8005488 <_malloc_usable_size_r>
 800543c:	42a0      	cmp	r0, r4
 800543e:	d20f      	bcs.n	8005460 <_realloc_r+0x48>
 8005440:	4621      	mov	r1, r4
 8005442:	4638      	mov	r0, r7
 8005444:	f7ff ff8e 	bl	8005364 <_malloc_r>
 8005448:	4605      	mov	r5, r0
 800544a:	2800      	cmp	r0, #0
 800544c:	d0f2      	beq.n	8005434 <_realloc_r+0x1c>
 800544e:	4631      	mov	r1, r6
 8005450:	4622      	mov	r2, r4
 8005452:	f7ff ff15 	bl	8005280 <memcpy>
 8005456:	4631      	mov	r1, r6
 8005458:	4638      	mov	r0, r7
 800545a:	f7ff ff35 	bl	80052c8 <_free_r>
 800545e:	e7e9      	b.n	8005434 <_realloc_r+0x1c>
 8005460:	4635      	mov	r5, r6
 8005462:	e7e7      	b.n	8005434 <_realloc_r+0x1c>

08005464 <_sbrk_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4c06      	ldr	r4, [pc, #24]	; (8005480 <_sbrk_r+0x1c>)
 8005468:	2300      	movs	r3, #0
 800546a:	4605      	mov	r5, r0
 800546c:	4608      	mov	r0, r1
 800546e:	6023      	str	r3, [r4, #0]
 8005470:	f7ff fb4e 	bl	8004b10 <_sbrk>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_sbrk_r+0x1a>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	b103      	cbz	r3, 800547e <_sbrk_r+0x1a>
 800547c:	602b      	str	r3, [r5, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	20000678 	.word	0x20000678

08005484 <__malloc_lock>:
 8005484:	4770      	bx	lr

08005486 <__malloc_unlock>:
 8005486:	4770      	bx	lr

08005488 <_malloc_usable_size_r>:
 8005488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800548c:	1f18      	subs	r0, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	bfbc      	itt	lt
 8005492:	580b      	ldrlt	r3, [r1, r0]
 8005494:	18c0      	addlt	r0, r0, r3
 8005496:	4770      	bx	lr
 8005498:	20656854 	.word	0x20656854
 800549c:	6c707061 	.word	0x6c707061
 80054a0:	74616369 	.word	0x74616369
 80054a4:	206e6f69 	.word	0x206e6f69
 80054a8:	72207369 	.word	0x72207369
 80054ac:	696e6e75 	.word	0x696e6e75
 80054b0:	0a0d676e 	.word	0x0a0d676e
 80054b4:	00000000 	.word	0x00000000
 80054b8:	20656854 	.word	0x20656854
 80054bc:	74726175 	.word	0x74726175
 80054c0:	20544920 	.word	0x20544920
 80054c4:	72207369 	.word	0x72207369
 80054c8:	696e6e75 	.word	0x696e6e75
 80054cc:	0a0d676e 	.word	0x0a0d676e
 80054d0:	00000000 	.word	0x00000000
 80054d4:	43535953 	.word	0x43535953
 80054d8:	3a204b4c 	.word	0x3a204b4c
 80054dc:	646c2520 	.word	0x646c2520
 80054e0:	0a0d7a48 	.word	0x0a0d7a48
 80054e4:	00000000 	.word	0x00000000
 80054e8:	4b4c4348 	.word	0x4b4c4348
 80054ec:	3a202020 	.word	0x3a202020
 80054f0:	646c2520 	.word	0x646c2520
 80054f4:	0a0d7a48 	.word	0x0a0d7a48
 80054f8:	00000000 	.word	0x00000000
 80054fc:	4b4c4350 	.word	0x4b4c4350
 8005500:	3a202031 	.word	0x3a202031
 8005504:	646c2520 	.word	0x646c2520
 8005508:	0a0d7a48 	.word	0x0a0d7a48
 800550c:	00000000 	.word	0x00000000
 8005510:	4b4c4350 	.word	0x4b4c4350
 8005514:	3a202032 	.word	0x3a202032
 8005518:	646c2520 	.word	0x646c2520
 800551c:	0a0d7a48 	.word	0x0a0d7a48
 8005520:	00000000 	.word	0x00000000

08005524 <AHBPrescTable>:
	...
 800552c:	04030201 09080706                       ........

08005534 <APBPrescTable>:
 8005534:	00000000 04030201 2b302d23 6c680020     ........#-0+ .hl
 8005544:	6665004c 47464567 32313000 36353433     L.efgEFG.0123456
 8005554:	41393837 45444342 31300046 35343332     789ABCDEF.012345
 8005564:	39383736 64636261 00006665              6789abcdef..

08005570 <_init>:
 8005570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005572:	bf00      	nop
 8005574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005576:	bc08      	pop	{r3}
 8005578:	469e      	mov	lr, r3
 800557a:	4770      	bx	lr

0800557c <_fini>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	bf00      	nop
 8005580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005582:	bc08      	pop	{r3}
 8005584:	469e      	mov	lr, r3
 8005586:	4770      	bx	lr
