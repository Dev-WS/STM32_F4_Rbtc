
STM32_F4_Rbtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  08004330  08004330  00014330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08004340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000580  20000070  080043b0  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200005f0  08004930  00020070  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f06c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d7f  00000000  00000000  0002f10c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ed8  00000000  00000000  00030e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e10  00000000  00000000  00031d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003b3e  00000000  00000000  00032b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d9d5  00000000  00000000  000366b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ed1da  00000000  00000000  0004408b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  00131265  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000042ec  00000000  00000000  001312e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004318 	.word	0x08004318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004318 	.word	0x08004318

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_Init+0x34>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_Init+0x34>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_Init+0x34>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_Init+0x34>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f933 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	200f      	movs	r0, #15
 80005a4:	f000 f810 	bl	80005c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f000 f806 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023c00 	.word	0x40023c00

080005b8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x54>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x58>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f943 	bl	8000872 <HAL_SYSTICK_Config>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00e      	b.n	8000614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	d80a      	bhi.n	8000612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	2200      	movs	r2, #0
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f000 f90b 	bl	800081e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <HAL_InitTick+0x5c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
 8000610:	e000      	b.n	8000614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000008 	.word	0x20000008
 8000620:	20000004 	.word	0x20000004
 8000624:	20000000 	.word	0x20000000

08000628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x20>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_IncTick+0x24>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_IncTick+0x24>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000004 	.word	0x20000004
 800064c:	200004a4 	.word	0x200004a4

08000650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_GetTick+0x14>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200004a4 	.word	0x200004a4

08000668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <__NVIC_GetPriorityGrouping+0x18>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	f003 0307 	and.w	r3, r3, #7
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db0b      	blt.n	80006f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	f003 021f 	and.w	r2, r3, #31
 80006e4:	4907      	ldr	r1, [pc, #28]	; (8000704 <__NVIC_EnableIRQ+0x38>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	095b      	lsrs	r3, r3, #5
 80006ec:	2001      	movs	r0, #1
 80006ee:	fa00 f202 	lsl.w	r2, r0, r2
 80006f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	; (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	; (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
         );
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	; 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d4:	d301      	bcc.n	80007da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00f      	b.n	80007fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <SysTick_Config+0x40>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e2:	210f      	movs	r1, #15
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f7ff ff8e 	bl	8000708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <SysTick_Config+0x40>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <SysTick_Config+0x40>)
 80007f4:	2207      	movs	r2, #7
 80007f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	e000e010 	.word	0xe000e010

08000808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff29 	bl	8000668 <__NVIC_SetPriorityGrouping>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000830:	f7ff ff3e 	bl	80006b0 <__NVIC_GetPriorityGrouping>
 8000834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	6978      	ldr	r0, [r7, #20]
 800083c:	f7ff ff8e 	bl	800075c <NVIC_EncodePriority>
 8000840:	4602      	mov	r2, r0
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff5d 	bl	8000708 <__NVIC_SetPriority>
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff31 	bl	80006cc <__NVIC_EnableIRQ>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ffa2 	bl	80007c4 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800088e:	f000 f802 	bl	8000896 <HAL_SYSTICK_Callback>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
 80008be:	e16b      	b.n	8000b98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008c0:	2201      	movs	r2, #1
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	429a      	cmp	r2, r3
 80008da:	f040 815a 	bne.w	8000b92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d003      	beq.n	80008ee <HAL_GPIO_Init+0x4a>
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b12      	cmp	r3, #18
 80008ec:	d123      	bne.n	8000936 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	08da      	lsrs	r2, r3, #3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3208      	adds	r2, #8
 80008f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	220f      	movs	r2, #15
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4013      	ands	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	691a      	ldr	r2, [r3, #16]
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	f003 0307 	and.w	r3, r3, #7
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	4313      	orrs	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	08da      	lsrs	r2, r3, #3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3208      	adds	r2, #8
 8000930:	69b9      	ldr	r1, [r7, #24]
 8000932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	2203      	movs	r2, #3
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43db      	mvns	r3, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4013      	ands	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f003 0203 	and.w	r2, r3, #3
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	4313      	orrs	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d00b      	beq.n	800098a <HAL_GPIO_Init+0xe6>
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	2b02      	cmp	r3, #2
 8000978:	d007      	beq.n	800098a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800097e:	2b11      	cmp	r3, #17
 8000980:	d003      	beq.n	800098a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	2b12      	cmp	r3, #18
 8000988:	d130      	bne.n	80009ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	2203      	movs	r2, #3
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009c0:	2201      	movs	r2, #1
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	43db      	mvns	r3, r3
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4013      	ands	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	091b      	lsrs	r3, r3, #4
 80009d6:	f003 0201 	and.w	r2, r3, #1
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2203      	movs	r2, #3
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	4013      	ands	r3, r2
 8000a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 80b4 	beq.w	8000b92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b5f      	ldr	r3, [pc, #380]	; (8000bac <HAL_GPIO_Init+0x308>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a5e      	ldr	r2, [pc, #376]	; (8000bac <HAL_GPIO_Init+0x308>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b5c      	ldr	r3, [pc, #368]	; (8000bac <HAL_GPIO_Init+0x308>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a46:	4a5a      	ldr	r2, [pc, #360]	; (8000bb0 <HAL_GPIO_Init+0x30c>)
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4013      	ands	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a51      	ldr	r2, [pc, #324]	; (8000bb4 <HAL_GPIO_Init+0x310>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d02b      	beq.n	8000aca <HAL_GPIO_Init+0x226>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a50      	ldr	r2, [pc, #320]	; (8000bb8 <HAL_GPIO_Init+0x314>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d025      	beq.n	8000ac6 <HAL_GPIO_Init+0x222>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4f      	ldr	r2, [pc, #316]	; (8000bbc <HAL_GPIO_Init+0x318>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d01f      	beq.n	8000ac2 <HAL_GPIO_Init+0x21e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a4e      	ldr	r2, [pc, #312]	; (8000bc0 <HAL_GPIO_Init+0x31c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d019      	beq.n	8000abe <HAL_GPIO_Init+0x21a>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a4d      	ldr	r2, [pc, #308]	; (8000bc4 <HAL_GPIO_Init+0x320>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d013      	beq.n	8000aba <HAL_GPIO_Init+0x216>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4c      	ldr	r2, [pc, #304]	; (8000bc8 <HAL_GPIO_Init+0x324>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d00d      	beq.n	8000ab6 <HAL_GPIO_Init+0x212>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4b      	ldr	r2, [pc, #300]	; (8000bcc <HAL_GPIO_Init+0x328>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d007      	beq.n	8000ab2 <HAL_GPIO_Init+0x20e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4a      	ldr	r2, [pc, #296]	; (8000bd0 <HAL_GPIO_Init+0x32c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d101      	bne.n	8000aae <HAL_GPIO_Init+0x20a>
 8000aaa:	2307      	movs	r3, #7
 8000aac:	e00e      	b.n	8000acc <HAL_GPIO_Init+0x228>
 8000aae:	2308      	movs	r3, #8
 8000ab0:	e00c      	b.n	8000acc <HAL_GPIO_Init+0x228>
 8000ab2:	2306      	movs	r3, #6
 8000ab4:	e00a      	b.n	8000acc <HAL_GPIO_Init+0x228>
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	e008      	b.n	8000acc <HAL_GPIO_Init+0x228>
 8000aba:	2304      	movs	r3, #4
 8000abc:	e006      	b.n	8000acc <HAL_GPIO_Init+0x228>
 8000abe:	2303      	movs	r3, #3
 8000ac0:	e004      	b.n	8000acc <HAL_GPIO_Init+0x228>
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	e002      	b.n	8000acc <HAL_GPIO_Init+0x228>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <HAL_GPIO_Init+0x228>
 8000aca:	2300      	movs	r3, #0
 8000acc:	69fa      	ldr	r2, [r7, #28]
 8000ace:	f002 0203 	and.w	r2, r2, #3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4093      	lsls	r3, r2
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000adc:	4934      	ldr	r1, [pc, #208]	; (8000bb0 <HAL_GPIO_Init+0x30c>)
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aea:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <HAL_GPIO_Init+0x330>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	43db      	mvns	r3, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4013      	ands	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b0e:	4a31      	ldr	r2, [pc, #196]	; (8000bd4 <HAL_GPIO_Init+0x330>)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <HAL_GPIO_Init+0x330>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	4013      	ands	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b38:	4a26      	ldr	r2, [pc, #152]	; (8000bd4 <HAL_GPIO_Init+0x330>)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b3e:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <HAL_GPIO_Init+0x330>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b62:	4a1c      	ldr	r2, [pc, #112]	; (8000bd4 <HAL_GPIO_Init+0x330>)
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_GPIO_Init+0x330>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b8c:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <HAL_GPIO_Init+0x330>)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3301      	adds	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	2b0f      	cmp	r3, #15
 8000b9c:	f67f ae90 	bls.w	80008c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	3724      	adds	r7, #36	; 0x24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40013800 	.word	0x40013800
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40020800 	.word	0x40020800
 8000bc0:	40020c00 	.word	0x40020c00
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40021400 	.word	0x40021400
 8000bcc:	40021800 	.word	0x40021800
 8000bd0:	40021c00 	.word	0x40021c00
 8000bd4:	40013c00 	.word	0x40013c00

08000bd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	691a      	ldr	r2, [r3, #16]
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d002      	beq.n	8000bf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e001      	b.n	8000bfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	807b      	strh	r3, [r7, #2]
 8000c14:	4613      	mov	r3, r2
 8000c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c18:	787b      	ldrb	r3, [r7, #1]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c24:	e003      	b.n	8000c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	041a      	lsls	r2, r3, #16
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	619a      	str	r2, [r3, #24]
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e10f      	b.n	8000e6e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d106      	bne.n	8000c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f000 f912 	bl	8000e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2224      	movs	r2, #36	; 0x24
 8000c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0201 	bic.w	r2, r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c80:	f001 f934 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8000c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	4a7b      	ldr	r2, [pc, #492]	; (8000e78 <HAL_I2C_Init+0x23c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d807      	bhi.n	8000ca0 <HAL_I2C_Init+0x64>
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4a7a      	ldr	r2, [pc, #488]	; (8000e7c <HAL_I2C_Init+0x240>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	bf94      	ite	ls
 8000c98:	2301      	movls	r3, #1
 8000c9a:	2300      	movhi	r3, #0
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	e006      	b.n	8000cae <HAL_I2C_Init+0x72>
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4a77      	ldr	r2, [pc, #476]	; (8000e80 <HAL_I2C_Init+0x244>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	bf94      	ite	ls
 8000ca8:	2301      	movls	r3, #1
 8000caa:	2300      	movhi	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e0db      	b.n	8000e6e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4a72      	ldr	r2, [pc, #456]	; (8000e84 <HAL_I2C_Init+0x248>)
 8000cba:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbe:	0c9b      	lsrs	r3, r3, #18
 8000cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6a1b      	ldr	r3, [r3, #32]
 8000cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4a64      	ldr	r2, [pc, #400]	; (8000e78 <HAL_I2C_Init+0x23c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d802      	bhi.n	8000cf0 <HAL_I2C_Init+0xb4>
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	3301      	adds	r3, #1
 8000cee:	e009      	b.n	8000d04 <HAL_I2C_Init+0xc8>
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000cf6:	fb02 f303 	mul.w	r3, r2, r3
 8000cfa:	4a63      	ldr	r2, [pc, #396]	; (8000e88 <HAL_I2C_Init+0x24c>)
 8000cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000d00:	099b      	lsrs	r3, r3, #6
 8000d02:	3301      	adds	r3, #1
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	6812      	ldr	r2, [r2, #0]
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	4956      	ldr	r1, [pc, #344]	; (8000e78 <HAL_I2C_Init+0x23c>)
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d80d      	bhi.n	8000d40 <HAL_I2C_Init+0x104>
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	1e59      	subs	r1, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d32:	3301      	adds	r3, #1
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	bf38      	it	cc
 8000d3c:	2304      	movcc	r3, #4
 8000d3e:	e04f      	b.n	8000de0 <HAL_I2C_Init+0x1a4>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d111      	bne.n	8000d6c <HAL_I2C_Init+0x130>
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	1e58      	subs	r0, r3, #1
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6859      	ldr	r1, [r3, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	440b      	add	r3, r1
 8000d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bf0c      	ite	eq
 8000d64:	2301      	moveq	r3, #1
 8000d66:	2300      	movne	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	e012      	b.n	8000d92 <HAL_I2C_Init+0x156>
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	1e58      	subs	r0, r3, #1
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6859      	ldr	r1, [r3, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	0099      	lsls	r1, r3, #2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d82:	3301      	adds	r3, #1
 8000d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf0c      	ite	eq
 8000d8c:	2301      	moveq	r3, #1
 8000d8e:	2300      	movne	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_I2C_Init+0x15e>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e022      	b.n	8000de0 <HAL_I2C_Init+0x1a4>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10e      	bne.n	8000dc0 <HAL_I2C_Init+0x184>
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	1e58      	subs	r0, r3, #1
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6859      	ldr	r1, [r3, #4]
 8000daa:	460b      	mov	r3, r1
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	440b      	add	r3, r1
 8000db0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000db4:	3301      	adds	r3, #1
 8000db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dbe:	e00f      	b.n	8000de0 <HAL_I2C_Init+0x1a4>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	1e58      	subs	r0, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6859      	ldr	r1, [r3, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	0099      	lsls	r1, r3, #2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	6809      	ldr	r1, [r1, #0]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69da      	ldr	r2, [r3, #28]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a1b      	ldr	r3, [r3, #32]
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	430a      	orrs	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	6911      	ldr	r1, [r2, #16]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68d2      	ldr	r2, [r2, #12]
 8000e1a:	4311      	orrs	r1, r2
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	430b      	orrs	r3, r1
 8000e22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	695a      	ldr	r2, [r3, #20]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	431a      	orrs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0201 	orr.w	r2, r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2220      	movs	r2, #32
 8000e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	000186a0 	.word	0x000186a0
 8000e7c:	001e847f 	.word	0x001e847f
 8000e80:	003d08ff 	.word	0x003d08ff
 8000e84:	431bde83 	.word	0x431bde83
 8000e88:	10624dd3 	.word	0x10624dd3

08000e8c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	460b      	mov	r3, r1
 8000eae:	817b      	strh	r3, [r7, #10]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff fbcc 	bl	8000650 <HAL_GetTick>
 8000eb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b20      	cmp	r3, #32
 8000ec4:	f040 80e0 	bne.w	8001088 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2319      	movs	r3, #25
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4970      	ldr	r1, [pc, #448]	; (8001094 <HAL_I2C_Master_Transmit+0x1f4>)
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f000 fa7a 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e0d3      	b.n	800108a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <HAL_I2C_Master_Transmit+0x50>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e0cc      	b.n	800108a <HAL_I2C_Master_Transmit+0x1ea>
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d007      	beq.n	8000f16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f042 0201 	orr.w	r2, r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2221      	movs	r2, #33	; 0x21
 8000f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2210      	movs	r2, #16
 8000f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	893a      	ldrh	r2, [r7, #8]
 8000f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4a50      	ldr	r2, [pc, #320]	; (8001098 <HAL_I2C_Master_Transmit+0x1f8>)
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000f58:	8979      	ldrh	r1, [r7, #10]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	6a3a      	ldr	r2, [r7, #32]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f000 f9be 	bl	80012e0 <I2C_MasterRequestWrite>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e08d      	b.n	800108a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000f84:	e066      	b.n	8001054 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	6a39      	ldr	r1, [r7, #32]
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f000 faf4 	bl	8001578 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00d      	beq.n	8000fb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d107      	bne.n	8000fae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e06b      	b.n	800108a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d11b      	bne.n	8001028 <HAL_I2C_Master_Transmit+0x188>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d017      	beq.n	8001028 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	781a      	ldrb	r2, [r3, #0]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001012:	b29b      	uxth	r3, r3
 8001014:	3b01      	subs	r3, #1
 8001016:	b29a      	uxth	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001020:	3b01      	subs	r3, #1
 8001022:	b29a      	uxth	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	6a39      	ldr	r1, [r7, #32]
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f000 fae4 	bl	80015fa <I2C_WaitOnBTFFlagUntilTimeout>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00d      	beq.n	8001054 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	2b04      	cmp	r3, #4
 800103e:	d107      	bne.n	8001050 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800104e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e01a      	b.n	800108a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001058:	2b00      	cmp	r3, #0
 800105a:	d194      	bne.n	8000f86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800106a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2220      	movs	r2, #32
 8001070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	e000      	b.n	800108a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001088:	2302      	movs	r3, #2
  }
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	00100002 	.word	0x00100002
 8001098:	ffff0000 	.word	0xffff0000

0800109c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	460b      	mov	r3, r1
 80010aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff fad0 	bl	8000650 <HAL_GetTick>
 80010b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b20      	cmp	r3, #32
 80010c0:	f040 8105 	bne.w	80012ce <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2319      	movs	r3, #25
 80010ca:	2201      	movs	r2, #1
 80010cc:	4982      	ldr	r1, [pc, #520]	; (80012d8 <HAL_I2C_IsDeviceReady+0x23c>)
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 f97c 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80010da:	2302      	movs	r3, #2
 80010dc:	e0f8      	b.n	80012d0 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <HAL_I2C_IsDeviceReady+0x50>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e0f1      	b.n	80012d0 <HAL_I2C_IsDeviceReady+0x234>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d007      	beq.n	8001112 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0201 	orr.w	r2, r2, #1
 8001110:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001120:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2224      	movs	r2, #36	; 0x24
 8001126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4a6a      	ldr	r2, [pc, #424]	; (80012dc <HAL_I2C_IsDeviceReady+0x240>)
 8001134:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001144:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 f93a 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0b6      	b.n	80012d0 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001162:	897b      	ldrh	r3, [r7, #10]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001170:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001172:	f7ff fa6d 	bl	8000650 <HAL_GetTick>
 8001176:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b02      	cmp	r3, #2
 8001184:	bf0c      	ite	eq
 8001186:	2301      	moveq	r3, #1
 8001188:	2300      	movne	r3, #0
 800118a:	b2db      	uxtb	r3, r3
 800118c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800119c:	bf0c      	ite	eq
 800119e:	2301      	moveq	r3, #1
 80011a0:	2300      	movne	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80011a6:	e025      	b.n	80011f4 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80011a8:	f7ff fa52 	bl	8000650 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d302      	bcc.n	80011be <HAL_I2C_IsDeviceReady+0x122>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d103      	bne.n	80011c6 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	22a0      	movs	r2, #160	; 0xa0
 80011c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2ba0      	cmp	r3, #160	; 0xa0
 80011fe:	d005      	beq.n	800120c <HAL_I2C_IsDeviceReady+0x170>
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <HAL_I2C_IsDeviceReady+0x170>
 8001206:	7dbb      	ldrb	r3, [r7, #22]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0cd      	beq.n	80011a8 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2220      	movs	r2, #32
 8001210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b02      	cmp	r3, #2
 8001220:	d129      	bne.n	8001276 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001230:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2319      	movs	r3, #25
 800124e:	2201      	movs	r2, #1
 8001250:	4921      	ldr	r1, [pc, #132]	; (80012d8 <HAL_I2C_IsDeviceReady+0x23c>)
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f000 f8ba 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e036      	b.n	80012d0 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2220      	movs	r2, #32
 8001266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e02c      	b.n	80012d0 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001284:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800128e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2319      	movs	r3, #25
 8001296:	2201      	movs	r2, #1
 8001298:	490f      	ldr	r1, [pc, #60]	; (80012d8 <HAL_I2C_IsDeviceReady+0x23c>)
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 f896 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e012      	b.n	80012d0 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f4ff af3e 	bcc.w	8001136 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2220      	movs	r2, #32
 80012be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80012ce:	2302      	movs	r3, #2
  }
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	00100002 	.word	0x00100002
 80012dc:	ffff0000 	.word	0xffff0000

080012e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	460b      	mov	r3, r1
 80012ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d006      	beq.n	800130a <I2C_MasterRequestWrite+0x2a>
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d003      	beq.n	800130a <I2C_MasterRequestWrite+0x2a>
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001308:	d108      	bne.n	800131c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	e00b      	b.n	8001334 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	2b12      	cmp	r3, #18
 8001322:	d107      	bne.n	8001334 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001332:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 f843 	bl	80013cc <I2C_WaitOnFlagUntilTimeout>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e035      	b.n	80013bc <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001358:	d108      	bne.n	800136c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800135a:	897b      	ldrh	r3, [r7, #10]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001368:	611a      	str	r2, [r3, #16]
 800136a:	e01b      	b.n	80013a4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800136c:	897b      	ldrh	r3, [r7, #10]
 800136e:	11db      	asrs	r3, r3, #7
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f003 0306 	and.w	r3, r3, #6
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f063 030f 	orn	r3, r3, #15
 800137c:	b2da      	uxtb	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	490e      	ldr	r1, [pc, #56]	; (80013c4 <I2C_MasterRequestWrite+0xe4>)
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 f875 	bl	800147a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e010      	b.n	80013bc <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800139a:	897b      	ldrh	r3, [r7, #10]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <I2C_MasterRequestWrite+0xe8>)
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 f865 	bl	800147a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	00010008 	.word	0x00010008
 80013c8:	00010002 	.word	0x00010002

080013cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013dc:	e025      	b.n	800142a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d021      	beq.n	800142a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013e6:	f7ff f933 	bl	8000650 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d302      	bcc.n	80013fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d116      	bne.n	800142a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2220      	movs	r2, #32
 8001406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f043 0220 	orr.w	r2, r3, #32
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e023      	b.n	8001472 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	0c1b      	lsrs	r3, r3, #16
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b01      	cmp	r3, #1
 8001432:	d10d      	bne.n	8001450 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4013      	ands	r3, r2
 8001440:	b29b      	uxth	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	bf0c      	ite	eq
 8001446:	2301      	moveq	r3, #1
 8001448:	2300      	movne	r3, #0
 800144a:	b2db      	uxtb	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	e00c      	b.n	800146a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4013      	ands	r3, r2
 800145c:	b29b      	uxth	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	bf0c      	ite	eq
 8001462:	2301      	moveq	r3, #1
 8001464:	2300      	movne	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	429a      	cmp	r2, r3
 800146e:	d0b6      	beq.n	80013de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001488:	e051      	b.n	800152e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001498:	d123      	bne.n	80014e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2220      	movs	r2, #32
 80014be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f043 0204 	orr.w	r2, r3, #4
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e046      	b.n	8001570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e8:	d021      	beq.n	800152e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ea:	f7ff f8b1 	bl	8000650 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d302      	bcc.n	8001500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d116      	bne.n	800152e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2220      	movs	r2, #32
 800150a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f043 0220 	orr.w	r2, r3, #32
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e020      	b.n	8001570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	0c1b      	lsrs	r3, r3, #16
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d10c      	bne.n	8001552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4013      	ands	r3, r2
 8001544:	b29b      	uxth	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf14      	ite	ne
 800154a:	2301      	movne	r3, #1
 800154c:	2300      	moveq	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	e00b      	b.n	800156a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	43da      	mvns	r2, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	4013      	ands	r3, r2
 800155e:	b29b      	uxth	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf14      	ite	ne
 8001564:	2301      	movne	r3, #1
 8001566:	2300      	moveq	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d18d      	bne.n	800148a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001584:	e02d      	b.n	80015e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f878 	bl	800167c <I2C_IsAcknowledgeFailed>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e02d      	b.n	80015f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159c:	d021      	beq.n	80015e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800159e:	f7ff f857 	bl	8000650 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d302      	bcc.n	80015b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d116      	bne.n	80015e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f043 0220 	orr.w	r2, r3, #32
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e007      	b.n	80015f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ec:	2b80      	cmp	r3, #128	; 0x80
 80015ee:	d1ca      	bne.n	8001586 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001606:	e02d      	b.n	8001664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f837 	bl	800167c <I2C_IsAcknowledgeFailed>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e02d      	b.n	8001674 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161e:	d021      	beq.n	8001664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001620:	f7ff f816 	bl	8000650 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	429a      	cmp	r2, r3
 800162e:	d302      	bcc.n	8001636 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d116      	bne.n	8001664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2220      	movs	r2, #32
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f043 0220 	orr.w	r2, r3, #32
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e007      	b.n	8001674 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b04      	cmp	r3, #4
 8001670:	d1ca      	bne.n	8001608 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001692:	d11b      	bne.n	80016cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800169c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2220      	movs	r2, #32
 80016a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f043 0204 	orr.w	r2, r3, #4
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e000      	b.n	80016ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e22d      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d075      	beq.n	80017e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016fa:	4ba3      	ldr	r3, [pc, #652]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b04      	cmp	r3, #4
 8001704:	d00c      	beq.n	8001720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001706:	4ba0      	ldr	r3, [pc, #640]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800170e:	2b08      	cmp	r3, #8
 8001710:	d112      	bne.n	8001738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001712:	4b9d      	ldr	r3, [pc, #628]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800171e:	d10b      	bne.n	8001738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001720:	4b99      	ldr	r3, [pc, #612]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d05b      	beq.n	80017e4 <HAL_RCC_OscConfig+0x108>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d157      	bne.n	80017e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e208      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d106      	bne.n	8001750 <HAL_RCC_OscConfig+0x74>
 8001742:	4b91      	ldr	r3, [pc, #580]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a90      	ldr	r2, [pc, #576]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e01d      	b.n	800178c <HAL_RCC_OscConfig+0xb0>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x98>
 800175a:	4b8b      	ldr	r3, [pc, #556]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a8a      	ldr	r2, [pc, #552]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b88      	ldr	r3, [pc, #544]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a87      	ldr	r2, [pc, #540]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0xb0>
 8001774:	4b84      	ldr	r3, [pc, #528]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a83      	ldr	r2, [pc, #524]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800177a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b81      	ldr	r3, [pc, #516]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a80      	ldr	r2, [pc, #512]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7fe ff5c 	bl	8000650 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800179c:	f7fe ff58 	bl	8000650 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1cd      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b76      	ldr	r3, [pc, #472]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0xc0>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7fe ff48 	bl	8000650 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c4:	f7fe ff44 	bl	8000650 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e1b9      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d6:	4b6c      	ldr	r3, [pc, #432]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0xe8>
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d063      	beq.n	80018ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017f2:	4b65      	ldr	r3, [pc, #404]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fe:	4b62      	ldr	r3, [pc, #392]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001806:	2b08      	cmp	r3, #8
 8001808:	d11c      	bne.n	8001844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180a:	4b5f      	ldr	r3, [pc, #380]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d116      	bne.n	8001844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_RCC_OscConfig+0x152>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e18d      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b56      	ldr	r3, [pc, #344]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4952      	ldr	r1, [pc, #328]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	e03a      	b.n	80018ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184c:	4b4f      	ldr	r3, [pc, #316]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7fe fefd 	bl	8000650 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800185a:	f7fe fef9 	bl	8000650 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e16e      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186c:	4b46      	ldr	r3, [pc, #280]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001878:	4b43      	ldr	r3, [pc, #268]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4940      	ldr	r1, [pc, #256]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188e:	4b3f      	ldr	r3, [pc, #252]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7fe fedc 	bl	8000650 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189c:	f7fe fed8 	bl	8000650 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e14d      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	4b36      	ldr	r3, [pc, #216]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d030      	beq.n	8001928 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d016      	beq.n	80018fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_RCC_OscConfig+0x2b4>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7fe febc 	bl	8000650 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018dc:	f7fe feb8 	bl	8000650 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e12d      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x200>
 80018fa:	e015      	b.n	8001928 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_RCC_OscConfig+0x2b4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7fe fea5 	bl	8000650 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190a:	f7fe fea1 	bl	8000650 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e116      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800191e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80a0 	beq.w	8001a76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10f      	bne.n	8001966 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001962:	2301      	movs	r3, #1
 8001964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_OscConfig+0x2b8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d121      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_RCC_OscConfig+0x2b8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_RCC_OscConfig+0x2b8>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197e:	f7fe fe67 	bl	8000650 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	e011      	b.n	80019aa <HAL_RCC_OscConfig+0x2ce>
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	42470000 	.word	0x42470000
 8001990:	42470e80 	.word	0x42470e80
 8001994:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001998:	f7fe fe5a 	bl	8000650 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e0cf      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <HAL_RCC_OscConfig+0x478>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d106      	bne.n	80019cc <HAL_RCC_OscConfig+0x2f0>
 80019be:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c2:	4a65      	ldr	r2, [pc, #404]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ca:	e01c      	b.n	8001a06 <HAL_RCC_OscConfig+0x32a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d10c      	bne.n	80019ee <HAL_RCC_OscConfig+0x312>
 80019d4:	4b60      	ldr	r3, [pc, #384]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d8:	4a5f      	ldr	r2, [pc, #380]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6713      	str	r3, [r2, #112]	; 0x70
 80019e0:	4b5d      	ldr	r3, [pc, #372]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e4:	4a5c      	ldr	r2, [pc, #368]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6713      	str	r3, [r2, #112]	; 0x70
 80019ec:	e00b      	b.n	8001a06 <HAL_RCC_OscConfig+0x32a>
 80019ee:	4b5a      	ldr	r3, [pc, #360]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	4a59      	ldr	r2, [pc, #356]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	6713      	str	r3, [r2, #112]	; 0x70
 80019fa:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d015      	beq.n	8001a3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0e:	f7fe fe1f 	bl	8000650 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	e00a      	b.n	8001a2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f7fe fe1b 	bl	8000650 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e08e      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2c:	4b4a      	ldr	r3, [pc, #296]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ee      	beq.n	8001a16 <HAL_RCC_OscConfig+0x33a>
 8001a38:	e014      	b.n	8001a64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7fe fe09 	bl	8000650 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a40:	e00a      	b.n	8001a58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a42:	f7fe fe05 	bl	8000650 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e078      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a58:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ee      	bne.n	8001a42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d105      	bne.n	8001a76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6a:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a3a      	ldr	r2, [pc, #232]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 8001a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d064      	beq.n	8001b48 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a7e:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d05c      	beq.n	8001b44 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d141      	bne.n	8001b16 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <HAL_RCC_OscConfig+0x480>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7fe fdda 	bl	8000650 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7fe fdd6 	bl	8000650 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e04b      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69da      	ldr	r2, [r3, #28]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	019b      	lsls	r3, r3, #6
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	085b      	lsrs	r3, r3, #1
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	491d      	ldr	r1, [pc, #116]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_RCC_OscConfig+0x480>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7fe fdaf 	bl	8000650 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af6:	f7fe fdab 	bl	8000650 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e020      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x41a>
 8001b14:	e018      	b.n	8001b48 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_RCC_OscConfig+0x480>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7fe fd98 	bl	8000650 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b24:	f7fe fd94 	bl	8000650 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e009      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_RCC_OscConfig+0x47c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x448>
 8001b42:	e001      	b.n	8001b48 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40007000 	.word	0x40007000
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	42470060 	.word	0x42470060

08001b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0ca      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b74:	4b67      	ldr	r3, [pc, #412]	; (8001d14 <HAL_RCC_ClockConfig+0x1b4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d90c      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b64      	ldr	r3, [pc, #400]	; (8001d14 <HAL_RCC_ClockConfig+0x1b4>)
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b62      	ldr	r3, [pc, #392]	; (8001d14 <HAL_RCC_ClockConfig+0x1b4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0b6      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d020      	beq.n	8001bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb4:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4a57      	ldr	r2, [pc, #348]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bcc:	4b52      	ldr	r3, [pc, #328]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b4f      	ldr	r3, [pc, #316]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	494c      	ldr	r1, [pc, #304]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d044      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b46      	ldr	r3, [pc, #280]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d119      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e07d      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e06d      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	4b3a      	ldr	r3, [pc, #232]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e065      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3e:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 0203 	bic.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4933      	ldr	r1, [pc, #204]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c50:	f7fe fcfe 	bl	8000650 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f7fe fcfa 	bl	8000650 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e04d      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 020c 	and.w	r2, r3, #12
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d1eb      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_RCC_ClockConfig+0x1b4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d20c      	bcs.n	8001ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_RCC_ClockConfig+0x1b4>)
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <HAL_RCC_ClockConfig+0x1b4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e030      	b.n	8001d0a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4915      	ldr	r1, [pc, #84]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d009      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	490d      	ldr	r1, [pc, #52]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ce6:	f000 f81d 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8001cea:	4601      	mov	r1, r0
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_RCC_ClockConfig+0x1b8>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	5cd3      	ldrb	r3, [r2, r3]
 8001cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d02:	200f      	movs	r0, #15
 8001d04:	f7fe fc60 	bl	80005c8 <HAL_InitTick>

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023c00 	.word	0x40023c00
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	080042cc 	.word	0x080042cc
 8001d20:	20000008 	.word	0x20000008

08001d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d3a:	4b63      	ldr	r3, [pc, #396]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d007      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x32>
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d008      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x38>
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 80b4 	bne.w	8001eb8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d50:	4b5e      	ldr	r3, [pc, #376]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d52:	60bb      	str	r3, [r7, #8]
       break;
 8001d54:	e0b3      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d56:	4b5e      	ldr	r3, [pc, #376]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001d58:	60bb      	str	r3, [r7, #8]
      break;
 8001d5a:	e0b0      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d5c:	4b5a      	ldr	r3, [pc, #360]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d66:	4b58      	ldr	r3, [pc, #352]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d04a      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d72:	4b55      	ldr	r3, [pc, #340]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	099b      	lsrs	r3, r3, #6
 8001d78:	f04f 0400 	mov.w	r4, #0
 8001d7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	ea03 0501 	and.w	r5, r3, r1
 8001d88:	ea04 0602 	and.w	r6, r4, r2
 8001d8c:	4629      	mov	r1, r5
 8001d8e:	4632      	mov	r2, r6
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	f04f 0400 	mov.w	r4, #0
 8001d98:	0154      	lsls	r4, r2, #5
 8001d9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d9e:	014b      	lsls	r3, r1, #5
 8001da0:	4619      	mov	r1, r3
 8001da2:	4622      	mov	r2, r4
 8001da4:	1b49      	subs	r1, r1, r5
 8001da6:	eb62 0206 	sbc.w	r2, r2, r6
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	f04f 0400 	mov.w	r4, #0
 8001db2:	0194      	lsls	r4, r2, #6
 8001db4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001db8:	018b      	lsls	r3, r1, #6
 8001dba:	1a5b      	subs	r3, r3, r1
 8001dbc:	eb64 0402 	sbc.w	r4, r4, r2
 8001dc0:	f04f 0100 	mov.w	r1, #0
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	00e2      	lsls	r2, r4, #3
 8001dca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dce:	00d9      	lsls	r1, r3, #3
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4614      	mov	r4, r2
 8001dd4:	195b      	adds	r3, r3, r5
 8001dd6:	eb44 0406 	adc.w	r4, r4, r6
 8001dda:	f04f 0100 	mov.w	r1, #0
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	0262      	lsls	r2, r4, #9
 8001de4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001de8:	0259      	lsls	r1, r3, #9
 8001dea:	460b      	mov	r3, r1
 8001dec:	4614      	mov	r4, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	4621      	mov	r1, r4
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f04f 0400 	mov.w	r4, #0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	f7fe fa40 	bl	8000280 <__aeabi_uldivmod>
 8001e00:	4603      	mov	r3, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	e049      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e08:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	f04f 0400 	mov.w	r4, #0
 8001e12:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	ea03 0501 	and.w	r5, r3, r1
 8001e1e:	ea04 0602 	and.w	r6, r4, r2
 8001e22:	4629      	mov	r1, r5
 8001e24:	4632      	mov	r2, r6
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	f04f 0400 	mov.w	r4, #0
 8001e2e:	0154      	lsls	r4, r2, #5
 8001e30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e34:	014b      	lsls	r3, r1, #5
 8001e36:	4619      	mov	r1, r3
 8001e38:	4622      	mov	r2, r4
 8001e3a:	1b49      	subs	r1, r1, r5
 8001e3c:	eb62 0206 	sbc.w	r2, r2, r6
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	f04f 0400 	mov.w	r4, #0
 8001e48:	0194      	lsls	r4, r2, #6
 8001e4a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e4e:	018b      	lsls	r3, r1, #6
 8001e50:	1a5b      	subs	r3, r3, r1
 8001e52:	eb64 0402 	sbc.w	r4, r4, r2
 8001e56:	f04f 0100 	mov.w	r1, #0
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	00e2      	lsls	r2, r4, #3
 8001e60:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e64:	00d9      	lsls	r1, r3, #3
 8001e66:	460b      	mov	r3, r1
 8001e68:	4614      	mov	r4, r2
 8001e6a:	195b      	adds	r3, r3, r5
 8001e6c:	eb44 0406 	adc.w	r4, r4, r6
 8001e70:	f04f 0100 	mov.w	r1, #0
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	02a2      	lsls	r2, r4, #10
 8001e7a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e7e:	0299      	lsls	r1, r3, #10
 8001e80:	460b      	mov	r3, r1
 8001e82:	4614      	mov	r4, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	4621      	mov	r1, r4
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f04f 0400 	mov.w	r4, #0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4623      	mov	r3, r4
 8001e92:	f7fe f9f5 	bl	8000280 <__aeabi_uldivmod>
 8001e96:	4603      	mov	r3, r0
 8001e98:	460c      	mov	r4, r1
 8001e9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb4:	60bb      	str	r3, [r7, #8]
      break;
 8001eb6:	e002      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001eba:	60bb      	str	r3, [r7, #8]
      break;
 8001ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	00f42400 	.word	0x00f42400
 8001ed0:	007a1200 	.word	0x007a1200

08001ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000008 	.word	0x20000008

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ef0:	f7ff fff0 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4601      	mov	r1, r0
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0a9b      	lsrs	r3, r3, #10
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	080042dc 	.word	0x080042dc

08001f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f18:	f7ff ffdc 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	0b5b      	lsrs	r3, r3, #13
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	080042dc 	.word	0x080042dc

08001f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e01d      	b.n	8001f8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f815 	bl	8001f92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3304      	adds	r3, #4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f000 faa0 	bl	80024c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b06      	cmp	r3, #6
 8001fce:	d007      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e01d      	b.n	800203c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d106      	bne.n	800201a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f815 	bl	8002044 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2202      	movs	r2, #2
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3304      	adds	r3, #4
 800202a:	4619      	mov	r1, r3
 800202c:	4610      	mov	r0, r2
 800202e:	f000 fa47 	bl	80024c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2201      	movs	r2, #1
 8002068:	6839      	ldr	r1, [r7, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fc78 	bl	8002960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a15      	ldr	r2, [pc, #84]	; (80020cc <HAL_TIM_PWM_Start+0x74>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d004      	beq.n	8002084 <HAL_TIM_PWM_Start+0x2c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <HAL_TIM_PWM_Start+0x78>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_TIM_PWM_Start+0x30>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_TIM_PWM_Start+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b06      	cmp	r3, #6
 80020ae:	d007      	beq.n	80020c0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40010400 	.word	0x40010400

080020d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d122      	bne.n	8002130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d11b      	bne.n	8002130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0202 	mvn.w	r2, #2
 8002100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f9b4 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 800211c:	e005      	b.n	800212a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f9a6 	bl	8002470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f9b7 	bl	8002498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b04      	cmp	r3, #4
 800213c:	d122      	bne.n	8002184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b04      	cmp	r3, #4
 800214a:	d11b      	bne.n	8002184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0204 	mvn.w	r2, #4
 8002154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2202      	movs	r2, #2
 800215a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f98a 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 8002170:	e005      	b.n	800217e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f97c 	bl	8002470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f98d 	bl	8002498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b08      	cmp	r3, #8
 8002190:	d122      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b08      	cmp	r3, #8
 800219e:	d11b      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0208 	mvn.w	r2, #8
 80021a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2204      	movs	r2, #4
 80021ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f960 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 80021c4:	e005      	b.n	80021d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f952 	bl	8002470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f963 	bl	8002498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d122      	bne.n	800222c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b10      	cmp	r3, #16
 80021f2:	d11b      	bne.n	800222c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0210 	mvn.w	r2, #16
 80021fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2208      	movs	r2, #8
 8002202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f936 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 8002218:	e005      	b.n	8002226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f928 	bl	8002470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f939 	bl	8002498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d10e      	bne.n	8002258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d107      	bne.n	8002258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0201 	mvn.w	r2, #1
 8002250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f001 f808 	bl	8003268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002262:	2b80      	cmp	r3, #128	; 0x80
 8002264:	d10e      	bne.n	8002284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002270:	2b80      	cmp	r3, #128	; 0x80
 8002272:	d107      	bne.n	8002284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800227c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fb9d 	bl	80029be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b40      	cmp	r3, #64	; 0x40
 8002290:	d10e      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229c:	2b40      	cmp	r3, #64	; 0x40
 800229e:	d107      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f8fe 	bl	80024ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d10e      	bne.n	80022dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d107      	bne.n	80022dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0220 	mvn.w	r2, #32
 80022d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fb67 	bl	80029aa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e0b4      	b.n	8002468 <HAL_TIM_PWM_ConfigChannel+0x184>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2202      	movs	r2, #2
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0c      	cmp	r3, #12
 8002312:	f200 809f 	bhi.w	8002454 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002316:	a201      	add	r2, pc, #4	; (adr r2, 800231c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231c:	08002351 	.word	0x08002351
 8002320:	08002455 	.word	0x08002455
 8002324:	08002455 	.word	0x08002455
 8002328:	08002455 	.word	0x08002455
 800232c:	08002391 	.word	0x08002391
 8002330:	08002455 	.word	0x08002455
 8002334:	08002455 	.word	0x08002455
 8002338:	08002455 	.word	0x08002455
 800233c:	080023d3 	.word	0x080023d3
 8002340:	08002455 	.word	0x08002455
 8002344:	08002455 	.word	0x08002455
 8002348:	08002455 	.word	0x08002455
 800234c:	08002413 	.word	0x08002413
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f952 	bl	8002600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0208 	orr.w	r2, r2, #8
 800236a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0204 	bic.w	r2, r2, #4
 800237a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6999      	ldr	r1, [r3, #24]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	619a      	str	r2, [r3, #24]
      break;
 800238e:	e062      	b.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f9a2 	bl	80026e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6999      	ldr	r1, [r3, #24]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	021a      	lsls	r2, r3, #8
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	619a      	str	r2, [r3, #24]
      break;
 80023d0:	e041      	b.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f9f7 	bl	80027cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0208 	orr.w	r2, r2, #8
 80023ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69da      	ldr	r2, [r3, #28]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0204 	bic.w	r2, r2, #4
 80023fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69d9      	ldr	r1, [r3, #28]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	61da      	str	r2, [r3, #28]
      break;
 8002410:	e021      	b.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fa4b 	bl	80028b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69da      	ldr	r2, [r3, #28]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800242c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69da      	ldr	r2, [r3, #28]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69d9      	ldr	r1, [r3, #28]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	021a      	lsls	r2, r3, #8
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	61da      	str	r2, [r3, #28]
      break;
 8002452:	e000      	b.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002454:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a40      	ldr	r2, [pc, #256]	; (80025d4 <TIM_Base_SetConfig+0x114>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d013      	beq.n	8002500 <TIM_Base_SetConfig+0x40>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024de:	d00f      	beq.n	8002500 <TIM_Base_SetConfig+0x40>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a3d      	ldr	r2, [pc, #244]	; (80025d8 <TIM_Base_SetConfig+0x118>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00b      	beq.n	8002500 <TIM_Base_SetConfig+0x40>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a3c      	ldr	r2, [pc, #240]	; (80025dc <TIM_Base_SetConfig+0x11c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d007      	beq.n	8002500 <TIM_Base_SetConfig+0x40>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a3b      	ldr	r2, [pc, #236]	; (80025e0 <TIM_Base_SetConfig+0x120>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d003      	beq.n	8002500 <TIM_Base_SetConfig+0x40>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a3a      	ldr	r2, [pc, #232]	; (80025e4 <TIM_Base_SetConfig+0x124>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d108      	bne.n	8002512 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a2f      	ldr	r2, [pc, #188]	; (80025d4 <TIM_Base_SetConfig+0x114>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d02b      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d027      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a2c      	ldr	r2, [pc, #176]	; (80025d8 <TIM_Base_SetConfig+0x118>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d023      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a2b      	ldr	r2, [pc, #172]	; (80025dc <TIM_Base_SetConfig+0x11c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01f      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a2a      	ldr	r2, [pc, #168]	; (80025e0 <TIM_Base_SetConfig+0x120>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d01b      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a29      	ldr	r2, [pc, #164]	; (80025e4 <TIM_Base_SetConfig+0x124>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d017      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a28      	ldr	r2, [pc, #160]	; (80025e8 <TIM_Base_SetConfig+0x128>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a27      	ldr	r2, [pc, #156]	; (80025ec <TIM_Base_SetConfig+0x12c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00f      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <TIM_Base_SetConfig+0x130>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00b      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a25      	ldr	r2, [pc, #148]	; (80025f4 <TIM_Base_SetConfig+0x134>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a24      	ldr	r2, [pc, #144]	; (80025f8 <TIM_Base_SetConfig+0x138>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d003      	beq.n	8002572 <TIM_Base_SetConfig+0xb2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a23      	ldr	r2, [pc, #140]	; (80025fc <TIM_Base_SetConfig+0x13c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d108      	bne.n	8002584 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <TIM_Base_SetConfig+0x114>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d003      	beq.n	80025b8 <TIM_Base_SetConfig+0xf8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <TIM_Base_SetConfig+0x124>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d103      	bne.n	80025c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	615a      	str	r2, [r3, #20]
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40010000 	.word	0x40010000
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40000800 	.word	0x40000800
 80025e0:	40000c00 	.word	0x40000c00
 80025e4:	40010400 	.word	0x40010400
 80025e8:	40014000 	.word	0x40014000
 80025ec:	40014400 	.word	0x40014400
 80025f0:	40014800 	.word	0x40014800
 80025f4:	40001800 	.word	0x40001800
 80025f8:	40001c00 	.word	0x40001c00
 80025fc:	40002000 	.word	0x40002000

08002600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	f023 0201 	bic.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0303 	bic.w	r3, r3, #3
 8002636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f023 0302 	bic.w	r3, r3, #2
 8002648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a20      	ldr	r2, [pc, #128]	; (80026d8 <TIM_OC1_SetConfig+0xd8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d003      	beq.n	8002664 <TIM_OC1_SetConfig+0x64>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a1f      	ldr	r2, [pc, #124]	; (80026dc <TIM_OC1_SetConfig+0xdc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d10c      	bne.n	800267e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f023 0308 	bic.w	r3, r3, #8
 800266a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a15      	ldr	r2, [pc, #84]	; (80026d8 <TIM_OC1_SetConfig+0xd8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d003      	beq.n	800268e <TIM_OC1_SetConfig+0x8e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a14      	ldr	r2, [pc, #80]	; (80026dc <TIM_OC1_SetConfig+0xdc>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d111      	bne.n	80026b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800269c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	621a      	str	r2, [r3, #32]
}
 80026cc:	bf00      	nop
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40010000 	.word	0x40010000
 80026dc:	40010400 	.word	0x40010400

080026e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	f023 0210 	bic.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800270e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4313      	orrs	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f023 0320 	bic.w	r3, r3, #32
 800272a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <TIM_OC2_SetConfig+0xe4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d003      	beq.n	8002748 <TIM_OC2_SetConfig+0x68>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <TIM_OC2_SetConfig+0xe8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d10d      	bne.n	8002764 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800274e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002762:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <TIM_OC2_SetConfig+0xe4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d003      	beq.n	8002774 <TIM_OC2_SetConfig+0x94>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <TIM_OC2_SetConfig+0xe8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d113      	bne.n	800279c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800277a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	621a      	str	r2, [r3, #32]
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40010000 	.word	0x40010000
 80027c8:	40010400 	.word	0x40010400

080027cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0303 	bic.w	r3, r3, #3
 8002802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a21      	ldr	r2, [pc, #132]	; (80028ac <TIM_OC3_SetConfig+0xe0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d003      	beq.n	8002832 <TIM_OC3_SetConfig+0x66>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a20      	ldr	r2, [pc, #128]	; (80028b0 <TIM_OC3_SetConfig+0xe4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10d      	bne.n	800284e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	021b      	lsls	r3, r3, #8
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800284c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a16      	ldr	r2, [pc, #88]	; (80028ac <TIM_OC3_SetConfig+0xe0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d003      	beq.n	800285e <TIM_OC3_SetConfig+0x92>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <TIM_OC3_SetConfig+0xe4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d113      	bne.n	8002886 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800286c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	621a      	str	r2, [r3, #32]
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40010000 	.word	0x40010000
 80028b0:	40010400 	.word	0x40010400

080028b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	031b      	lsls	r3, r3, #12
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <TIM_OC4_SetConfig+0xa4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d003      	beq.n	800291c <TIM_OC4_SetConfig+0x68>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a11      	ldr	r2, [pc, #68]	; (800295c <TIM_OC4_SetConfig+0xa8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d109      	bne.n	8002930 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002922:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	019b      	lsls	r3, r3, #6
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	621a      	str	r2, [r3, #32]
}
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40010000 	.word	0x40010000
 800295c:	40010400 	.word	0x40010400

08002960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	2201      	movs	r2, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a1a      	ldr	r2, [r3, #32]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	43db      	mvns	r3, r3
 8002982:	401a      	ands	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a1a      	ldr	r2, [r3, #32]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	431a      	orrs	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	621a      	str	r2, [r3, #32]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e03f      	b.n	8002a64 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f837 	bl	8002a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2224      	movs	r2, #36	; 0x24
 8002a02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a14:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f916 	bl	8002c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a3a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	f040 8083 	bne.w	8002ba8 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_UART_Transmit+0x2e>
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e07b      	b.n	8002baa <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_UART_Transmit+0x40>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e074      	b.n	8002baa <HAL_UART_Transmit+0x12a>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2221      	movs	r2, #33	; 0x21
 8002ad2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ad6:	f7fd fdbb 	bl	8000650 <HAL_GetTick>
 8002ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	88fa      	ldrh	r2, [r7, #6]
 8002ae0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	88fa      	ldrh	r2, [r7, #6]
 8002ae6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ae8:	e042      	b.n	8002b70 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b00:	d122      	bne.n	8002b48 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2180      	movs	r1, #128	; 0x80
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f850 	bl	8002bb2 <UART_WaitOnFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e046      	b.n	8002baa <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b2e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d103      	bne.n	8002b40 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	e017      	b.n	8002b70 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	3301      	adds	r3, #1
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	e013      	b.n	8002b70 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f82d 	bl	8002bb2 <UART_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e023      	b.n	8002baa <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	60ba      	str	r2, [r7, #8]
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1b7      	bne.n	8002aea <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2200      	movs	r2, #0
 8002b82:	2140      	movs	r1, #64	; 0x40
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f814 	bl	8002bb2 <UART_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e00a      	b.n	8002baa <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bc2:	e02c      	b.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d028      	beq.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bd2:	f7fd fd3d 	bl	8000650 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d21d      	bcs.n	8002c1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bf0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e00f      	b.n	8002c3e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d0c3      	beq.n	8002bc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c88:	f023 030c 	bic.w	r3, r3, #12
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	68f9      	ldr	r1, [r7, #12]
 8002c92:	430b      	orrs	r3, r1
 8002c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb4:	f040 80e4 	bne.w	8002e80 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4aab      	ldr	r2, [pc, #684]	; (8002f6c <UART_SetConfig+0x324>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d004      	beq.n	8002ccc <UART_SetConfig+0x84>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4aaa      	ldr	r2, [pc, #680]	; (8002f70 <UART_SetConfig+0x328>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d16c      	bne.n	8002da6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ccc:	f7ff f922 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009a      	lsls	r2, r3, #2
 8002cda:	441a      	add	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	4aa3      	ldr	r2, [pc, #652]	; (8002f74 <UART_SetConfig+0x32c>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	011c      	lsls	r4, r3, #4
 8002cf0:	f7ff f910 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009a      	lsls	r2, r3, #2
 8002cfe:	441a      	add	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d0a:	f7ff f903 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	009a      	lsls	r2, r3, #2
 8002d18:	441a      	add	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	4a93      	ldr	r2, [pc, #588]	; (8002f74 <UART_SetConfig+0x32c>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2264      	movs	r2, #100	; 0x64
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	1aeb      	subs	r3, r5, r3
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	3332      	adds	r3, #50	; 0x32
 8002d38:	4a8e      	ldr	r2, [pc, #568]	; (8002f74 <UART_SetConfig+0x32c>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d46:	441c      	add	r4, r3
 8002d48:	f7ff f8e4 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	009a      	lsls	r2, r3, #2
 8002d56:	441a      	add	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d62:	f7ff f8d7 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009a      	lsls	r2, r3, #2
 8002d70:	441a      	add	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	4a7d      	ldr	r2, [pc, #500]	; (8002f74 <UART_SetConfig+0x32c>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2264      	movs	r2, #100	; 0x64
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	1aeb      	subs	r3, r5, r3
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	3332      	adds	r3, #50	; 0x32
 8002d90:	4a78      	ldr	r2, [pc, #480]	; (8002f74 <UART_SetConfig+0x32c>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	f003 0207 	and.w	r2, r3, #7
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4422      	add	r2, r4
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	e154      	b.n	8003050 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002da6:	f7ff f8a1 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002daa:	4602      	mov	r2, r0
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009a      	lsls	r2, r3, #2
 8002db4:	441a      	add	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	4a6c      	ldr	r2, [pc, #432]	; (8002f74 <UART_SetConfig+0x32c>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	011c      	lsls	r4, r3, #4
 8002dca:	f7ff f88f 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009a      	lsls	r2, r3, #2
 8002dd8:	441a      	add	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fbb2 f5f3 	udiv	r5, r2, r3
 8002de4:	f7ff f882 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009a      	lsls	r2, r3, #2
 8002df2:	441a      	add	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	4a5d      	ldr	r2, [pc, #372]	; (8002f74 <UART_SetConfig+0x32c>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	2264      	movs	r2, #100	; 0x64
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	1aeb      	subs	r3, r5, r3
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	3332      	adds	r3, #50	; 0x32
 8002e12:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <UART_SetConfig+0x32c>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e20:	441c      	add	r4, r3
 8002e22:	f7ff f863 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002e26:	4602      	mov	r2, r0
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009a      	lsls	r2, r3, #2
 8002e30:	441a      	add	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e3c:	f7ff f856 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	009a      	lsls	r2, r3, #2
 8002e4a:	441a      	add	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <UART_SetConfig+0x32c>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	2264      	movs	r2, #100	; 0x64
 8002e60:	fb02 f303 	mul.w	r3, r2, r3
 8002e64:	1aeb      	subs	r3, r5, r3
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	3332      	adds	r3, #50	; 0x32
 8002e6a:	4a42      	ldr	r2, [pc, #264]	; (8002f74 <UART_SetConfig+0x32c>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	f003 0207 	and.w	r2, r3, #7
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4422      	add	r2, r4
 8002e7c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002e7e:	e0e7      	b.n	8003050 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a39      	ldr	r2, [pc, #228]	; (8002f6c <UART_SetConfig+0x324>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <UART_SetConfig+0x24c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a38      	ldr	r2, [pc, #224]	; (8002f70 <UART_SetConfig+0x328>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d171      	bne.n	8002f78 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002e94:	f7ff f83e 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009a      	lsls	r2, r3, #2
 8002ea2:	441a      	add	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eae:	4a31      	ldr	r2, [pc, #196]	; (8002f74 <UART_SetConfig+0x32c>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	011c      	lsls	r4, r3, #4
 8002eb8:	f7ff f82c 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009a      	lsls	r2, r3, #2
 8002ec6:	441a      	add	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ed2:	f7ff f81f 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	009a      	lsls	r2, r3, #2
 8002ee0:	441a      	add	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <UART_SetConfig+0x32c>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2264      	movs	r2, #100	; 0x64
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	1aeb      	subs	r3, r5, r3
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	3332      	adds	r3, #50	; 0x32
 8002f00:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <UART_SetConfig+0x32c>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0c:	441c      	add	r4, r3
 8002f0e:	f7ff f801 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009a      	lsls	r2, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fbb2 f5f3 	udiv	r5, r2, r3
 8002f28:	f7fe fff4 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009a      	lsls	r2, r3, #2
 8002f36:	441a      	add	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	4a0c      	ldr	r2, [pc, #48]	; (8002f74 <UART_SetConfig+0x32c>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	2264      	movs	r2, #100	; 0x64
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	1aeb      	subs	r3, r5, r3
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	3332      	adds	r3, #50	; 0x32
 8002f56:	4a07      	ldr	r2, [pc, #28]	; (8002f74 <UART_SetConfig+0x32c>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	f003 020f 	and.w	r2, r3, #15
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4422      	add	r2, r4
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	e071      	b.n	8003050 <UART_SetConfig+0x408>
 8002f6c:	40011000 	.word	0x40011000
 8002f70:	40011400 	.word	0x40011400
 8002f74:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f78:	f7fe ffb8 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009a      	lsls	r2, r3, #2
 8002f86:	441a      	add	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	4a31      	ldr	r2, [pc, #196]	; (8003058 <UART_SetConfig+0x410>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	011c      	lsls	r4, r3, #4
 8002f9c:	f7fe ffa6 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009a      	lsls	r2, r3, #2
 8002faa:	441a      	add	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8002fb6:	f7fe ff99 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009a      	lsls	r2, r3, #2
 8002fc4:	441a      	add	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	4a21      	ldr	r2, [pc, #132]	; (8003058 <UART_SetConfig+0x410>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2264      	movs	r2, #100	; 0x64
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	1aeb      	subs	r3, r5, r3
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	3332      	adds	r3, #50	; 0x32
 8002fe4:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <UART_SetConfig+0x410>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff0:	441c      	add	r4, r3
 8002ff2:	f7fe ff7b 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009a      	lsls	r2, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fbb2 f5f3 	udiv	r5, r2, r3
 800300c:	f7fe ff6e 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8003010:	4602      	mov	r2, r0
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	009a      	lsls	r2, r3, #2
 800301a:	441a      	add	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	4a0c      	ldr	r2, [pc, #48]	; (8003058 <UART_SetConfig+0x410>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	2264      	movs	r2, #100	; 0x64
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	1aeb      	subs	r3, r5, r3
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	3332      	adds	r3, #50	; 0x32
 800303a:	4a07      	ldr	r2, [pc, #28]	; (8003058 <UART_SetConfig+0x410>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4422      	add	r2, r4
 800304c:	609a      	str	r2, [r3, #8]
}
 800304e:	e7ff      	b.n	8003050 <UART_SetConfig+0x408>
 8003050:	bf00      	nop
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bdb0      	pop	{r4, r5, r7, pc}
 8003058:	51eb851f 	.word	0x51eb851f

0800305c <Error_handler>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;
extern TIM_OC_InitTypeDef oc;

void Error_handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
	while(1);
 8003060:	e7fe      	b.n	8003060 <Error_handler+0x4>
	...

08003064 <GPIO_Init>:
}


void GPIO_Init()
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	4b46      	ldr	r3, [pc, #280]	; (8003188 <GPIO_Init+0x124>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	4a45      	ldr	r2, [pc, #276]	; (8003188 <GPIO_Init+0x124>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6313      	str	r3, [r2, #48]	; 0x30
 800307a:	4b43      	ldr	r3, [pc, #268]	; (8003188 <GPIO_Init+0x124>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	4b3f      	ldr	r3, [pc, #252]	; (8003188 <GPIO_Init+0x124>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	4a3e      	ldr	r2, [pc, #248]	; (8003188 <GPIO_Init+0x124>)
 8003090:	f043 0302 	orr.w	r3, r3, #2
 8003094:	6313      	str	r3, [r2, #48]	; 0x30
 8003096:	4b3c      	ldr	r3, [pc, #240]	; (8003188 <GPIO_Init+0x124>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	4b38      	ldr	r3, [pc, #224]	; (8003188 <GPIO_Init+0x124>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	4a37      	ldr	r2, [pc, #220]	; (8003188 <GPIO_Init+0x124>)
 80030ac:	f043 0308 	orr.w	r3, r3, #8
 80030b0:	6313      	str	r3, [r2, #48]	; 0x30
 80030b2:	4b35      	ldr	r3, [pc, #212]	; (8003188 <GPIO_Init+0x124>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_USART2_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	4b31      	ldr	r3, [pc, #196]	; (8003188 <GPIO_Init+0x124>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a30      	ldr	r2, [pc, #192]	; (8003188 <GPIO_Init+0x124>)
 80030c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40
 80030ce:	4b2e      	ldr	r3, [pc, #184]	; (8003188 <GPIO_Init+0x124>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_I2C1_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <GPIO_Init+0x124>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a29      	ldr	r2, [pc, #164]	; (8003188 <GPIO_Init+0x124>)
 80030e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b27      	ldr	r3, [pc, #156]	; (8003188 <GPIO_Init+0x124>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
//	__HAL_RCC_TIM2_CLK_ENABLE();
//	__HAL_RCC_TIM4_CLK_ENABLE();

	 gpio.Pin = GPIO_PIN_2;
 80030f6:	4b25      	ldr	r3, [pc, #148]	; (800318c <GPIO_Init+0x128>)
 80030f8:	2204      	movs	r2, #4
 80030fa:	601a      	str	r2, [r3, #0]
	 gpio.Mode =GPIO_MODE_AF_PP;
 80030fc:	4b23      	ldr	r3, [pc, #140]	; (800318c <GPIO_Init+0x128>)
 80030fe:	2202      	movs	r2, #2
 8003100:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_PULLUP;
 8003102:	4b22      	ldr	r3, [pc, #136]	; (800318c <GPIO_Init+0x128>)
 8003104:	2201      	movs	r2, #1
 8003106:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	4b20      	ldr	r3, [pc, #128]	; (800318c <GPIO_Init+0x128>)
 800310a:	2200      	movs	r2, #0
 800310c:	60da      	str	r2, [r3, #12]
	 gpio.Alternate =  GPIO_AF7_USART2; //TX
 800310e:	4b1f      	ldr	r3, [pc, #124]	; (800318c <GPIO_Init+0x128>)
 8003110:	2207      	movs	r2, #7
 8003112:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOA,&gpio);
 8003114:	491d      	ldr	r1, [pc, #116]	; (800318c <GPIO_Init+0x128>)
 8003116:	481e      	ldr	r0, [pc, #120]	; (8003190 <GPIO_Init+0x12c>)
 8003118:	f7fd fbc4 	bl	80008a4 <HAL_GPIO_Init>

	 gpio.Pin = GPIO_PIN_3; //RX
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <GPIO_Init+0x128>)
 800311e:	2208      	movs	r2, #8
 8003120:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_OD;
 8003122:	4b1a      	ldr	r3, [pc, #104]	; (800318c <GPIO_Init+0x128>)
 8003124:	2212      	movs	r2, #18
 8003126:	605a      	str	r2, [r3, #4]
	 HAL_GPIO_Init(GPIOA,&gpio);
 8003128:	4918      	ldr	r1, [pc, #96]	; (800318c <GPIO_Init+0x128>)
 800312a:	4819      	ldr	r0, [pc, #100]	; (8003190 <GPIO_Init+0x12c>)
 800312c:	f7fd fbba 	bl	80008a4 <HAL_GPIO_Init>

	 gpio.Pin = GPIO_PIN_8 |GPIO_PIN_9;
 8003130:	4b16      	ldr	r3, [pc, #88]	; (800318c <GPIO_Init+0x128>)
 8003132:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003136:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_OD;
 8003138:	4b14      	ldr	r3, [pc, #80]	; (800318c <GPIO_Init+0x128>)
 800313a:	2212      	movs	r2, #18
 800313c:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_NOPULL;
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <GPIO_Init+0x128>)
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <GPIO_Init+0x128>)
 8003146:	2202      	movs	r2, #2
 8003148:	60da      	str	r2, [r3, #12]
	 gpio.Alternate = GPIO_AF4_I2C1;
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <GPIO_Init+0x128>)
 800314c:	2204      	movs	r2, #4
 800314e:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOB, &gpio);
 8003150:	490e      	ldr	r1, [pc, #56]	; (800318c <GPIO_Init+0x128>)
 8003152:	4810      	ldr	r0, [pc, #64]	; (8003194 <GPIO_Init+0x130>)
 8003154:	f7fd fba6 	bl	80008a4 <HAL_GPIO_Init>
//	 gpio.Pull = GPIO_NOPULL;
//	 gpio.Speed = GPIO_SPEED_FREQ_LOW;
//	 HAL_GPIO_Init(GPIOA, &gpio);
//
//	 	 //TIM4
	 gpio.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <GPIO_Init+0x128>)
 800315a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800315e:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_PP;
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <GPIO_Init+0x128>)
 8003162:	2202      	movs	r2, #2
 8003164:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_NOPULL;
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <GPIO_Init+0x128>)
 8003168:	2200      	movs	r2, #0
 800316a:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <GPIO_Init+0x128>)
 800316e:	2202      	movs	r2, #2
 8003170:	60da      	str	r2, [r3, #12]
	 gpio.Alternate = GPIO_AF2_TIM4;
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <GPIO_Init+0x128>)
 8003174:	2202      	movs	r2, #2
 8003176:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOD, &gpio);
 8003178:	4904      	ldr	r1, [pc, #16]	; (800318c <GPIO_Init+0x128>)
 800317a:	4807      	ldr	r0, [pc, #28]	; (8003198 <GPIO_Init+0x134>)
 800317c:	f7fd fb92 	bl	80008a4 <HAL_GPIO_Init>

}
 8003180:	bf00      	nop
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40023800 	.word	0x40023800
 800318c:	200005d8 	.word	0x200005d8
 8003190:	40020000 	.word	0x40020000
 8003194:	40020400 	.word	0x40020400
 8003198:	40020c00 	.word	0x40020c00

0800319c <UART2_Init>:

void UART2_Init()
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031a0:	2026      	movs	r0, #38	; 0x26
 80031a2:	f7fd fb58 	bl	8000856 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 80031a6:	2200      	movs	r2, #0
 80031a8:	210f      	movs	r1, #15
 80031aa:	2026      	movs	r0, #38	; 0x26
 80031ac:	f7fd fb37 	bl	800081e <HAL_NVIC_SetPriority>

	uart2.Instance = USART2;
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <UART2_Init+0x54>)
 80031b2:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <UART2_Init+0x58>)
 80031b4:	601a      	str	r2, [r3, #0]
	uart2.Init.BaudRate = 115200;
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <UART2_Init+0x54>)
 80031b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031bc:	605a      	str	r2, [r3, #4]
	uart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <UART2_Init+0x54>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
	uart2.Init.StopBits = UART_STOPBITS_1;
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <UART2_Init+0x54>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
	uart2.Init.Parity = UART_PARITY_NONE;
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <UART2_Init+0x54>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
	uart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <UART2_Init+0x54>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	619a      	str	r2, [r3, #24]
	uart2.Init.Mode = UART_MODE_TX_RX;
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <UART2_Init+0x54>)
 80031d8:	220c      	movs	r2, #12
 80031da:	615a      	str	r2, [r3, #20]
	 if ( HAL_UART_Init(&uart2) != HAL_OK )
 80031dc:	4804      	ldr	r0, [pc, #16]	; (80031f0 <UART2_Init+0x54>)
 80031de:	f7ff fbf8 	bl	80029d2 <HAL_UART_Init>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <UART2_Init+0x50>
	 {
	 	Error_handler();
 80031e8:	f7ff ff38 	bl	800305c <Error_handler>
	 }
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000558 	.word	0x20000558
 80031f4:	40004400 	.word	0x40004400

080031f8 <I2C1_Init>:

void I2C1_Init()
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 80031fc:	4b12      	ldr	r3, [pc, #72]	; (8003248 <I2C1_Init+0x50>)
 80031fe:	4a13      	ldr	r2, [pc, #76]	; (800324c <I2C1_Init+0x54>)
 8003200:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 300000;
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <I2C1_Init+0x50>)
 8003204:	4a12      	ldr	r2, [pc, #72]	; (8003250 <I2C1_Init+0x58>)
 8003206:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <I2C1_Init+0x50>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <I2C1_Init+0x50>)
 8003210:	2200      	movs	r2, #0
 8003212:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <I2C1_Init+0x50>)
 8003216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800321a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <I2C1_Init+0x50>)
 800321e:	2200      	movs	r2, #0
 8003220:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <I2C1_Init+0x50>)
 8003224:	2200      	movs	r2, #0
 8003226:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003228:	4b07      	ldr	r3, [pc, #28]	; (8003248 <I2C1_Init+0x50>)
 800322a:	2200      	movs	r2, #0
 800322c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <I2C1_Init+0x50>)
 8003230:	2200      	movs	r2, #0
 8003232:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003234:	4804      	ldr	r0, [pc, #16]	; (8003248 <I2C1_Init+0x50>)
 8003236:	f7fd fd01 	bl	8000c3c <HAL_I2C_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <I2C1_Init+0x4c>
	  {
	    Error_handler();
 8003240:	f7ff ff0c 	bl	800305c <Error_handler>

	  }
}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	200004e8 	.word	0x200004e8
 800324c:	40005400 	.word	0x40005400
 8003250:	000493e0 	.word	0x000493e0

08003254 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8003258:	4802      	ldr	r0, [pc, #8]	; (8003264 <TIM2_IRQHandler+0x10>)
 800325a:	f7fe ff3b 	bl	80020d4 <HAL_TIM_IRQHandler>
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000598 	.word	0x20000598

08003268 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET)
 8003270:	2120      	movs	r1, #32
 8003272:	480a      	ldr	r0, [pc, #40]	; (800329c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003274:	f7fd fcb0 	bl	8000bd8 <HAL_GPIO_ReadPin>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d105      	bne.n	800328a <HAL_TIM_PeriodElapsedCallback+0x22>
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800327e:	2201      	movs	r2, #1
 8003280:	2120      	movs	r1, #32
 8003282:	4806      	ldr	r0, [pc, #24]	; (800329c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003284:	f7fd fcc0 	bl	8000c08 <HAL_GPIO_WritePin>
 else
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}
 8003288:	e004      	b.n	8003294 <HAL_TIM_PeriodElapsedCallback+0x2c>
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800328a:	2200      	movs	r2, #0
 800328c:	2120      	movs	r1, #32
 800328e:	4803      	ldr	r0, [pc, #12]	; (800329c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003290:	f7fd fcba 	bl	8000c08 <HAL_GPIO_WritePin>
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40020000 	.word	0x40020000

080032a0 <TIM2_Init>:

void TIM2_Init()
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	htim2.Instance = TIM2;
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <TIM2_Init+0x4c>)
 80032a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032aa:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8000-1;
 80032ac:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <TIM2_Init+0x4c>)
 80032ae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80032b2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b4:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <TIM2_Init+0x4c>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 80032ba:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <TIM2_Init+0x4c>)
 80032bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032c0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <TIM2_Init+0x4c>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0;
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <TIM2_Init+0x4c>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	615a      	str	r2, [r3, #20]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <TIM2_Init+0x4c>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 80032d4:	4805      	ldr	r0, [pc, #20]	; (80032ec <TIM2_Init+0x4c>)
 80032d6:	f7fe fe31 	bl	8001f3c <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 80032da:	4804      	ldr	r0, [pc, #16]	; (80032ec <TIM2_Init+0x4c>)
 80032dc:	f7fe fe63 	bl	8001fa6 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032e0:	201c      	movs	r0, #28
 80032e2:	f7fd fab8 	bl	8000856 <HAL_NVIC_EnableIRQ>
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000598 	.word	0x20000598

080032f0 <TIM4_Init>:

void TIM4_Init()
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
	 htim4.Instance = TIM4;
 80032f4:	4b22      	ldr	r3, [pc, #136]	; (8003380 <TIM4_Init+0x90>)
 80032f6:	4a23      	ldr	r2, [pc, #140]	; (8003384 <TIM4_Init+0x94>)
 80032f8:	601a      	str	r2, [r3, #0]
	 htim4.Init.Period = 1000 - 1;
 80032fa:	4b21      	ldr	r3, [pc, #132]	; (8003380 <TIM4_Init+0x90>)
 80032fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003300:	60da      	str	r2, [r3, #12]
	 htim4.Init.Prescaler = 8000 - 1;
 8003302:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <TIM4_Init+0x90>)
 8003304:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003308:	605a      	str	r2, [r3, #4]
	 htim4.Init.ClockDivision = 0;
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <TIM4_Init+0x90>)
 800330c:	2200      	movs	r2, #0
 800330e:	611a      	str	r2, [r3, #16]
	 htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <TIM4_Init+0x90>)
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
	 htim4.Init.RepetitionCounter = 0;
 8003316:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <TIM4_Init+0x90>)
 8003318:	2200      	movs	r2, #0
 800331a:	615a      	str	r2, [r3, #20]
	 htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800331c:	4b18      	ldr	r3, [pc, #96]	; (8003380 <TIM4_Init+0x90>)
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	619a      	str	r2, [r3, #24]
	 HAL_TIM_PWM_Init(&htim4);
 8003322:	4817      	ldr	r0, [pc, #92]	; (8003380 <TIM4_Init+0x90>)
 8003324:	f7fe fe63 	bl	8001fee <HAL_TIM_PWM_Init>

	 oc.OCMode = TIM_OCMODE_PWM1;
 8003328:	4b17      	ldr	r3, [pc, #92]	; (8003388 <TIM4_Init+0x98>)
 800332a:	2260      	movs	r2, #96	; 0x60
 800332c:	601a      	str	r2, [r3, #0]
	 oc.Pulse = 100;
 800332e:	4b16      	ldr	r3, [pc, #88]	; (8003388 <TIM4_Init+0x98>)
 8003330:	2264      	movs	r2, #100	; 0x64
 8003332:	605a      	str	r2, [r3, #4]
	 oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <TIM4_Init+0x98>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
	 oc.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800333a:	4b13      	ldr	r3, [pc, #76]	; (8003388 <TIM4_Init+0x98>)
 800333c:	2208      	movs	r2, #8
 800333e:	60da      	str	r2, [r3, #12]
	 oc.OCFastMode = TIM_OCFAST_ENABLE;
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <TIM4_Init+0x98>)
 8003342:	2204      	movs	r2, #4
 8003344:	611a      	str	r2, [r3, #16]
	 oc.OCIdleState = TIM_OCIDLESTATE_SET;
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <TIM4_Init+0x98>)
 8003348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800334c:	615a      	str	r2, [r3, #20]
	 oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800334e:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <TIM4_Init+0x98>)
 8003350:	2200      	movs	r2, #0
 8003352:	619a      	str	r2, [r3, #24]

	 if (HAL_TIM_PWM_ConfigChannel(&htim4, &oc, TIM_CHANNEL_1) != HAL_OK)
 8003354:	2200      	movs	r2, #0
 8003356:	490c      	ldr	r1, [pc, #48]	; (8003388 <TIM4_Init+0x98>)
 8003358:	4809      	ldr	r0, [pc, #36]	; (8003380 <TIM4_Init+0x90>)
 800335a:	f7fe ffc3 	bl	80022e4 <HAL_TIM_PWM_ConfigChannel>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <TIM4_Init+0x78>
	  {
	    Error_handler();
 8003364:	f7ff fe7a 	bl	800305c <Error_handler>
	  }

	 if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK)
 8003368:	2100      	movs	r1, #0
 800336a:	4805      	ldr	r0, [pc, #20]	; (8003380 <TIM4_Init+0x90>)
 800336c:	f7fe fe74 	bl	8002058 <HAL_TIM_PWM_Start>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <TIM4_Init+0x8a>
	  {
	    Error_handler();
 8003376:	f7ff fe71 	bl	800305c <Error_handler>
	  }
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	200004a8 	.word	0x200004a8
 8003384:	40000800 	.word	0x40000800
 8003388:	2000053c 	.word	0x2000053c

0800338c <main>:
*/

#include "main.h"

int main(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b09c      	sub	sp, #112	; 0x70
 8003390:	af00      	add	r7, sp, #0
	char msg[100];

	HAL_Init();
 8003392:	f7fd f8f5 	bl	8000580 <HAL_Init>
	SystemConfigClk();
 8003396:	f000 f8ab 	bl	80034f0 <SystemConfigClk>
	GPIO_Init();
 800339a:	f7ff fe63 	bl	8003064 <GPIO_Init>
    UART2_Init();
 800339e:	f7ff fefd 	bl	800319c <UART2_Init>
    I2C1_Init();
 80033a2:	f7ff ff29 	bl	80031f8 <I2C1_Init>
    TIM2_Init();
 80033a6:	f7ff ff7b 	bl	80032a0 <TIM2_Init>
    TIM4_Init();
 80033aa:	f7ff ffa1 	bl	80032f0 <TIM4_Init>
    SSD1306_Init();
 80033ae:	f000 f90f 	bl	80035d0 <SSD1306_Init>

    memset(msg,0,sizeof(msg));
 80033b2:	1d3b      	adds	r3, r7, #4
 80033b4:	2264      	movs	r2, #100	; 0x64
 80033b6:	2100      	movs	r1, #0
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fb4b 	bl	8003a54 <memset>
	sprintf(msg,"SYSCLK : %ldHz\r\n",HAL_RCC_GetSysClockFreq());
 80033be:	f7fe fcb1 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 80033c2:	4602      	mov	r2, r0
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	4944      	ldr	r1, [pc, #272]	; (80034d8 <main+0x14c>)
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fb4b 	bl	8003a64 <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fc fefd 	bl	80001d0 <strlen>
 80033d6:	4603      	mov	r3, r0
 80033d8:	b29a      	uxth	r2, r3
 80033da:	1d39      	adds	r1, r7, #4
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295
 80033e0:	483e      	ldr	r0, [pc, #248]	; (80034dc <main+0x150>)
 80033e2:	f7ff fb4d 	bl	8002a80 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	2264      	movs	r2, #100	; 0x64
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fb31 	bl	8003a54 <memset>
	sprintf(msg,"HCLK   : %ldHz\r\n",HAL_RCC_GetHCLKFreq());
 80033f2:	f7fe fd6f 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 80033f6:	4602      	mov	r2, r0
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	4939      	ldr	r1, [pc, #228]	; (80034e0 <main+0x154>)
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fb31 	bl	8003a64 <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	4618      	mov	r0, r3
 8003406:	f7fc fee3 	bl	80001d0 <strlen>
 800340a:	4603      	mov	r3, r0
 800340c:	b29a      	uxth	r2, r3
 800340e:	1d39      	adds	r1, r7, #4
 8003410:	f04f 33ff 	mov.w	r3, #4294967295
 8003414:	4831      	ldr	r0, [pc, #196]	; (80034dc <main+0x150>)
 8003416:	f7ff fb33 	bl	8002a80 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	2264      	movs	r2, #100	; 0x64
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fb17 	bl	8003a54 <memset>
	sprintf(msg,"PCLK1  : %ldHz\r\n",HAL_RCC_GetPCLK1Freq());
 8003426:	f7fe fd61 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 800342a:	4602      	mov	r2, r0
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	492d      	ldr	r1, [pc, #180]	; (80034e4 <main+0x158>)
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fb17 	bl	8003a64 <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	4618      	mov	r0, r3
 800343a:	f7fc fec9 	bl	80001d0 <strlen>
 800343e:	4603      	mov	r3, r0
 8003440:	b29a      	uxth	r2, r3
 8003442:	1d39      	adds	r1, r7, #4
 8003444:	f04f 33ff 	mov.w	r3, #4294967295
 8003448:	4824      	ldr	r0, [pc, #144]	; (80034dc <main+0x150>)
 800344a:	f7ff fb19 	bl	8002a80 <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 800344e:	1d3b      	adds	r3, r7, #4
 8003450:	2264      	movs	r2, #100	; 0x64
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fafd 	bl	8003a54 <memset>
	sprintf(msg,"PCLK2  : %ldHz\r\n\n",HAL_RCC_GetPCLK2Freq());
 800345a:	f7fe fd5b 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 800345e:	4602      	mov	r2, r0
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	4921      	ldr	r1, [pc, #132]	; (80034e8 <main+0x15c>)
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fafd 	bl	8003a64 <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	4618      	mov	r0, r3
 800346e:	f7fc feaf 	bl	80001d0 <strlen>
 8003472:	4603      	mov	r3, r0
 8003474:	b29a      	uxth	r2, r3
 8003476:	1d39      	adds	r1, r7, #4
 8003478:	f04f 33ff 	mov.w	r3, #4294967295
 800347c:	4817      	ldr	r0, [pc, #92]	; (80034dc <main+0x150>)
 800347e:	f7ff faff 	bl	8002a80 <HAL_UART_Transmit>

	int test = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	66fb      	str	r3, [r7, #108]	; 0x6c
	int n = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	66bb      	str	r3, [r7, #104]	; 0x68
	while(1){

		test++;
 800348a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348c:	3301      	adds	r3, #1
 800348e:	66fb      	str	r3, [r7, #108]	; 0x6c
//
//		SSD1306_GotoXY(10,52);
//		SSD1306_Puts("Test@53.", &Font_7x10, 1);
//		SSD1306_UpdateScreen(); //display

		n++;
 8003490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003492:	3301      	adds	r3, #1
 8003494:	66bb      	str	r3, [r7, #104]	; 0x68
		memset(msg,0,sizeof(msg));
 8003496:	1d3b      	adds	r3, r7, #4
 8003498:	2264      	movs	r2, #100	; 0x64
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fad9 	bl	8003a54 <memset>
		sprintf(msg,"n = %d\r\n\n",n);
 80034a2:	1d3b      	adds	r3, r7, #4
 80034a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034a6:	4911      	ldr	r1, [pc, #68]	; (80034ec <main+0x160>)
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fadb 	bl	8003a64 <siprintf>
		HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fc fe8d 	bl	80001d0 <strlen>
 80034b6:	4603      	mov	r3, r0
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	1d39      	adds	r1, r7, #4
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295
 80034c0:	4806      	ldr	r0, [pc, #24]	; (80034dc <main+0x150>)
 80034c2:	f7ff fadd 	bl	8002a80 <HAL_UART_Transmit>

		if (n > 24000) n = 0;
 80034c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034c8:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80034cc:	4293      	cmp	r3, r2
 80034ce:	dddc      	ble.n	800348a <main+0xfe>
 80034d0:	2300      	movs	r3, #0
 80034d2:	66bb      	str	r3, [r7, #104]	; 0x68
		test++;
 80034d4:	e7d9      	b.n	800348a <main+0xfe>
 80034d6:	bf00      	nop
 80034d8:	08004270 	.word	0x08004270
 80034dc:	20000558 	.word	0x20000558
 80034e0:	08004284 	.word	0x08004284
 80034e4:	08004298 	.word	0x08004298
 80034e8:	080042ac 	.word	0x080042ac
 80034ec:	080042c0 	.word	0x080042c0

080034f0 <SystemConfigClk>:

	return 0;
}

void SystemConfigClk()
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b09a      	sub	sp, #104	; 0x68
 80034f4:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef oc;

	RCC_OscInitTypeDef osc_init = {0};
 80034f6:	f107 031c 	add.w	r3, r7, #28
 80034fa:	2230      	movs	r2, #48	; 0x30
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 faa8 	bl	8003a54 <memset>
	RCC_ClkInitTypeDef clk_init = {0};
 8003504:	f107 0308 	add.w	r3, r7, #8
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8003514:	2300      	movs	r3, #0
 8003516:	607b      	str	r3, [r7, #4]
 8003518:	4b2b      	ldr	r3, [pc, #172]	; (80035c8 <SystemConfigClk+0xd8>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	4a2a      	ldr	r2, [pc, #168]	; (80035c8 <SystemConfigClk+0xd8>)
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003522:	6413      	str	r3, [r2, #64]	; 0x40
 8003524:	4b28      	ldr	r3, [pc, #160]	; (80035c8 <SystemConfigClk+0xd8>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003530:	2300      	movs	r3, #0
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	4b25      	ldr	r3, [pc, #148]	; (80035cc <SystemConfigClk+0xdc>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a24      	ldr	r2, [pc, #144]	; (80035cc <SystemConfigClk+0xdc>)
 800353a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b22      	ldr	r3, [pc, #136]	; (80035cc <SystemConfigClk+0xdc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	683b      	ldr	r3, [r7, #0]

	memset(&osc_init,0,sizeof(osc_init));
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	2230      	movs	r2, #48	; 0x30
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fa7d 	bl	8003a54 <memset>
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800355a:	2301      	movs	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
    osc_init.HSEState = RCC_HSE_BYPASS;
 800355e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003562:	623b      	str	r3, [r7, #32]
    osc_init.PLL.PLLState = RCC_PLL_ON;
 8003564:	2302      	movs	r3, #2
 8003566:	637b      	str	r3, [r7, #52]	; 0x34
    osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800356c:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLM = 4;
 800356e:	2304      	movs	r3, #4
 8003570:	63fb      	str	r3, [r7, #60]	; 0x3c
	osc_init.PLL.PLLN = 100;
 8003572:	2364      	movs	r3, #100	; 0x64
 8003574:	643b      	str	r3, [r7, #64]	; 0x40
	osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8003576:	2302      	movs	r3, #2
 8003578:	647b      	str	r3, [r7, #68]	; 0x44
	osc_init.PLL.PLLQ = 7;
 800357a:	2307      	movs	r3, #7
 800357c:	64bb      	str	r3, [r7, #72]	; 0x48

    //osc_init.HSEState = RCC_HSE_ON;
    if ( HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 800357e:	f107 031c 	add.w	r3, r7, #28
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe f8aa 	bl	80016dc <HAL_RCC_OscConfig>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <SystemConfigClk+0xa2>
    {
    	Error_handler();
 800358e:	f7ff fd65 	bl	800305c <Error_handler>
    }

    clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8003592:	230f      	movs	r3, #15
 8003594:	60bb      	str	r3, [r7, #8]
    					RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    //clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  // NOT WORKING
 8003596:	2302      	movs	r3, #2
 8003598:	60fb      	str	r3, [r7, #12]
    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
    clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 800359e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035a2:	617b      	str	r3, [r7, #20]
    clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80035a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a8:	61bb      	str	r3, [r7, #24]

    if( HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_3) != HAL_OK)
 80035aa:	f107 0308 	add.w	r3, r7, #8
 80035ae:	2103      	movs	r1, #3
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe fad5 	bl	8001b60 <HAL_RCC_ClockConfig>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <SystemConfigClk+0xd0>
    {
    	Error_handler();
 80035bc:	f7ff fd4e 	bl	800305c <Error_handler>
    }

}
 80035c0:	bf00      	nop
 80035c2:	3768      	adds	r7, #104	; 0x68
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40007000 	.word	0x40007000

080035d0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80035d6:	f000 f905 	bl	80037e4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80035da:	f644 6320 	movw	r3, #20000	; 0x4e20
 80035de:	2201      	movs	r2, #1
 80035e0:	2178      	movs	r1, #120	; 0x78
 80035e2:	485b      	ldr	r0, [pc, #364]	; (8003750 <SSD1306_Init+0x180>)
 80035e4:	f7fd fd5a 	bl	800109c <HAL_I2C_IsDeviceReady>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	e0a9      	b.n	8003746 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80035f2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80035f6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80035f8:	e002      	b.n	8003600 <SSD1306_Init+0x30>
		p--;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3b01      	subs	r3, #1
 80035fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f9      	bne.n	80035fa <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003606:	22ae      	movs	r2, #174	; 0xae
 8003608:	2100      	movs	r1, #0
 800360a:	2078      	movs	r0, #120	; 0x78
 800360c:	f000 f946 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8003610:	2220      	movs	r2, #32
 8003612:	2100      	movs	r1, #0
 8003614:	2078      	movs	r0, #120	; 0x78
 8003616:	f000 f941 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800361a:	2210      	movs	r2, #16
 800361c:	2100      	movs	r1, #0
 800361e:	2078      	movs	r0, #120	; 0x78
 8003620:	f000 f93c 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003624:	22b0      	movs	r2, #176	; 0xb0
 8003626:	2100      	movs	r1, #0
 8003628:	2078      	movs	r0, #120	; 0x78
 800362a:	f000 f937 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800362e:	22c8      	movs	r2, #200	; 0xc8
 8003630:	2100      	movs	r1, #0
 8003632:	2078      	movs	r0, #120	; 0x78
 8003634:	f000 f932 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003638:	2200      	movs	r2, #0
 800363a:	2100      	movs	r1, #0
 800363c:	2078      	movs	r0, #120	; 0x78
 800363e:	f000 f92d 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003642:	2210      	movs	r2, #16
 8003644:	2100      	movs	r1, #0
 8003646:	2078      	movs	r0, #120	; 0x78
 8003648:	f000 f928 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800364c:	2240      	movs	r2, #64	; 0x40
 800364e:	2100      	movs	r1, #0
 8003650:	2078      	movs	r0, #120	; 0x78
 8003652:	f000 f923 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003656:	2281      	movs	r2, #129	; 0x81
 8003658:	2100      	movs	r1, #0
 800365a:	2078      	movs	r0, #120	; 0x78
 800365c:	f000 f91e 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003660:	22ff      	movs	r2, #255	; 0xff
 8003662:	2100      	movs	r1, #0
 8003664:	2078      	movs	r0, #120	; 0x78
 8003666:	f000 f919 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800366a:	22a1      	movs	r2, #161	; 0xa1
 800366c:	2100      	movs	r1, #0
 800366e:	2078      	movs	r0, #120	; 0x78
 8003670:	f000 f914 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003674:	22a6      	movs	r2, #166	; 0xa6
 8003676:	2100      	movs	r1, #0
 8003678:	2078      	movs	r0, #120	; 0x78
 800367a:	f000 f90f 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800367e:	22a8      	movs	r2, #168	; 0xa8
 8003680:	2100      	movs	r1, #0
 8003682:	2078      	movs	r0, #120	; 0x78
 8003684:	f000 f90a 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003688:	223f      	movs	r2, #63	; 0x3f
 800368a:	2100      	movs	r1, #0
 800368c:	2078      	movs	r0, #120	; 0x78
 800368e:	f000 f905 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003692:	22a4      	movs	r2, #164	; 0xa4
 8003694:	2100      	movs	r1, #0
 8003696:	2078      	movs	r0, #120	; 0x78
 8003698:	f000 f900 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800369c:	22d3      	movs	r2, #211	; 0xd3
 800369e:	2100      	movs	r1, #0
 80036a0:	2078      	movs	r0, #120	; 0x78
 80036a2:	f000 f8fb 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80036a6:	2200      	movs	r2, #0
 80036a8:	2100      	movs	r1, #0
 80036aa:	2078      	movs	r0, #120	; 0x78
 80036ac:	f000 f8f6 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80036b0:	22d5      	movs	r2, #213	; 0xd5
 80036b2:	2100      	movs	r1, #0
 80036b4:	2078      	movs	r0, #120	; 0x78
 80036b6:	f000 f8f1 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80036ba:	22f0      	movs	r2, #240	; 0xf0
 80036bc:	2100      	movs	r1, #0
 80036be:	2078      	movs	r0, #120	; 0x78
 80036c0:	f000 f8ec 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80036c4:	22d9      	movs	r2, #217	; 0xd9
 80036c6:	2100      	movs	r1, #0
 80036c8:	2078      	movs	r0, #120	; 0x78
 80036ca:	f000 f8e7 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80036ce:	2222      	movs	r2, #34	; 0x22
 80036d0:	2100      	movs	r1, #0
 80036d2:	2078      	movs	r0, #120	; 0x78
 80036d4:	f000 f8e2 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80036d8:	22da      	movs	r2, #218	; 0xda
 80036da:	2100      	movs	r1, #0
 80036dc:	2078      	movs	r0, #120	; 0x78
 80036de:	f000 f8dd 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80036e2:	2212      	movs	r2, #18
 80036e4:	2100      	movs	r1, #0
 80036e6:	2078      	movs	r0, #120	; 0x78
 80036e8:	f000 f8d8 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80036ec:	22db      	movs	r2, #219	; 0xdb
 80036ee:	2100      	movs	r1, #0
 80036f0:	2078      	movs	r0, #120	; 0x78
 80036f2:	f000 f8d3 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80036f6:	2220      	movs	r2, #32
 80036f8:	2100      	movs	r1, #0
 80036fa:	2078      	movs	r0, #120	; 0x78
 80036fc:	f000 f8ce 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003700:	228d      	movs	r2, #141	; 0x8d
 8003702:	2100      	movs	r1, #0
 8003704:	2078      	movs	r0, #120	; 0x78
 8003706:	f000 f8c9 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800370a:	2214      	movs	r2, #20
 800370c:	2100      	movs	r1, #0
 800370e:	2078      	movs	r0, #120	; 0x78
 8003710:	f000 f8c4 	bl	800389c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003714:	22af      	movs	r2, #175	; 0xaf
 8003716:	2100      	movs	r1, #0
 8003718:	2078      	movs	r0, #120	; 0x78
 800371a:	f000 f8bf 	bl	800389c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800371e:	222e      	movs	r2, #46	; 0x2e
 8003720:	2100      	movs	r1, #0
 8003722:	2078      	movs	r0, #120	; 0x78
 8003724:	f000 f8ba 	bl	800389c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003728:	2000      	movs	r0, #0
 800372a:	f000 f843 	bl	80037b4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800372e:	f000 f813 	bl	8003758 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <SSD1306_Init+0x184>)
 8003734:	2200      	movs	r2, #0
 8003736:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <SSD1306_Init+0x184>)
 800373a:	2200      	movs	r2, #0
 800373c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <SSD1306_Init+0x184>)
 8003740:	2201      	movs	r2, #1
 8003742:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8003744:	2301      	movs	r3, #1
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	200004e8 	.word	0x200004e8
 8003754:	2000048c 	.word	0x2000048c

08003758 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800375e:	2300      	movs	r3, #0
 8003760:	71fb      	strb	r3, [r7, #7]
 8003762:	e01d      	b.n	80037a0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	3b50      	subs	r3, #80	; 0x50
 8003768:	b2db      	uxtb	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	2100      	movs	r1, #0
 800376e:	2078      	movs	r0, #120	; 0x78
 8003770:	f000 f894 	bl	800389c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003774:	2200      	movs	r2, #0
 8003776:	2100      	movs	r1, #0
 8003778:	2078      	movs	r0, #120	; 0x78
 800377a:	f000 f88f 	bl	800389c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800377e:	2210      	movs	r2, #16
 8003780:	2100      	movs	r1, #0
 8003782:	2078      	movs	r0, #120	; 0x78
 8003784:	f000 f88a 	bl	800389c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	01db      	lsls	r3, r3, #7
 800378c:	4a08      	ldr	r2, [pc, #32]	; (80037b0 <SSD1306_UpdateScreen+0x58>)
 800378e:	441a      	add	r2, r3
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	2140      	movs	r1, #64	; 0x40
 8003794:	2078      	movs	r0, #120	; 0x78
 8003796:	f000 f839 	bl	800380c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	3301      	adds	r3, #1
 800379e:	71fb      	strb	r3, [r7, #7]
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	2b07      	cmp	r3, #7
 80037a4:	d9de      	bls.n	8003764 <SSD1306_UpdateScreen+0xc>
	}
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	2000008c 	.word	0x2000008c

080037b4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <SSD1306_Fill+0x14>
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <SSD1306_Fill+0x16>
 80037c8:	23ff      	movs	r3, #255	; 0xff
 80037ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ce:	4619      	mov	r1, r3
 80037d0:	4803      	ldr	r0, [pc, #12]	; (80037e0 <SSD1306_Fill+0x2c>)
 80037d2:	f000 f93f 	bl	8003a54 <memset>
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	2000008c 	.word	0x2000008c

080037e4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <ssd1306_I2C_Init+0x24>)
 80037ec:	607b      	str	r3, [r7, #4]
	while(p>0)
 80037ee:	e002      	b.n	80037f6 <ssd1306_I2C_Init+0x12>
		p--;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f9      	bne.n	80037f0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	0003d090 	.word	0x0003d090

0800380c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b0c7      	sub	sp, #284	; 0x11c
 8003810:	af02      	add	r7, sp, #8
 8003812:	4604      	mov	r4, r0
 8003814:	4608      	mov	r0, r1
 8003816:	4639      	mov	r1, r7
 8003818:	600a      	str	r2, [r1, #0]
 800381a:	4619      	mov	r1, r3
 800381c:	1dfb      	adds	r3, r7, #7
 800381e:	4622      	mov	r2, r4
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	1dbb      	adds	r3, r7, #6
 8003824:	4602      	mov	r2, r0
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	1d3b      	adds	r3, r7, #4
 800382a:	460a      	mov	r2, r1
 800382c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800382e:	f107 030c 	add.w	r3, r7, #12
 8003832:	1dba      	adds	r2, r7, #6
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003838:	2300      	movs	r3, #0
 800383a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800383e:	e010      	b.n	8003862 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8003840:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003844:	463a      	mov	r2, r7
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	441a      	add	r2, r3
 800384a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800384e:	3301      	adds	r3, #1
 8003850:	7811      	ldrb	r1, [r2, #0]
 8003852:	f107 020c 	add.w	r2, r7, #12
 8003856:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003858:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800385c:	3301      	adds	r3, #1
 800385e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003862:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003866:	b29b      	uxth	r3, r3
 8003868:	1d3a      	adds	r2, r7, #4
 800386a:	8812      	ldrh	r2, [r2, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d8e7      	bhi.n	8003840 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003870:	1dfb      	adds	r3, r7, #7
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b299      	uxth	r1, r3
 8003876:	1d3b      	adds	r3, r7, #4
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	3301      	adds	r3, #1
 800387c:	b298      	uxth	r0, r3
 800387e:	f107 020c 	add.w	r2, r7, #12
 8003882:	230a      	movs	r3, #10
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	4603      	mov	r3, r0
 8003888:	4803      	ldr	r0, [pc, #12]	; (8003898 <ssd1306_I2C_WriteMulti+0x8c>)
 800388a:	f7fd fb09 	bl	8000ea0 <HAL_I2C_Master_Transmit>
}
 800388e:	bf00      	nop
 8003890:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}
 8003898:	200004e8 	.word	0x200004e8

0800389c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
 80038a6:	460b      	mov	r3, r1
 80038a8:	71bb      	strb	r3, [r7, #6]
 80038aa:	4613      	mov	r3, r2
 80038ac:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80038ae:	79bb      	ldrb	r3, [r7, #6]
 80038b0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80038b2:	797b      	ldrb	r3, [r7, #5]
 80038b4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	b299      	uxth	r1, r3
 80038ba:	f107 020c 	add.w	r2, r7, #12
 80038be:	230a      	movs	r3, #10
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	2302      	movs	r3, #2
 80038c4:	4803      	ldr	r0, [pc, #12]	; (80038d4 <ssd1306_I2C_Write+0x38>)
 80038c6:	f7fd faeb 	bl	8000ea0 <HAL_I2C_Master_Transmit>
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200004e8 	.word	0x200004e8

080038d8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80038dc:	f7fc fea4 	bl	8000628 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80038e0:	f7fc ffd3 	bl	800088a <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <_sbrk+0x50>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <_sbrk+0x16>
		heap_end = &end;
 80038f8:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <_sbrk+0x50>)
 80038fa:	4a10      	ldr	r2, [pc, #64]	; (800393c <_sbrk+0x54>)
 80038fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80038fe:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <_sbrk+0x50>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <_sbrk+0x50>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	466a      	mov	r2, sp
 800390e:	4293      	cmp	r3, r2
 8003910:	d907      	bls.n	8003922 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003912:	f000 f875 	bl	8003a00 <__errno>
 8003916:	4602      	mov	r2, r0
 8003918:	230c      	movs	r3, #12
 800391a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800391c:	f04f 33ff 	mov.w	r3, #4294967295
 8003920:	e006      	b.n	8003930 <_sbrk+0x48>
	}

	heap_end += incr;
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <_sbrk+0x50>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	4a03      	ldr	r2, [pc, #12]	; (8003938 <_sbrk+0x50>)
 800392c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800392e:	68fb      	ldr	r3, [r7, #12]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000498 	.word	0x20000498
 800393c:	200005f0 	.word	0x200005f0

08003940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003944:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <SystemInit+0x60>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <SystemInit+0x60>)
 800394c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003954:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <SystemInit+0x64>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <SystemInit+0x64>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003960:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <SystemInit+0x64>)
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003966:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <SystemInit+0x64>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a0e      	ldr	r2, [pc, #56]	; (80039a4 <SystemInit+0x64>)
 800396c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003974:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003976:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <SystemInit+0x64>)
 8003978:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <SystemInit+0x68>)
 800397a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <SystemInit+0x64>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <SystemInit+0x64>)
 8003982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003986:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <SystemInit+0x64>)
 800398a:	2200      	movs	r2, #0
 800398c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <SystemInit+0x60>)
 8003990:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003994:	609a      	str	r2, [r3, #8]
#endif
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	e000ed00 	.word	0xe000ed00
 80039a4:	40023800 	.word	0x40023800
 80039a8:	24003010 	.word	0x24003010

080039ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80039ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039b2:	e003      	b.n	80039bc <LoopCopyDataInit>

080039b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80039b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80039b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80039ba:	3104      	adds	r1, #4

080039bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80039bc:	480b      	ldr	r0, [pc, #44]	; (80039ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80039c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80039c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80039c4:	d3f6      	bcc.n	80039b4 <CopyDataInit>
  ldr  r2, =_sbss
 80039c6:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80039c8:	e002      	b.n	80039d0 <LoopFillZerobss>

080039ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80039ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80039cc:	f842 3b04 	str.w	r3, [r2], #4

080039d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80039d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80039d4:	d3f9      	bcc.n	80039ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039d6:	f7ff ffb3 	bl	8003940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039da:	f000 f817 	bl	8003a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039de:	f7ff fcd5 	bl	800338c <main>
  bx  lr    
 80039e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80039e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80039e8:	08004340 	.word	0x08004340
  ldr  r0, =_sdata
 80039ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80039f0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80039f4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80039f8:	200005f0 	.word	0x200005f0

080039fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039fc:	e7fe      	b.n	80039fc <ADC_IRQHandler>
	...

08003a00 <__errno>:
 8003a00:	4b01      	ldr	r3, [pc, #4]	; (8003a08 <__errno+0x8>)
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	2000000c 	.word	0x2000000c

08003a0c <__libc_init_array>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	4e0d      	ldr	r6, [pc, #52]	; (8003a44 <__libc_init_array+0x38>)
 8003a10:	4c0d      	ldr	r4, [pc, #52]	; (8003a48 <__libc_init_array+0x3c>)
 8003a12:	1ba4      	subs	r4, r4, r6
 8003a14:	10a4      	asrs	r4, r4, #2
 8003a16:	2500      	movs	r5, #0
 8003a18:	42a5      	cmp	r5, r4
 8003a1a:	d109      	bne.n	8003a30 <__libc_init_array+0x24>
 8003a1c:	4e0b      	ldr	r6, [pc, #44]	; (8003a4c <__libc_init_array+0x40>)
 8003a1e:	4c0c      	ldr	r4, [pc, #48]	; (8003a50 <__libc_init_array+0x44>)
 8003a20:	f000 fc7a 	bl	8004318 <_init>
 8003a24:	1ba4      	subs	r4, r4, r6
 8003a26:	10a4      	asrs	r4, r4, #2
 8003a28:	2500      	movs	r5, #0
 8003a2a:	42a5      	cmp	r5, r4
 8003a2c:	d105      	bne.n	8003a3a <__libc_init_array+0x2e>
 8003a2e:	bd70      	pop	{r4, r5, r6, pc}
 8003a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a34:	4798      	blx	r3
 8003a36:	3501      	adds	r5, #1
 8003a38:	e7ee      	b.n	8003a18 <__libc_init_array+0xc>
 8003a3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a3e:	4798      	blx	r3
 8003a40:	3501      	adds	r5, #1
 8003a42:	e7f2      	b.n	8003a2a <__libc_init_array+0x1e>
 8003a44:	08004338 	.word	0x08004338
 8003a48:	08004338 	.word	0x08004338
 8003a4c:	08004338 	.word	0x08004338
 8003a50:	0800433c 	.word	0x0800433c

08003a54 <memset>:
 8003a54:	4402      	add	r2, r0
 8003a56:	4603      	mov	r3, r0
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d100      	bne.n	8003a5e <memset+0xa>
 8003a5c:	4770      	bx	lr
 8003a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a62:	e7f9      	b.n	8003a58 <memset+0x4>

08003a64 <siprintf>:
 8003a64:	b40e      	push	{r1, r2, r3}
 8003a66:	b500      	push	{lr}
 8003a68:	b09c      	sub	sp, #112	; 0x70
 8003a6a:	ab1d      	add	r3, sp, #116	; 0x74
 8003a6c:	9002      	str	r0, [sp, #8]
 8003a6e:	9006      	str	r0, [sp, #24]
 8003a70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a74:	4809      	ldr	r0, [pc, #36]	; (8003a9c <siprintf+0x38>)
 8003a76:	9107      	str	r1, [sp, #28]
 8003a78:	9104      	str	r1, [sp, #16]
 8003a7a:	4909      	ldr	r1, [pc, #36]	; (8003aa0 <siprintf+0x3c>)
 8003a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a80:	9105      	str	r1, [sp, #20]
 8003a82:	6800      	ldr	r0, [r0, #0]
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	a902      	add	r1, sp, #8
 8003a88:	f000 f866 	bl	8003b58 <_svfiprintf_r>
 8003a8c:	9b02      	ldr	r3, [sp, #8]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
 8003a92:	b01c      	add	sp, #112	; 0x70
 8003a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a98:	b003      	add	sp, #12
 8003a9a:	4770      	bx	lr
 8003a9c:	2000000c 	.word	0x2000000c
 8003aa0:	ffff0208 	.word	0xffff0208

08003aa4 <__ssputs_r>:
 8003aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa8:	688e      	ldr	r6, [r1, #8]
 8003aaa:	429e      	cmp	r6, r3
 8003aac:	4682      	mov	sl, r0
 8003aae:	460c      	mov	r4, r1
 8003ab0:	4690      	mov	r8, r2
 8003ab2:	4699      	mov	r9, r3
 8003ab4:	d837      	bhi.n	8003b26 <__ssputs_r+0x82>
 8003ab6:	898a      	ldrh	r2, [r1, #12]
 8003ab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003abc:	d031      	beq.n	8003b22 <__ssputs_r+0x7e>
 8003abe:	6825      	ldr	r5, [r4, #0]
 8003ac0:	6909      	ldr	r1, [r1, #16]
 8003ac2:	1a6f      	subs	r7, r5, r1
 8003ac4:	6965      	ldr	r5, [r4, #20]
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003acc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003ad0:	f109 0301 	add.w	r3, r9, #1
 8003ad4:	443b      	add	r3, r7
 8003ad6:	429d      	cmp	r5, r3
 8003ad8:	bf38      	it	cc
 8003ada:	461d      	movcc	r5, r3
 8003adc:	0553      	lsls	r3, r2, #21
 8003ade:	d530      	bpl.n	8003b42 <__ssputs_r+0x9e>
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	f000 fb2b 	bl	800413c <_malloc_r>
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	b950      	cbnz	r0, 8003b00 <__ssputs_r+0x5c>
 8003aea:	230c      	movs	r3, #12
 8003aec:	f8ca 3000 	str.w	r3, [sl]
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af6:	81a3      	strh	r3, [r4, #12]
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295
 8003afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b00:	463a      	mov	r2, r7
 8003b02:	6921      	ldr	r1, [r4, #16]
 8003b04:	f000 faa8 	bl	8004058 <memcpy>
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b12:	81a3      	strh	r3, [r4, #12]
 8003b14:	6126      	str	r6, [r4, #16]
 8003b16:	6165      	str	r5, [r4, #20]
 8003b18:	443e      	add	r6, r7
 8003b1a:	1bed      	subs	r5, r5, r7
 8003b1c:	6026      	str	r6, [r4, #0]
 8003b1e:	60a5      	str	r5, [r4, #8]
 8003b20:	464e      	mov	r6, r9
 8003b22:	454e      	cmp	r6, r9
 8003b24:	d900      	bls.n	8003b28 <__ssputs_r+0x84>
 8003b26:	464e      	mov	r6, r9
 8003b28:	4632      	mov	r2, r6
 8003b2a:	4641      	mov	r1, r8
 8003b2c:	6820      	ldr	r0, [r4, #0]
 8003b2e:	f000 fa9e 	bl	800406e <memmove>
 8003b32:	68a3      	ldr	r3, [r4, #8]
 8003b34:	1b9b      	subs	r3, r3, r6
 8003b36:	60a3      	str	r3, [r4, #8]
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	441e      	add	r6, r3
 8003b3c:	6026      	str	r6, [r4, #0]
 8003b3e:	2000      	movs	r0, #0
 8003b40:	e7dc      	b.n	8003afc <__ssputs_r+0x58>
 8003b42:	462a      	mov	r2, r5
 8003b44:	f000 fb54 	bl	80041f0 <_realloc_r>
 8003b48:	4606      	mov	r6, r0
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d1e2      	bne.n	8003b14 <__ssputs_r+0x70>
 8003b4e:	6921      	ldr	r1, [r4, #16]
 8003b50:	4650      	mov	r0, sl
 8003b52:	f000 faa5 	bl	80040a0 <_free_r>
 8003b56:	e7c8      	b.n	8003aea <__ssputs_r+0x46>

08003b58 <_svfiprintf_r>:
 8003b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b5c:	461d      	mov	r5, r3
 8003b5e:	898b      	ldrh	r3, [r1, #12]
 8003b60:	061f      	lsls	r7, r3, #24
 8003b62:	b09d      	sub	sp, #116	; 0x74
 8003b64:	4680      	mov	r8, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	4616      	mov	r6, r2
 8003b6a:	d50f      	bpl.n	8003b8c <_svfiprintf_r+0x34>
 8003b6c:	690b      	ldr	r3, [r1, #16]
 8003b6e:	b96b      	cbnz	r3, 8003b8c <_svfiprintf_r+0x34>
 8003b70:	2140      	movs	r1, #64	; 0x40
 8003b72:	f000 fae3 	bl	800413c <_malloc_r>
 8003b76:	6020      	str	r0, [r4, #0]
 8003b78:	6120      	str	r0, [r4, #16]
 8003b7a:	b928      	cbnz	r0, 8003b88 <_svfiprintf_r+0x30>
 8003b7c:	230c      	movs	r3, #12
 8003b7e:	f8c8 3000 	str.w	r3, [r8]
 8003b82:	f04f 30ff 	mov.w	r0, #4294967295
 8003b86:	e0c8      	b.n	8003d1a <_svfiprintf_r+0x1c2>
 8003b88:	2340      	movs	r3, #64	; 0x40
 8003b8a:	6163      	str	r3, [r4, #20]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b90:	2320      	movs	r3, #32
 8003b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b96:	2330      	movs	r3, #48	; 0x30
 8003b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b9c:	9503      	str	r5, [sp, #12]
 8003b9e:	f04f 0b01 	mov.w	fp, #1
 8003ba2:	4637      	mov	r7, r6
 8003ba4:	463d      	mov	r5, r7
 8003ba6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003baa:	b10b      	cbz	r3, 8003bb0 <_svfiprintf_r+0x58>
 8003bac:	2b25      	cmp	r3, #37	; 0x25
 8003bae:	d13e      	bne.n	8003c2e <_svfiprintf_r+0xd6>
 8003bb0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003bb4:	d00b      	beq.n	8003bce <_svfiprintf_r+0x76>
 8003bb6:	4653      	mov	r3, sl
 8003bb8:	4632      	mov	r2, r6
 8003bba:	4621      	mov	r1, r4
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	f7ff ff71 	bl	8003aa4 <__ssputs_r>
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	f000 80a4 	beq.w	8003d10 <_svfiprintf_r+0x1b8>
 8003bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bca:	4453      	add	r3, sl
 8003bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8003bce:	783b      	ldrb	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 809d 	beq.w	8003d10 <_svfiprintf_r+0x1b8>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003be0:	9304      	str	r3, [sp, #16]
 8003be2:	9307      	str	r3, [sp, #28]
 8003be4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003be8:	931a      	str	r3, [sp, #104]	; 0x68
 8003bea:	462f      	mov	r7, r5
 8003bec:	2205      	movs	r2, #5
 8003bee:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003bf2:	4850      	ldr	r0, [pc, #320]	; (8003d34 <_svfiprintf_r+0x1dc>)
 8003bf4:	f7fc faf4 	bl	80001e0 <memchr>
 8003bf8:	9b04      	ldr	r3, [sp, #16]
 8003bfa:	b9d0      	cbnz	r0, 8003c32 <_svfiprintf_r+0xda>
 8003bfc:	06d9      	lsls	r1, r3, #27
 8003bfe:	bf44      	itt	mi
 8003c00:	2220      	movmi	r2, #32
 8003c02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c06:	071a      	lsls	r2, r3, #28
 8003c08:	bf44      	itt	mi
 8003c0a:	222b      	movmi	r2, #43	; 0x2b
 8003c0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c10:	782a      	ldrb	r2, [r5, #0]
 8003c12:	2a2a      	cmp	r2, #42	; 0x2a
 8003c14:	d015      	beq.n	8003c42 <_svfiprintf_r+0xea>
 8003c16:	9a07      	ldr	r2, [sp, #28]
 8003c18:	462f      	mov	r7, r5
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	250a      	movs	r5, #10
 8003c1e:	4639      	mov	r1, r7
 8003c20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c24:	3b30      	subs	r3, #48	; 0x30
 8003c26:	2b09      	cmp	r3, #9
 8003c28:	d94d      	bls.n	8003cc6 <_svfiprintf_r+0x16e>
 8003c2a:	b1b8      	cbz	r0, 8003c5c <_svfiprintf_r+0x104>
 8003c2c:	e00f      	b.n	8003c4e <_svfiprintf_r+0xf6>
 8003c2e:	462f      	mov	r7, r5
 8003c30:	e7b8      	b.n	8003ba4 <_svfiprintf_r+0x4c>
 8003c32:	4a40      	ldr	r2, [pc, #256]	; (8003d34 <_svfiprintf_r+0x1dc>)
 8003c34:	1a80      	subs	r0, r0, r2
 8003c36:	fa0b f000 	lsl.w	r0, fp, r0
 8003c3a:	4318      	orrs	r0, r3
 8003c3c:	9004      	str	r0, [sp, #16]
 8003c3e:	463d      	mov	r5, r7
 8003c40:	e7d3      	b.n	8003bea <_svfiprintf_r+0x92>
 8003c42:	9a03      	ldr	r2, [sp, #12]
 8003c44:	1d11      	adds	r1, r2, #4
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	9103      	str	r1, [sp, #12]
 8003c4a:	2a00      	cmp	r2, #0
 8003c4c:	db01      	blt.n	8003c52 <_svfiprintf_r+0xfa>
 8003c4e:	9207      	str	r2, [sp, #28]
 8003c50:	e004      	b.n	8003c5c <_svfiprintf_r+0x104>
 8003c52:	4252      	negs	r2, r2
 8003c54:	f043 0302 	orr.w	r3, r3, #2
 8003c58:	9207      	str	r2, [sp, #28]
 8003c5a:	9304      	str	r3, [sp, #16]
 8003c5c:	783b      	ldrb	r3, [r7, #0]
 8003c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c60:	d10c      	bne.n	8003c7c <_svfiprintf_r+0x124>
 8003c62:	787b      	ldrb	r3, [r7, #1]
 8003c64:	2b2a      	cmp	r3, #42	; 0x2a
 8003c66:	d133      	bne.n	8003cd0 <_svfiprintf_r+0x178>
 8003c68:	9b03      	ldr	r3, [sp, #12]
 8003c6a:	1d1a      	adds	r2, r3, #4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	9203      	str	r2, [sp, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bfb8      	it	lt
 8003c74:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c78:	3702      	adds	r7, #2
 8003c7a:	9305      	str	r3, [sp, #20]
 8003c7c:	4d2e      	ldr	r5, [pc, #184]	; (8003d38 <_svfiprintf_r+0x1e0>)
 8003c7e:	7839      	ldrb	r1, [r7, #0]
 8003c80:	2203      	movs	r2, #3
 8003c82:	4628      	mov	r0, r5
 8003c84:	f7fc faac 	bl	80001e0 <memchr>
 8003c88:	b138      	cbz	r0, 8003c9a <_svfiprintf_r+0x142>
 8003c8a:	2340      	movs	r3, #64	; 0x40
 8003c8c:	1b40      	subs	r0, r0, r5
 8003c8e:	fa03 f000 	lsl.w	r0, r3, r0
 8003c92:	9b04      	ldr	r3, [sp, #16]
 8003c94:	4303      	orrs	r3, r0
 8003c96:	3701      	adds	r7, #1
 8003c98:	9304      	str	r3, [sp, #16]
 8003c9a:	7839      	ldrb	r1, [r7, #0]
 8003c9c:	4827      	ldr	r0, [pc, #156]	; (8003d3c <_svfiprintf_r+0x1e4>)
 8003c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ca2:	2206      	movs	r2, #6
 8003ca4:	1c7e      	adds	r6, r7, #1
 8003ca6:	f7fc fa9b 	bl	80001e0 <memchr>
 8003caa:	2800      	cmp	r0, #0
 8003cac:	d038      	beq.n	8003d20 <_svfiprintf_r+0x1c8>
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <_svfiprintf_r+0x1e8>)
 8003cb0:	bb13      	cbnz	r3, 8003cf8 <_svfiprintf_r+0x1a0>
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	3307      	adds	r3, #7
 8003cb6:	f023 0307 	bic.w	r3, r3, #7
 8003cba:	3308      	adds	r3, #8
 8003cbc:	9303      	str	r3, [sp, #12]
 8003cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cc0:	444b      	add	r3, r9
 8003cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cc4:	e76d      	b.n	8003ba2 <_svfiprintf_r+0x4a>
 8003cc6:	fb05 3202 	mla	r2, r5, r2, r3
 8003cca:	2001      	movs	r0, #1
 8003ccc:	460f      	mov	r7, r1
 8003cce:	e7a6      	b.n	8003c1e <_svfiprintf_r+0xc6>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	3701      	adds	r7, #1
 8003cd4:	9305      	str	r3, [sp, #20]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	250a      	movs	r5, #10
 8003cda:	4638      	mov	r0, r7
 8003cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ce0:	3a30      	subs	r2, #48	; 0x30
 8003ce2:	2a09      	cmp	r2, #9
 8003ce4:	d903      	bls.n	8003cee <_svfiprintf_r+0x196>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0c8      	beq.n	8003c7c <_svfiprintf_r+0x124>
 8003cea:	9105      	str	r1, [sp, #20]
 8003cec:	e7c6      	b.n	8003c7c <_svfiprintf_r+0x124>
 8003cee:	fb05 2101 	mla	r1, r5, r1, r2
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	4607      	mov	r7, r0
 8003cf6:	e7f0      	b.n	8003cda <_svfiprintf_r+0x182>
 8003cf8:	ab03      	add	r3, sp, #12
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <_svfiprintf_r+0x1ec>)
 8003d00:	a904      	add	r1, sp, #16
 8003d02:	4640      	mov	r0, r8
 8003d04:	f3af 8000 	nop.w
 8003d08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d0c:	4681      	mov	r9, r0
 8003d0e:	d1d6      	bne.n	8003cbe <_svfiprintf_r+0x166>
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	065b      	lsls	r3, r3, #25
 8003d14:	f53f af35 	bmi.w	8003b82 <_svfiprintf_r+0x2a>
 8003d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d1a:	b01d      	add	sp, #116	; 0x74
 8003d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d20:	ab03      	add	r3, sp, #12
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	4622      	mov	r2, r4
 8003d26:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <_svfiprintf_r+0x1ec>)
 8003d28:	a904      	add	r1, sp, #16
 8003d2a:	4640      	mov	r0, r8
 8003d2c:	f000 f882 	bl	8003e34 <_printf_i>
 8003d30:	e7ea      	b.n	8003d08 <_svfiprintf_r+0x1b0>
 8003d32:	bf00      	nop
 8003d34:	080042e4 	.word	0x080042e4
 8003d38:	080042ea 	.word	0x080042ea
 8003d3c:	080042ee 	.word	0x080042ee
 8003d40:	00000000 	.word	0x00000000
 8003d44:	08003aa5 	.word	0x08003aa5

08003d48 <_printf_common>:
 8003d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d4c:	4691      	mov	r9, r2
 8003d4e:	461f      	mov	r7, r3
 8003d50:	688a      	ldr	r2, [r1, #8]
 8003d52:	690b      	ldr	r3, [r1, #16]
 8003d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	bfb8      	it	lt
 8003d5c:	4613      	movlt	r3, r2
 8003d5e:	f8c9 3000 	str.w	r3, [r9]
 8003d62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d66:	4606      	mov	r6, r0
 8003d68:	460c      	mov	r4, r1
 8003d6a:	b112      	cbz	r2, 8003d72 <_printf_common+0x2a>
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	f8c9 3000 	str.w	r3, [r9]
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	0699      	lsls	r1, r3, #26
 8003d76:	bf42      	ittt	mi
 8003d78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d7c:	3302      	addmi	r3, #2
 8003d7e:	f8c9 3000 	strmi.w	r3, [r9]
 8003d82:	6825      	ldr	r5, [r4, #0]
 8003d84:	f015 0506 	ands.w	r5, r5, #6
 8003d88:	d107      	bne.n	8003d9a <_printf_common+0x52>
 8003d8a:	f104 0a19 	add.w	sl, r4, #25
 8003d8e:	68e3      	ldr	r3, [r4, #12]
 8003d90:	f8d9 2000 	ldr.w	r2, [r9]
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	42ab      	cmp	r3, r5
 8003d98:	dc28      	bgt.n	8003dec <_printf_common+0xa4>
 8003d9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d9e:	6822      	ldr	r2, [r4, #0]
 8003da0:	3300      	adds	r3, #0
 8003da2:	bf18      	it	ne
 8003da4:	2301      	movne	r3, #1
 8003da6:	0692      	lsls	r2, r2, #26
 8003da8:	d42d      	bmi.n	8003e06 <_printf_common+0xbe>
 8003daa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dae:	4639      	mov	r1, r7
 8003db0:	4630      	mov	r0, r6
 8003db2:	47c0      	blx	r8
 8003db4:	3001      	adds	r0, #1
 8003db6:	d020      	beq.n	8003dfa <_printf_common+0xb2>
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	68e5      	ldr	r5, [r4, #12]
 8003dbc:	f8d9 2000 	ldr.w	r2, [r9]
 8003dc0:	f003 0306 	and.w	r3, r3, #6
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	bf08      	it	eq
 8003dc8:	1aad      	subeq	r5, r5, r2
 8003dca:	68a3      	ldr	r3, [r4, #8]
 8003dcc:	6922      	ldr	r2, [r4, #16]
 8003dce:	bf0c      	ite	eq
 8003dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dd4:	2500      	movne	r5, #0
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	bfc4      	itt	gt
 8003dda:	1a9b      	subgt	r3, r3, r2
 8003ddc:	18ed      	addgt	r5, r5, r3
 8003dde:	f04f 0900 	mov.w	r9, #0
 8003de2:	341a      	adds	r4, #26
 8003de4:	454d      	cmp	r5, r9
 8003de6:	d11a      	bne.n	8003e1e <_printf_common+0xd6>
 8003de8:	2000      	movs	r0, #0
 8003dea:	e008      	b.n	8003dfe <_printf_common+0xb6>
 8003dec:	2301      	movs	r3, #1
 8003dee:	4652      	mov	r2, sl
 8003df0:	4639      	mov	r1, r7
 8003df2:	4630      	mov	r0, r6
 8003df4:	47c0      	blx	r8
 8003df6:	3001      	adds	r0, #1
 8003df8:	d103      	bne.n	8003e02 <_printf_common+0xba>
 8003dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e02:	3501      	adds	r5, #1
 8003e04:	e7c3      	b.n	8003d8e <_printf_common+0x46>
 8003e06:	18e1      	adds	r1, r4, r3
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	2030      	movs	r0, #48	; 0x30
 8003e0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e10:	4422      	add	r2, r4
 8003e12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	e7c5      	b.n	8003daa <_printf_common+0x62>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	4622      	mov	r2, r4
 8003e22:	4639      	mov	r1, r7
 8003e24:	4630      	mov	r0, r6
 8003e26:	47c0      	blx	r8
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d0e6      	beq.n	8003dfa <_printf_common+0xb2>
 8003e2c:	f109 0901 	add.w	r9, r9, #1
 8003e30:	e7d8      	b.n	8003de4 <_printf_common+0x9c>
	...

08003e34 <_printf_i>:
 8003e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	7e09      	ldrb	r1, [r1, #24]
 8003e40:	b085      	sub	sp, #20
 8003e42:	296e      	cmp	r1, #110	; 0x6e
 8003e44:	4617      	mov	r7, r2
 8003e46:	4606      	mov	r6, r0
 8003e48:	4698      	mov	r8, r3
 8003e4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e4c:	f000 80b3 	beq.w	8003fb6 <_printf_i+0x182>
 8003e50:	d822      	bhi.n	8003e98 <_printf_i+0x64>
 8003e52:	2963      	cmp	r1, #99	; 0x63
 8003e54:	d036      	beq.n	8003ec4 <_printf_i+0x90>
 8003e56:	d80a      	bhi.n	8003e6e <_printf_i+0x3a>
 8003e58:	2900      	cmp	r1, #0
 8003e5a:	f000 80b9 	beq.w	8003fd0 <_printf_i+0x19c>
 8003e5e:	2958      	cmp	r1, #88	; 0x58
 8003e60:	f000 8083 	beq.w	8003f6a <_printf_i+0x136>
 8003e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e6c:	e032      	b.n	8003ed4 <_printf_i+0xa0>
 8003e6e:	2964      	cmp	r1, #100	; 0x64
 8003e70:	d001      	beq.n	8003e76 <_printf_i+0x42>
 8003e72:	2969      	cmp	r1, #105	; 0x69
 8003e74:	d1f6      	bne.n	8003e64 <_printf_i+0x30>
 8003e76:	6820      	ldr	r0, [r4, #0]
 8003e78:	6813      	ldr	r3, [r2, #0]
 8003e7a:	0605      	lsls	r5, r0, #24
 8003e7c:	f103 0104 	add.w	r1, r3, #4
 8003e80:	d52a      	bpl.n	8003ed8 <_printf_i+0xa4>
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6011      	str	r1, [r2, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da03      	bge.n	8003e92 <_printf_i+0x5e>
 8003e8a:	222d      	movs	r2, #45	; 0x2d
 8003e8c:	425b      	negs	r3, r3
 8003e8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e92:	486f      	ldr	r0, [pc, #444]	; (8004050 <_printf_i+0x21c>)
 8003e94:	220a      	movs	r2, #10
 8003e96:	e039      	b.n	8003f0c <_printf_i+0xd8>
 8003e98:	2973      	cmp	r1, #115	; 0x73
 8003e9a:	f000 809d 	beq.w	8003fd8 <_printf_i+0x1a4>
 8003e9e:	d808      	bhi.n	8003eb2 <_printf_i+0x7e>
 8003ea0:	296f      	cmp	r1, #111	; 0x6f
 8003ea2:	d020      	beq.n	8003ee6 <_printf_i+0xb2>
 8003ea4:	2970      	cmp	r1, #112	; 0x70
 8003ea6:	d1dd      	bne.n	8003e64 <_printf_i+0x30>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	f043 0320 	orr.w	r3, r3, #32
 8003eae:	6023      	str	r3, [r4, #0]
 8003eb0:	e003      	b.n	8003eba <_printf_i+0x86>
 8003eb2:	2975      	cmp	r1, #117	; 0x75
 8003eb4:	d017      	beq.n	8003ee6 <_printf_i+0xb2>
 8003eb6:	2978      	cmp	r1, #120	; 0x78
 8003eb8:	d1d4      	bne.n	8003e64 <_printf_i+0x30>
 8003eba:	2378      	movs	r3, #120	; 0x78
 8003ebc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ec0:	4864      	ldr	r0, [pc, #400]	; (8004054 <_printf_i+0x220>)
 8003ec2:	e055      	b.n	8003f70 <_printf_i+0x13c>
 8003ec4:	6813      	ldr	r3, [r2, #0]
 8003ec6:	1d19      	adds	r1, r3, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6011      	str	r1, [r2, #0]
 8003ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e08c      	b.n	8003ff2 <_printf_i+0x1be>
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6011      	str	r1, [r2, #0]
 8003edc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ee0:	bf18      	it	ne
 8003ee2:	b21b      	sxthne	r3, r3
 8003ee4:	e7cf      	b.n	8003e86 <_printf_i+0x52>
 8003ee6:	6813      	ldr	r3, [r2, #0]
 8003ee8:	6825      	ldr	r5, [r4, #0]
 8003eea:	1d18      	adds	r0, r3, #4
 8003eec:	6010      	str	r0, [r2, #0]
 8003eee:	0628      	lsls	r0, r5, #24
 8003ef0:	d501      	bpl.n	8003ef6 <_printf_i+0xc2>
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	e002      	b.n	8003efc <_printf_i+0xc8>
 8003ef6:	0668      	lsls	r0, r5, #25
 8003ef8:	d5fb      	bpl.n	8003ef2 <_printf_i+0xbe>
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	4854      	ldr	r0, [pc, #336]	; (8004050 <_printf_i+0x21c>)
 8003efe:	296f      	cmp	r1, #111	; 0x6f
 8003f00:	bf14      	ite	ne
 8003f02:	220a      	movne	r2, #10
 8003f04:	2208      	moveq	r2, #8
 8003f06:	2100      	movs	r1, #0
 8003f08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f0c:	6865      	ldr	r5, [r4, #4]
 8003f0e:	60a5      	str	r5, [r4, #8]
 8003f10:	2d00      	cmp	r5, #0
 8003f12:	f2c0 8095 	blt.w	8004040 <_printf_i+0x20c>
 8003f16:	6821      	ldr	r1, [r4, #0]
 8003f18:	f021 0104 	bic.w	r1, r1, #4
 8003f1c:	6021      	str	r1, [r4, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d13d      	bne.n	8003f9e <_printf_i+0x16a>
 8003f22:	2d00      	cmp	r5, #0
 8003f24:	f040 808e 	bne.w	8004044 <_printf_i+0x210>
 8003f28:	4665      	mov	r5, ip
 8003f2a:	2a08      	cmp	r2, #8
 8003f2c:	d10b      	bne.n	8003f46 <_printf_i+0x112>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	07db      	lsls	r3, r3, #31
 8003f32:	d508      	bpl.n	8003f46 <_printf_i+0x112>
 8003f34:	6923      	ldr	r3, [r4, #16]
 8003f36:	6862      	ldr	r2, [r4, #4]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	bfde      	ittt	le
 8003f3c:	2330      	movle	r3, #48	; 0x30
 8003f3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f46:	ebac 0305 	sub.w	r3, ip, r5
 8003f4a:	6123      	str	r3, [r4, #16]
 8003f4c:	f8cd 8000 	str.w	r8, [sp]
 8003f50:	463b      	mov	r3, r7
 8003f52:	aa03      	add	r2, sp, #12
 8003f54:	4621      	mov	r1, r4
 8003f56:	4630      	mov	r0, r6
 8003f58:	f7ff fef6 	bl	8003d48 <_printf_common>
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d14d      	bne.n	8003ffc <_printf_i+0x1c8>
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295
 8003f64:	b005      	add	sp, #20
 8003f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f6a:	4839      	ldr	r0, [pc, #228]	; (8004050 <_printf_i+0x21c>)
 8003f6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003f70:	6813      	ldr	r3, [r2, #0]
 8003f72:	6821      	ldr	r1, [r4, #0]
 8003f74:	1d1d      	adds	r5, r3, #4
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6015      	str	r5, [r2, #0]
 8003f7a:	060a      	lsls	r2, r1, #24
 8003f7c:	d50b      	bpl.n	8003f96 <_printf_i+0x162>
 8003f7e:	07ca      	lsls	r2, r1, #31
 8003f80:	bf44      	itt	mi
 8003f82:	f041 0120 	orrmi.w	r1, r1, #32
 8003f86:	6021      	strmi	r1, [r4, #0]
 8003f88:	b91b      	cbnz	r3, 8003f92 <_printf_i+0x15e>
 8003f8a:	6822      	ldr	r2, [r4, #0]
 8003f8c:	f022 0220 	bic.w	r2, r2, #32
 8003f90:	6022      	str	r2, [r4, #0]
 8003f92:	2210      	movs	r2, #16
 8003f94:	e7b7      	b.n	8003f06 <_printf_i+0xd2>
 8003f96:	064d      	lsls	r5, r1, #25
 8003f98:	bf48      	it	mi
 8003f9a:	b29b      	uxthmi	r3, r3
 8003f9c:	e7ef      	b.n	8003f7e <_printf_i+0x14a>
 8003f9e:	4665      	mov	r5, ip
 8003fa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fa4:	fb02 3311 	mls	r3, r2, r1, r3
 8003fa8:	5cc3      	ldrb	r3, [r0, r3]
 8003faa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003fae:	460b      	mov	r3, r1
 8003fb0:	2900      	cmp	r1, #0
 8003fb2:	d1f5      	bne.n	8003fa0 <_printf_i+0x16c>
 8003fb4:	e7b9      	b.n	8003f2a <_printf_i+0xf6>
 8003fb6:	6813      	ldr	r3, [r2, #0]
 8003fb8:	6825      	ldr	r5, [r4, #0]
 8003fba:	6961      	ldr	r1, [r4, #20]
 8003fbc:	1d18      	adds	r0, r3, #4
 8003fbe:	6010      	str	r0, [r2, #0]
 8003fc0:	0628      	lsls	r0, r5, #24
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	d501      	bpl.n	8003fca <_printf_i+0x196>
 8003fc6:	6019      	str	r1, [r3, #0]
 8003fc8:	e002      	b.n	8003fd0 <_printf_i+0x19c>
 8003fca:	066a      	lsls	r2, r5, #25
 8003fcc:	d5fb      	bpl.n	8003fc6 <_printf_i+0x192>
 8003fce:	8019      	strh	r1, [r3, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6123      	str	r3, [r4, #16]
 8003fd4:	4665      	mov	r5, ip
 8003fd6:	e7b9      	b.n	8003f4c <_printf_i+0x118>
 8003fd8:	6813      	ldr	r3, [r2, #0]
 8003fda:	1d19      	adds	r1, r3, #4
 8003fdc:	6011      	str	r1, [r2, #0]
 8003fde:	681d      	ldr	r5, [r3, #0]
 8003fe0:	6862      	ldr	r2, [r4, #4]
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f7fc f8fb 	bl	80001e0 <memchr>
 8003fea:	b108      	cbz	r0, 8003ff0 <_printf_i+0x1bc>
 8003fec:	1b40      	subs	r0, r0, r5
 8003fee:	6060      	str	r0, [r4, #4]
 8003ff0:	6863      	ldr	r3, [r4, #4]
 8003ff2:	6123      	str	r3, [r4, #16]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ffa:	e7a7      	b.n	8003f4c <_printf_i+0x118>
 8003ffc:	6923      	ldr	r3, [r4, #16]
 8003ffe:	462a      	mov	r2, r5
 8004000:	4639      	mov	r1, r7
 8004002:	4630      	mov	r0, r6
 8004004:	47c0      	blx	r8
 8004006:	3001      	adds	r0, #1
 8004008:	d0aa      	beq.n	8003f60 <_printf_i+0x12c>
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	079b      	lsls	r3, r3, #30
 800400e:	d413      	bmi.n	8004038 <_printf_i+0x204>
 8004010:	68e0      	ldr	r0, [r4, #12]
 8004012:	9b03      	ldr	r3, [sp, #12]
 8004014:	4298      	cmp	r0, r3
 8004016:	bfb8      	it	lt
 8004018:	4618      	movlt	r0, r3
 800401a:	e7a3      	b.n	8003f64 <_printf_i+0x130>
 800401c:	2301      	movs	r3, #1
 800401e:	464a      	mov	r2, r9
 8004020:	4639      	mov	r1, r7
 8004022:	4630      	mov	r0, r6
 8004024:	47c0      	blx	r8
 8004026:	3001      	adds	r0, #1
 8004028:	d09a      	beq.n	8003f60 <_printf_i+0x12c>
 800402a:	3501      	adds	r5, #1
 800402c:	68e3      	ldr	r3, [r4, #12]
 800402e:	9a03      	ldr	r2, [sp, #12]
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	42ab      	cmp	r3, r5
 8004034:	dcf2      	bgt.n	800401c <_printf_i+0x1e8>
 8004036:	e7eb      	b.n	8004010 <_printf_i+0x1dc>
 8004038:	2500      	movs	r5, #0
 800403a:	f104 0919 	add.w	r9, r4, #25
 800403e:	e7f5      	b.n	800402c <_printf_i+0x1f8>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1ac      	bne.n	8003f9e <_printf_i+0x16a>
 8004044:	7803      	ldrb	r3, [r0, #0]
 8004046:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800404a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800404e:	e76c      	b.n	8003f2a <_printf_i+0xf6>
 8004050:	080042f5 	.word	0x080042f5
 8004054:	08004306 	.word	0x08004306

08004058 <memcpy>:
 8004058:	b510      	push	{r4, lr}
 800405a:	1e43      	subs	r3, r0, #1
 800405c:	440a      	add	r2, r1
 800405e:	4291      	cmp	r1, r2
 8004060:	d100      	bne.n	8004064 <memcpy+0xc>
 8004062:	bd10      	pop	{r4, pc}
 8004064:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800406c:	e7f7      	b.n	800405e <memcpy+0x6>

0800406e <memmove>:
 800406e:	4288      	cmp	r0, r1
 8004070:	b510      	push	{r4, lr}
 8004072:	eb01 0302 	add.w	r3, r1, r2
 8004076:	d807      	bhi.n	8004088 <memmove+0x1a>
 8004078:	1e42      	subs	r2, r0, #1
 800407a:	4299      	cmp	r1, r3
 800407c:	d00a      	beq.n	8004094 <memmove+0x26>
 800407e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004082:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004086:	e7f8      	b.n	800407a <memmove+0xc>
 8004088:	4283      	cmp	r3, r0
 800408a:	d9f5      	bls.n	8004078 <memmove+0xa>
 800408c:	1881      	adds	r1, r0, r2
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	42d3      	cmn	r3, r2
 8004092:	d100      	bne.n	8004096 <memmove+0x28>
 8004094:	bd10      	pop	{r4, pc}
 8004096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800409a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800409e:	e7f7      	b.n	8004090 <memmove+0x22>

080040a0 <_free_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	4605      	mov	r5, r0
 80040a4:	2900      	cmp	r1, #0
 80040a6:	d045      	beq.n	8004134 <_free_r+0x94>
 80040a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ac:	1f0c      	subs	r4, r1, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bfb8      	it	lt
 80040b2:	18e4      	addlt	r4, r4, r3
 80040b4:	f000 f8d2 	bl	800425c <__malloc_lock>
 80040b8:	4a1f      	ldr	r2, [pc, #124]	; (8004138 <_free_r+0x98>)
 80040ba:	6813      	ldr	r3, [r2, #0]
 80040bc:	4610      	mov	r0, r2
 80040be:	b933      	cbnz	r3, 80040ce <_free_r+0x2e>
 80040c0:	6063      	str	r3, [r4, #4]
 80040c2:	6014      	str	r4, [r2, #0]
 80040c4:	4628      	mov	r0, r5
 80040c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040ca:	f000 b8c8 	b.w	800425e <__malloc_unlock>
 80040ce:	42a3      	cmp	r3, r4
 80040d0:	d90c      	bls.n	80040ec <_free_r+0x4c>
 80040d2:	6821      	ldr	r1, [r4, #0]
 80040d4:	1862      	adds	r2, r4, r1
 80040d6:	4293      	cmp	r3, r2
 80040d8:	bf04      	itt	eq
 80040da:	681a      	ldreq	r2, [r3, #0]
 80040dc:	685b      	ldreq	r3, [r3, #4]
 80040de:	6063      	str	r3, [r4, #4]
 80040e0:	bf04      	itt	eq
 80040e2:	1852      	addeq	r2, r2, r1
 80040e4:	6022      	streq	r2, [r4, #0]
 80040e6:	6004      	str	r4, [r0, #0]
 80040e8:	e7ec      	b.n	80040c4 <_free_r+0x24>
 80040ea:	4613      	mov	r3, r2
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	b10a      	cbz	r2, 80040f4 <_free_r+0x54>
 80040f0:	42a2      	cmp	r2, r4
 80040f2:	d9fa      	bls.n	80040ea <_free_r+0x4a>
 80040f4:	6819      	ldr	r1, [r3, #0]
 80040f6:	1858      	adds	r0, r3, r1
 80040f8:	42a0      	cmp	r0, r4
 80040fa:	d10b      	bne.n	8004114 <_free_r+0x74>
 80040fc:	6820      	ldr	r0, [r4, #0]
 80040fe:	4401      	add	r1, r0
 8004100:	1858      	adds	r0, r3, r1
 8004102:	4282      	cmp	r2, r0
 8004104:	6019      	str	r1, [r3, #0]
 8004106:	d1dd      	bne.n	80040c4 <_free_r+0x24>
 8004108:	6810      	ldr	r0, [r2, #0]
 800410a:	6852      	ldr	r2, [r2, #4]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	4401      	add	r1, r0
 8004110:	6019      	str	r1, [r3, #0]
 8004112:	e7d7      	b.n	80040c4 <_free_r+0x24>
 8004114:	d902      	bls.n	800411c <_free_r+0x7c>
 8004116:	230c      	movs	r3, #12
 8004118:	602b      	str	r3, [r5, #0]
 800411a:	e7d3      	b.n	80040c4 <_free_r+0x24>
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	1821      	adds	r1, r4, r0
 8004120:	428a      	cmp	r2, r1
 8004122:	bf04      	itt	eq
 8004124:	6811      	ldreq	r1, [r2, #0]
 8004126:	6852      	ldreq	r2, [r2, #4]
 8004128:	6062      	str	r2, [r4, #4]
 800412a:	bf04      	itt	eq
 800412c:	1809      	addeq	r1, r1, r0
 800412e:	6021      	streq	r1, [r4, #0]
 8004130:	605c      	str	r4, [r3, #4]
 8004132:	e7c7      	b.n	80040c4 <_free_r+0x24>
 8004134:	bd38      	pop	{r3, r4, r5, pc}
 8004136:	bf00      	nop
 8004138:	2000049c 	.word	0x2000049c

0800413c <_malloc_r>:
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	1ccd      	adds	r5, r1, #3
 8004140:	f025 0503 	bic.w	r5, r5, #3
 8004144:	3508      	adds	r5, #8
 8004146:	2d0c      	cmp	r5, #12
 8004148:	bf38      	it	cc
 800414a:	250c      	movcc	r5, #12
 800414c:	2d00      	cmp	r5, #0
 800414e:	4606      	mov	r6, r0
 8004150:	db01      	blt.n	8004156 <_malloc_r+0x1a>
 8004152:	42a9      	cmp	r1, r5
 8004154:	d903      	bls.n	800415e <_malloc_r+0x22>
 8004156:	230c      	movs	r3, #12
 8004158:	6033      	str	r3, [r6, #0]
 800415a:	2000      	movs	r0, #0
 800415c:	bd70      	pop	{r4, r5, r6, pc}
 800415e:	f000 f87d 	bl	800425c <__malloc_lock>
 8004162:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <_malloc_r+0xac>)
 8004164:	6814      	ldr	r4, [r2, #0]
 8004166:	4621      	mov	r1, r4
 8004168:	b991      	cbnz	r1, 8004190 <_malloc_r+0x54>
 800416a:	4c20      	ldr	r4, [pc, #128]	; (80041ec <_malloc_r+0xb0>)
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	b91b      	cbnz	r3, 8004178 <_malloc_r+0x3c>
 8004170:	4630      	mov	r0, r6
 8004172:	f000 f863 	bl	800423c <_sbrk_r>
 8004176:	6020      	str	r0, [r4, #0]
 8004178:	4629      	mov	r1, r5
 800417a:	4630      	mov	r0, r6
 800417c:	f000 f85e 	bl	800423c <_sbrk_r>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d124      	bne.n	80041ce <_malloc_r+0x92>
 8004184:	230c      	movs	r3, #12
 8004186:	6033      	str	r3, [r6, #0]
 8004188:	4630      	mov	r0, r6
 800418a:	f000 f868 	bl	800425e <__malloc_unlock>
 800418e:	e7e4      	b.n	800415a <_malloc_r+0x1e>
 8004190:	680b      	ldr	r3, [r1, #0]
 8004192:	1b5b      	subs	r3, r3, r5
 8004194:	d418      	bmi.n	80041c8 <_malloc_r+0x8c>
 8004196:	2b0b      	cmp	r3, #11
 8004198:	d90f      	bls.n	80041ba <_malloc_r+0x7e>
 800419a:	600b      	str	r3, [r1, #0]
 800419c:	50cd      	str	r5, [r1, r3]
 800419e:	18cc      	adds	r4, r1, r3
 80041a0:	4630      	mov	r0, r6
 80041a2:	f000 f85c 	bl	800425e <__malloc_unlock>
 80041a6:	f104 000b 	add.w	r0, r4, #11
 80041aa:	1d23      	adds	r3, r4, #4
 80041ac:	f020 0007 	bic.w	r0, r0, #7
 80041b0:	1ac3      	subs	r3, r0, r3
 80041b2:	d0d3      	beq.n	800415c <_malloc_r+0x20>
 80041b4:	425a      	negs	r2, r3
 80041b6:	50e2      	str	r2, [r4, r3]
 80041b8:	e7d0      	b.n	800415c <_malloc_r+0x20>
 80041ba:	428c      	cmp	r4, r1
 80041bc:	684b      	ldr	r3, [r1, #4]
 80041be:	bf16      	itet	ne
 80041c0:	6063      	strne	r3, [r4, #4]
 80041c2:	6013      	streq	r3, [r2, #0]
 80041c4:	460c      	movne	r4, r1
 80041c6:	e7eb      	b.n	80041a0 <_malloc_r+0x64>
 80041c8:	460c      	mov	r4, r1
 80041ca:	6849      	ldr	r1, [r1, #4]
 80041cc:	e7cc      	b.n	8004168 <_malloc_r+0x2c>
 80041ce:	1cc4      	adds	r4, r0, #3
 80041d0:	f024 0403 	bic.w	r4, r4, #3
 80041d4:	42a0      	cmp	r0, r4
 80041d6:	d005      	beq.n	80041e4 <_malloc_r+0xa8>
 80041d8:	1a21      	subs	r1, r4, r0
 80041da:	4630      	mov	r0, r6
 80041dc:	f000 f82e 	bl	800423c <_sbrk_r>
 80041e0:	3001      	adds	r0, #1
 80041e2:	d0cf      	beq.n	8004184 <_malloc_r+0x48>
 80041e4:	6025      	str	r5, [r4, #0]
 80041e6:	e7db      	b.n	80041a0 <_malloc_r+0x64>
 80041e8:	2000049c 	.word	0x2000049c
 80041ec:	200004a0 	.word	0x200004a0

080041f0 <_realloc_r>:
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f2:	4607      	mov	r7, r0
 80041f4:	4614      	mov	r4, r2
 80041f6:	460e      	mov	r6, r1
 80041f8:	b921      	cbnz	r1, 8004204 <_realloc_r+0x14>
 80041fa:	4611      	mov	r1, r2
 80041fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004200:	f7ff bf9c 	b.w	800413c <_malloc_r>
 8004204:	b922      	cbnz	r2, 8004210 <_realloc_r+0x20>
 8004206:	f7ff ff4b 	bl	80040a0 <_free_r>
 800420a:	4625      	mov	r5, r4
 800420c:	4628      	mov	r0, r5
 800420e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004210:	f000 f826 	bl	8004260 <_malloc_usable_size_r>
 8004214:	42a0      	cmp	r0, r4
 8004216:	d20f      	bcs.n	8004238 <_realloc_r+0x48>
 8004218:	4621      	mov	r1, r4
 800421a:	4638      	mov	r0, r7
 800421c:	f7ff ff8e 	bl	800413c <_malloc_r>
 8004220:	4605      	mov	r5, r0
 8004222:	2800      	cmp	r0, #0
 8004224:	d0f2      	beq.n	800420c <_realloc_r+0x1c>
 8004226:	4631      	mov	r1, r6
 8004228:	4622      	mov	r2, r4
 800422a:	f7ff ff15 	bl	8004058 <memcpy>
 800422e:	4631      	mov	r1, r6
 8004230:	4638      	mov	r0, r7
 8004232:	f7ff ff35 	bl	80040a0 <_free_r>
 8004236:	e7e9      	b.n	800420c <_realloc_r+0x1c>
 8004238:	4635      	mov	r5, r6
 800423a:	e7e7      	b.n	800420c <_realloc_r+0x1c>

0800423c <_sbrk_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	4c06      	ldr	r4, [pc, #24]	; (8004258 <_sbrk_r+0x1c>)
 8004240:	2300      	movs	r3, #0
 8004242:	4605      	mov	r5, r0
 8004244:	4608      	mov	r0, r1
 8004246:	6023      	str	r3, [r4, #0]
 8004248:	f7ff fb4e 	bl	80038e8 <_sbrk>
 800424c:	1c43      	adds	r3, r0, #1
 800424e:	d102      	bne.n	8004256 <_sbrk_r+0x1a>
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	b103      	cbz	r3, 8004256 <_sbrk_r+0x1a>
 8004254:	602b      	str	r3, [r5, #0]
 8004256:	bd38      	pop	{r3, r4, r5, pc}
 8004258:	200005ec 	.word	0x200005ec

0800425c <__malloc_lock>:
 800425c:	4770      	bx	lr

0800425e <__malloc_unlock>:
 800425e:	4770      	bx	lr

08004260 <_malloc_usable_size_r>:
 8004260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004264:	1f18      	subs	r0, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	bfbc      	itt	lt
 800426a:	580b      	ldrlt	r3, [r1, r0]
 800426c:	18c0      	addlt	r0, r0, r3
 800426e:	4770      	bx	lr
 8004270:	43535953 	.word	0x43535953
 8004274:	3a204b4c 	.word	0x3a204b4c
 8004278:	646c2520 	.word	0x646c2520
 800427c:	0a0d7a48 	.word	0x0a0d7a48
 8004280:	00000000 	.word	0x00000000
 8004284:	4b4c4348 	.word	0x4b4c4348
 8004288:	3a202020 	.word	0x3a202020
 800428c:	646c2520 	.word	0x646c2520
 8004290:	0a0d7a48 	.word	0x0a0d7a48
 8004294:	00000000 	.word	0x00000000
 8004298:	4b4c4350 	.word	0x4b4c4350
 800429c:	3a202031 	.word	0x3a202031
 80042a0:	646c2520 	.word	0x646c2520
 80042a4:	0a0d7a48 	.word	0x0a0d7a48
 80042a8:	00000000 	.word	0x00000000
 80042ac:	4b4c4350 	.word	0x4b4c4350
 80042b0:	3a202032 	.word	0x3a202032
 80042b4:	646c2520 	.word	0x646c2520
 80042b8:	0a0d7a48 	.word	0x0a0d7a48
 80042bc:	0000000a 	.word	0x0000000a
 80042c0:	203d206e 	.word	0x203d206e
 80042c4:	0a0d6425 	.word	0x0a0d6425
 80042c8:	0000000a 	.word	0x0000000a

080042cc <AHBPrescTable>:
	...
 80042d4:	04030201 09080706                       ........

080042dc <APBPrescTable>:
 80042dc:	00000000 04030201 2b302d23 6c680020     ........#-0+ .hl
 80042ec:	6665004c 47464567 32313000 36353433     L.efgEFG.0123456
 80042fc:	41393837 45444342 31300046 35343332     789ABCDEF.012345
 800430c:	39383736 64636261 00006665              6789abcdef..

08004318 <_init>:
 8004318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431a:	bf00      	nop
 800431c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431e:	bc08      	pop	{r3}
 8004320:	469e      	mov	lr, r3
 8004322:	4770      	bx	lr

08004324 <_fini>:
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004326:	bf00      	nop
 8004328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432a:	bc08      	pop	{r3}
 800432c:	469e      	mov	lr, r3
 800432e:	4770      	bx	lr
