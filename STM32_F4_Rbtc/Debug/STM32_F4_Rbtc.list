
STM32_F4_Rbtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  20000000  08004d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005e8  20000090  08004dd8  00020090  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000678  080053c0  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fbdb  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ffa  00000000  00000000  0002fc9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f98  00000000  00000000  00031c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ec0  00000000  00000000  00032c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003e99  00000000  00000000  00033af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e2b2  00000000  00000000  00037989  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ed572  00000000  00000000  00045c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  001331ad  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004610  00000000  00000000  00133228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d20 	.word	0x08004d20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08004d20 	.word	0x08004d20

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_Init+0x34>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_Init+0x34>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_Init+0x34>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_Init+0x34>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f933 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	200f      	movs	r0, #15
 80005a4:	f000 f810 	bl	80005c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f000 f806 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023c00 	.word	0x40023c00

080005b8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x54>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x58>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f943 	bl	8000872 <HAL_SYSTICK_Config>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00e      	b.n	8000614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	d80a      	bhi.n	8000612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	2200      	movs	r2, #0
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f000 f90b 	bl	800081e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <HAL_InitTick+0x5c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
 8000610:	e000      	b.n	8000614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000028 	.word	0x20000028
 8000620:	20000004 	.word	0x20000004
 8000624:	20000000 	.word	0x20000000

08000628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x20>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_IncTick+0x24>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_IncTick+0x24>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000004 	.word	0x20000004
 800064c:	200004e0 	.word	0x200004e0

08000650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_GetTick+0x14>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200004e0 	.word	0x200004e0

08000668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <__NVIC_GetPriorityGrouping+0x18>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	f003 0307 	and.w	r3, r3, #7
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db0b      	blt.n	80006f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	f003 021f 	and.w	r2, r3, #31
 80006e4:	4907      	ldr	r1, [pc, #28]	; (8000704 <__NVIC_EnableIRQ+0x38>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	095b      	lsrs	r3, r3, #5
 80006ec:	2001      	movs	r0, #1
 80006ee:	fa00 f202 	lsl.w	r2, r0, r2
 80006f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	; (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	; (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
         );
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	; 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d4:	d301      	bcc.n	80007da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00f      	b.n	80007fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <SysTick_Config+0x40>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e2:	210f      	movs	r1, #15
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f7ff ff8e 	bl	8000708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <SysTick_Config+0x40>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <SysTick_Config+0x40>)
 80007f4:	2207      	movs	r2, #7
 80007f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	e000e010 	.word	0xe000e010

08000808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff29 	bl	8000668 <__NVIC_SetPriorityGrouping>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000830:	f7ff ff3e 	bl	80006b0 <__NVIC_GetPriorityGrouping>
 8000834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	6978      	ldr	r0, [r7, #20]
 800083c:	f7ff ff8e 	bl	800075c <NVIC_EncodePriority>
 8000840:	4602      	mov	r2, r0
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff5d 	bl	8000708 <__NVIC_SetPriority>
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff31 	bl	80006cc <__NVIC_EnableIRQ>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ffa2 	bl	80007c4 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800088e:	f000 f802 	bl	8000896 <HAL_SYSTICK_Callback>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d004      	beq.n	80008c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e00c      	b.n	80008dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2205      	movs	r2, #5
 80008c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f022 0201 	bic.w	r2, r2, #1
 80008d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
 8000902:	e16b      	b.n	8000bdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000904:	2201      	movs	r2, #1
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	429a      	cmp	r2, r3
 800091e:	f040 815a 	bne.w	8000bd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d003      	beq.n	8000932 <HAL_GPIO_Init+0x4a>
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b12      	cmp	r3, #18
 8000930:	d123      	bne.n	800097a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	08da      	lsrs	r2, r3, #3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3208      	adds	r2, #8
 800093a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	220f      	movs	r2, #15
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4013      	ands	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	691a      	ldr	r2, [r3, #16]
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	f003 0307 	and.w	r3, r3, #7
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	4313      	orrs	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	08da      	lsrs	r2, r3, #3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3208      	adds	r2, #8
 8000974:	69b9      	ldr	r1, [r7, #24]
 8000976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	2203      	movs	r2, #3
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	4013      	ands	r3, r2
 8000990:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 0203 	and.w	r2, r3, #3
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d00b      	beq.n	80009ce <HAL_GPIO_Init+0xe6>
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d007      	beq.n	80009ce <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c2:	2b11      	cmp	r3, #17
 80009c4:	d003      	beq.n	80009ce <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d130      	bne.n	8000a30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4013      	ands	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	68da      	ldr	r2, [r3, #12]
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a04:	2201      	movs	r2, #1
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	091b      	lsrs	r3, r3, #4
 8000a1a:	f003 0201 	and.w	r2, r3, #1
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4013      	ands	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	689a      	ldr	r2, [r3, #8]
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f000 80b4 	beq.w	8000bd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b5f      	ldr	r3, [pc, #380]	; (8000bf0 <HAL_GPIO_Init+0x308>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a5e      	ldr	r2, [pc, #376]	; (8000bf0 <HAL_GPIO_Init+0x308>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b5c      	ldr	r3, [pc, #368]	; (8000bf0 <HAL_GPIO_Init+0x308>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a8a:	4a5a      	ldr	r2, [pc, #360]	; (8000bf4 <HAL_GPIO_Init+0x30c>)
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a51      	ldr	r2, [pc, #324]	; (8000bf8 <HAL_GPIO_Init+0x310>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d02b      	beq.n	8000b0e <HAL_GPIO_Init+0x226>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a50      	ldr	r2, [pc, #320]	; (8000bfc <HAL_GPIO_Init+0x314>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d025      	beq.n	8000b0a <HAL_GPIO_Init+0x222>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a4f      	ldr	r2, [pc, #316]	; (8000c00 <HAL_GPIO_Init+0x318>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d01f      	beq.n	8000b06 <HAL_GPIO_Init+0x21e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a4e      	ldr	r2, [pc, #312]	; (8000c04 <HAL_GPIO_Init+0x31c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d019      	beq.n	8000b02 <HAL_GPIO_Init+0x21a>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a4d      	ldr	r2, [pc, #308]	; (8000c08 <HAL_GPIO_Init+0x320>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d013      	beq.n	8000afe <HAL_GPIO_Init+0x216>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4c      	ldr	r2, [pc, #304]	; (8000c0c <HAL_GPIO_Init+0x324>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d00d      	beq.n	8000afa <HAL_GPIO_Init+0x212>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4b      	ldr	r2, [pc, #300]	; (8000c10 <HAL_GPIO_Init+0x328>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d007      	beq.n	8000af6 <HAL_GPIO_Init+0x20e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4a      	ldr	r2, [pc, #296]	; (8000c14 <HAL_GPIO_Init+0x32c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d101      	bne.n	8000af2 <HAL_GPIO_Init+0x20a>
 8000aee:	2307      	movs	r3, #7
 8000af0:	e00e      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000af2:	2308      	movs	r3, #8
 8000af4:	e00c      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000af6:	2306      	movs	r3, #6
 8000af8:	e00a      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000afa:	2305      	movs	r3, #5
 8000afc:	e008      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000afe:	2304      	movs	r3, #4
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000b02:	2303      	movs	r3, #3
 8000b04:	e004      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000b06:	2302      	movs	r3, #2
 8000b08:	e002      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	69fa      	ldr	r2, [r7, #28]
 8000b12:	f002 0203 	and.w	r2, r2, #3
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	4093      	lsls	r3, r2
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b20:	4934      	ldr	r1, [pc, #208]	; (8000bf4 <HAL_GPIO_Init+0x30c>)
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	3302      	adds	r3, #2
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b2e:	4b3a      	ldr	r3, [pc, #232]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b52:	4a31      	ldr	r2, [pc, #196]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b58:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	4013      	ands	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b7c:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bd0:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	f67f ae90 	bls.w	8000904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000be4:	bf00      	nop
 8000be6:	3724      	adds	r7, #36	; 0x24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40013800 	.word	0x40013800
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020c00 	.word	0x40020c00
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40021400 	.word	0x40021400
 8000c10:	40021800 	.word	0x40021800
 8000c14:	40021c00 	.word	0x40021c00
 8000c18:	40013c00 	.word	0x40013c00

08000c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e001      	b.n	8000c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c5c:	787b      	ldrb	r3, [r7, #1]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c68:	e003      	b.n	8000c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	041a      	lsls	r2, r3, #16
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	619a      	str	r2, [r3, #24]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e10f      	b.n	8000eb2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d106      	bne.n	8000cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f912 	bl	8000ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2224      	movs	r2, #36	; 0x24
 8000cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f022 0201 	bic.w	r2, r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cc4:	f001 f934 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8000cc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	4a7b      	ldr	r2, [pc, #492]	; (8000ebc <HAL_I2C_Init+0x23c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d807      	bhi.n	8000ce4 <HAL_I2C_Init+0x64>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4a7a      	ldr	r2, [pc, #488]	; (8000ec0 <HAL_I2C_Init+0x240>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	bf94      	ite	ls
 8000cdc:	2301      	movls	r3, #1
 8000cde:	2300      	movhi	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	e006      	b.n	8000cf2 <HAL_I2C_Init+0x72>
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4a77      	ldr	r2, [pc, #476]	; (8000ec4 <HAL_I2C_Init+0x244>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	bf94      	ite	ls
 8000cec:	2301      	movls	r3, #1
 8000cee:	2300      	movhi	r3, #0
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e0db      	b.n	8000eb2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4a72      	ldr	r2, [pc, #456]	; (8000ec8 <HAL_I2C_Init+0x248>)
 8000cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000d02:	0c9b      	lsrs	r3, r3, #18
 8000d04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4a64      	ldr	r2, [pc, #400]	; (8000ebc <HAL_I2C_Init+0x23c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d802      	bhi.n	8000d34 <HAL_I2C_Init+0xb4>
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	3301      	adds	r3, #1
 8000d32:	e009      	b.n	8000d48 <HAL_I2C_Init+0xc8>
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d3a:	fb02 f303 	mul.w	r3, r2, r3
 8000d3e:	4a63      	ldr	r2, [pc, #396]	; (8000ecc <HAL_I2C_Init+0x24c>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	099b      	lsrs	r3, r3, #6
 8000d46:	3301      	adds	r3, #1
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	6812      	ldr	r2, [r2, #0]
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4956      	ldr	r1, [pc, #344]	; (8000ebc <HAL_I2C_Init+0x23c>)
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d80d      	bhi.n	8000d84 <HAL_I2C_Init+0x104>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	1e59      	subs	r1, r3, #1
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d76:	3301      	adds	r3, #1
 8000d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	bf38      	it	cc
 8000d80:	2304      	movcc	r3, #4
 8000d82:	e04f      	b.n	8000e24 <HAL_I2C_Init+0x1a4>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d111      	bne.n	8000db0 <HAL_I2C_Init+0x130>
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	1e58      	subs	r0, r3, #1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6859      	ldr	r1, [r3, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	440b      	add	r3, r1
 8000d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d9e:	3301      	adds	r3, #1
 8000da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	bf0c      	ite	eq
 8000da8:	2301      	moveq	r3, #1
 8000daa:	2300      	movne	r3, #0
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	e012      	b.n	8000dd6 <HAL_I2C_Init+0x156>
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	1e58      	subs	r0, r3, #1
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6859      	ldr	r1, [r3, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	0099      	lsls	r1, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	bf0c      	ite	eq
 8000dd0:	2301      	moveq	r3, #1
 8000dd2:	2300      	movne	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_I2C_Init+0x15e>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e022      	b.n	8000e24 <HAL_I2C_Init+0x1a4>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10e      	bne.n	8000e04 <HAL_I2C_Init+0x184>
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1e58      	subs	r0, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6859      	ldr	r1, [r3, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	440b      	add	r3, r1
 8000df4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000df8:	3301      	adds	r3, #1
 8000dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e02:	e00f      	b.n	8000e24 <HAL_I2C_Init+0x1a4>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	1e58      	subs	r0, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6859      	ldr	r1, [r3, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	0099      	lsls	r1, r3, #2
 8000e14:	440b      	add	r3, r1
 8000e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	6809      	ldr	r1, [r1, #0]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69da      	ldr	r2, [r3, #28]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6911      	ldr	r1, [r2, #16]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68d2      	ldr	r2, [r2, #12]
 8000e5e:	4311      	orrs	r1, r2
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6812      	ldr	r2, [r2, #0]
 8000e64:	430b      	orrs	r3, r1
 8000e66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0201 	orr.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	000186a0 	.word	0x000186a0
 8000ec0:	001e847f 	.word	0x001e847f
 8000ec4:	003d08ff 	.word	0x003d08ff
 8000ec8:	431bde83 	.word	0x431bde83
 8000ecc:	10624dd3 	.word	0x10624dd3

08000ed0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	817b      	strh	r3, [r7, #10]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff fbaa 	bl	8000650 <HAL_GetTick>
 8000efc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b20      	cmp	r3, #32
 8000f08:	f040 80e0 	bne.w	80010cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2319      	movs	r3, #25
 8000f12:	2201      	movs	r2, #1
 8000f14:	4970      	ldr	r1, [pc, #448]	; (80010d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f000 fa7a 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000f22:	2302      	movs	r3, #2
 8000f24:	e0d3      	b.n	80010ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d101      	bne.n	8000f34 <HAL_I2C_Master_Transmit+0x50>
 8000f30:	2302      	movs	r3, #2
 8000f32:	e0cc      	b.n	80010ce <HAL_I2C_Master_Transmit+0x1ea>
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d007      	beq.n	8000f5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f042 0201 	orr.w	r2, r2, #1
 8000f58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2221      	movs	r2, #33	; 0x21
 8000f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2210      	movs	r2, #16
 8000f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	893a      	ldrh	r2, [r7, #8]
 8000f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4a50      	ldr	r2, [pc, #320]	; (80010dc <HAL_I2C_Master_Transmit+0x1f8>)
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000f9c:	8979      	ldrh	r1, [r7, #10]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	6a3a      	ldr	r2, [r7, #32]
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 f9be 	bl	8001324 <I2C_MasterRequestWrite>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e08d      	b.n	80010ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000fc8:	e066      	b.n	8001098 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	6a39      	ldr	r1, [r7, #32]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 faf4 	bl	80015bc <I2C_WaitOnTXEFlagUntilTimeout>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d107      	bne.n	8000ff2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ff0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e06b      	b.n	80010ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	781a      	ldrb	r2, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001010:	b29b      	uxth	r3, r3
 8001012:	3b01      	subs	r3, #1
 8001014:	b29a      	uxth	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800101e:	3b01      	subs	r3, #1
 8001020:	b29a      	uxth	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	2b04      	cmp	r3, #4
 8001032:	d11b      	bne.n	800106c <HAL_I2C_Master_Transmit+0x188>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001038:	2b00      	cmp	r3, #0
 800103a:	d017      	beq.n	800106c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001056:	b29b      	uxth	r3, r3
 8001058:	3b01      	subs	r3, #1
 800105a:	b29a      	uxth	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001064:	3b01      	subs	r3, #1
 8001066:	b29a      	uxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	6a39      	ldr	r1, [r7, #32]
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 fae4 	bl	800163e <I2C_WaitOnBTFFlagUntilTimeout>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00d      	beq.n	8001098 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	2b04      	cmp	r3, #4
 8001082:	d107      	bne.n	8001094 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001092:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e01a      	b.n	80010ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800109c:	2b00      	cmp	r3, #0
 800109e:	d194      	bne.n	8000fca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2220      	movs	r2, #32
 80010b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e000      	b.n	80010ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80010cc:	2302      	movs	r3, #2
  }
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	00100002 	.word	0x00100002
 80010dc:	ffff0000 	.word	0xffff0000

080010e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	460b      	mov	r3, r1
 80010ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff faae 	bl	8000650 <HAL_GetTick>
 80010f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b20      	cmp	r3, #32
 8001104:	f040 8105 	bne.w	8001312 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2319      	movs	r3, #25
 800110e:	2201      	movs	r2, #1
 8001110:	4982      	ldr	r1, [pc, #520]	; (800131c <HAL_I2C_IsDeviceReady+0x23c>)
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f000 f97c 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800111e:	2302      	movs	r3, #2
 8001120:	e0f8      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <HAL_I2C_IsDeviceReady+0x50>
 800112c:	2302      	movs	r3, #2
 800112e:	e0f1      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b01      	cmp	r3, #1
 8001144:	d007      	beq.n	8001156 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 0201 	orr.w	r2, r2, #1
 8001154:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001164:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2224      	movs	r2, #36	; 0x24
 800116a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2200      	movs	r2, #0
 8001172:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4a6a      	ldr	r2, [pc, #424]	; (8001320 <HAL_I2C_IsDeviceReady+0x240>)
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001188:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2200      	movs	r2, #0
 8001192:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 f93a 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e0b6      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011a6:	897b      	ldrh	r3, [r7, #10]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80011b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fa4b 	bl	8000650 <HAL_GetTick>
 80011ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	bf0c      	ite	eq
 80011ca:	2301      	moveq	r3, #1
 80011cc:	2300      	movne	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e0:	bf0c      	ite	eq
 80011e2:	2301      	moveq	r3, #1
 80011e4:	2300      	movne	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80011ea:	e025      	b.n	8001238 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80011ec:	f7ff fa30 	bl	8000650 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d302      	bcc.n	8001202 <HAL_I2C_IsDeviceReady+0x122>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	22a0      	movs	r2, #160	; 0xa0
 8001206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b02      	cmp	r3, #2
 8001216:	bf0c      	ite	eq
 8001218:	2301      	moveq	r3, #1
 800121a:	2300      	movne	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2ba0      	cmp	r3, #160	; 0xa0
 8001242:	d005      	beq.n	8001250 <HAL_I2C_IsDeviceReady+0x170>
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_I2C_IsDeviceReady+0x170>
 800124a:	7dbb      	ldrb	r3, [r7, #22]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0cd      	beq.n	80011ec <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2220      	movs	r2, #32
 8001254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b02      	cmp	r3, #2
 8001264:	d129      	bne.n	80012ba <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001274:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2319      	movs	r3, #25
 8001292:	2201      	movs	r2, #1
 8001294:	4921      	ldr	r1, [pc, #132]	; (800131c <HAL_I2C_IsDeviceReady+0x23c>)
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f8ba 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e036      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2220      	movs	r2, #32
 80012aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e02c      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80012d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2319      	movs	r3, #25
 80012da:	2201      	movs	r2, #1
 80012dc:	490f      	ldr	r1, [pc, #60]	; (800131c <HAL_I2C_IsDeviceReady+0x23c>)
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f896 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e012      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	3301      	adds	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f4ff af3e 	bcc.w	800117a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2220      	movs	r2, #32
 8001302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8001312:	2302      	movs	r3, #2
  }
}
 8001314:	4618      	mov	r0, r3
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	00100002 	.word	0x00100002
 8001320:	ffff0000 	.word	0xffff0000

08001324 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af02      	add	r7, sp, #8
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	460b      	mov	r3, r1
 8001332:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	2b08      	cmp	r3, #8
 800133e:	d006      	beq.n	800134e <I2C_MasterRequestWrite+0x2a>
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d003      	beq.n	800134e <I2C_MasterRequestWrite+0x2a>
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800134c:	d108      	bne.n	8001360 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e00b      	b.n	8001378 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	2b12      	cmp	r3, #18
 8001366:	d107      	bne.n	8001378 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001376:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 f843 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e035      	b.n	8001400 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800139c:	d108      	bne.n	80013b0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800139e:	897b      	ldrh	r3, [r7, #10]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	e01b      	b.n	80013e8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80013b0:	897b      	ldrh	r3, [r7, #10]
 80013b2:	11db      	asrs	r3, r3, #7
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	f003 0306 	and.w	r3, r3, #6
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f063 030f 	orn	r3, r3, #15
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	490e      	ldr	r1, [pc, #56]	; (8001408 <I2C_MasterRequestWrite+0xe4>)
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f875 	bl	80014be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e010      	b.n	8001400 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80013de:	897b      	ldrh	r3, [r7, #10]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4907      	ldr	r1, [pc, #28]	; (800140c <I2C_MasterRequestWrite+0xe8>)
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f865 	bl	80014be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	00010008 	.word	0x00010008
 800140c:	00010002 	.word	0x00010002

08001410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4613      	mov	r3, r2
 800141e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001420:	e025      	b.n	800146e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d021      	beq.n	800146e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800142a:	f7ff f911 	bl	8000650 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d302      	bcc.n	8001440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d116      	bne.n	800146e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2220      	movs	r2, #32
 800144a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f043 0220 	orr.w	r2, r3, #32
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e023      	b.n	80014b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	0c1b      	lsrs	r3, r3, #16
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d10d      	bne.n	8001494 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4013      	ands	r3, r2
 8001484:	b29b      	uxth	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	bf0c      	ite	eq
 800148a:	2301      	moveq	r3, #1
 800148c:	2300      	movne	r3, #0
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	e00c      	b.n	80014ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4013      	ands	r3, r2
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf0c      	ite	eq
 80014a6:	2301      	moveq	r3, #1
 80014a8:	2300      	movne	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d0b6      	beq.n	8001422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014cc:	e051      	b.n	8001572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014dc:	d123      	bne.n	8001526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f043 0204 	orr.w	r2, r3, #4
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e046      	b.n	80015b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d021      	beq.n	8001572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800152e:	f7ff f88f 	bl	8000650 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	d302      	bcc.n	8001544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d116      	bne.n	8001572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2220      	movs	r2, #32
 800154e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f043 0220 	orr.w	r2, r3, #32
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e020      	b.n	80015b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	0c1b      	lsrs	r3, r3, #16
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d10c      	bne.n	8001596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4013      	ands	r3, r2
 8001588:	b29b      	uxth	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf14      	ite	ne
 800158e:	2301      	movne	r3, #1
 8001590:	2300      	moveq	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	e00b      	b.n	80015ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	43da      	mvns	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4013      	ands	r3, r2
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf14      	ite	ne
 80015a8:	2301      	movne	r3, #1
 80015aa:	2300      	moveq	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d18d      	bne.n	80014ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015c8:	e02d      	b.n	8001626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f878 	bl	80016c0 <I2C_IsAcknowledgeFailed>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e02d      	b.n	8001636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d021      	beq.n	8001626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015e2:	f7ff f835 	bl	8000650 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d302      	bcc.n	80015f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d116      	bne.n	8001626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2220      	movs	r2, #32
 8001602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f043 0220 	orr.w	r2, r3, #32
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e007      	b.n	8001636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001630:	2b80      	cmp	r3, #128	; 0x80
 8001632:	d1ca      	bne.n	80015ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800164a:	e02d      	b.n	80016a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 f837 	bl	80016c0 <I2C_IsAcknowledgeFailed>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e02d      	b.n	80016b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001662:	d021      	beq.n	80016a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001664:	f7fe fff4 	bl	8000650 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	429a      	cmp	r2, r3
 8001672:	d302      	bcc.n	800167a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d116      	bne.n	80016a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2220      	movs	r2, #32
 8001684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f043 0220 	orr.w	r2, r3, #32
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e007      	b.n	80016b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d1ca      	bne.n	800164c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d6:	d11b      	bne.n	8001710 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2220      	movs	r2, #32
 80016ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f043 0204 	orr.w	r2, r3, #4
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e22d      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d075      	beq.n	800182a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800173e:	4ba3      	ldr	r3, [pc, #652]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b04      	cmp	r3, #4
 8001748:	d00c      	beq.n	8001764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174a:	4ba0      	ldr	r3, [pc, #640]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001752:	2b08      	cmp	r3, #8
 8001754:	d112      	bne.n	800177c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001756:	4b9d      	ldr	r3, [pc, #628]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001762:	d10b      	bne.n	800177c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	4b99      	ldr	r3, [pc, #612]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d05b      	beq.n	8001828 <HAL_RCC_OscConfig+0x108>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d157      	bne.n	8001828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e208      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001784:	d106      	bne.n	8001794 <HAL_RCC_OscConfig+0x74>
 8001786:	4b91      	ldr	r3, [pc, #580]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a90      	ldr	r2, [pc, #576]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e01d      	b.n	80017d0 <HAL_RCC_OscConfig+0xb0>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x98>
 800179e:	4b8b      	ldr	r3, [pc, #556]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a8a      	ldr	r2, [pc, #552]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b88      	ldr	r3, [pc, #544]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a87      	ldr	r2, [pc, #540]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0xb0>
 80017b8:	4b84      	ldr	r3, [pc, #528]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a83      	ldr	r2, [pc, #524]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 80017be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b81      	ldr	r3, [pc, #516]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a80      	ldr	r2, [pc, #512]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7fe ff3a 	bl	8000650 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e0:	f7fe ff36 	bl	8000650 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e1cd      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b76      	ldr	r3, [pc, #472]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0xc0>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7fe ff26 	bl	8000650 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001808:	f7fe ff22 	bl	8000650 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1b9      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	4b6c      	ldr	r3, [pc, #432]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0xe8>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d063      	beq.n	80018fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001836:	4b65      	ldr	r3, [pc, #404]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001842:	4b62      	ldr	r3, [pc, #392]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800184a:	2b08      	cmp	r3, #8
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184e:	4b5f      	ldr	r3, [pc, #380]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b5c      	ldr	r3, [pc, #368]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x152>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e18d      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b56      	ldr	r3, [pc, #344]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4952      	ldr	r1, [pc, #328]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e03a      	b.n	80018fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b4f      	ldr	r3, [pc, #316]	; (80019d0 <HAL_RCC_OscConfig+0x2b0>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7fe fedb 	bl	8000650 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189e:	f7fe fed7 	bl	8000650 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e16e      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	4b46      	ldr	r3, [pc, #280]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b43      	ldr	r3, [pc, #268]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4940      	ldr	r1, [pc, #256]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e015      	b.n	80018fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b3f      	ldr	r3, [pc, #252]	; (80019d0 <HAL_RCC_OscConfig+0x2b0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7fe feba 	bl	8000650 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e0:	f7fe feb6 	bl	8000650 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e14d      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b36      	ldr	r3, [pc, #216]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d030      	beq.n	800196c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d016      	beq.n	8001940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <HAL_RCC_OscConfig+0x2b4>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7fe fe9a 	bl	8000650 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001920:	f7fe fe96 	bl	8000650 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e12d      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4b26      	ldr	r3, [pc, #152]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x200>
 800193e:	e015      	b.n	800196c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <HAL_RCC_OscConfig+0x2b4>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001946:	f7fe fe83 	bl	8000650 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194e:	f7fe fe7f 	bl	8000650 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e116      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a0 	beq.w	8001aba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10f      	bne.n	80019aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_RCC_OscConfig+0x2ac>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_RCC_OscConfig+0x2b8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d121      	bne.n	80019fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_RCC_OscConfig+0x2b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <HAL_RCC_OscConfig+0x2b8>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c2:	f7fe fe45 	bl	8000650 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	e011      	b.n	80019ee <HAL_RCC_OscConfig+0x2ce>
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	42470000 	.word	0x42470000
 80019d4:	42470e80 	.word	0x42470e80
 80019d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019dc:	f7fe fe38 	bl	8000650 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e0cf      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ee:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <HAL_RCC_OscConfig+0x478>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d106      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2f0>
 8001a02:	4b66      	ldr	r3, [pc, #408]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	4a65      	ldr	r2, [pc, #404]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0e:	e01c      	b.n	8001a4a <HAL_RCC_OscConfig+0x32a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d10c      	bne.n	8001a32 <HAL_RCC_OscConfig+0x312>
 8001a18:	4b60      	ldr	r3, [pc, #384]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1c:	4a5f      	ldr	r2, [pc, #380]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6713      	str	r3, [r2, #112]	; 0x70
 8001a24:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a28:	4a5c      	ldr	r2, [pc, #368]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a30:	e00b      	b.n	8001a4a <HAL_RCC_OscConfig+0x32a>
 8001a32:	4b5a      	ldr	r3, [pc, #360]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a36:	4a59      	ldr	r2, [pc, #356]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3e:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a42:	4a56      	ldr	r2, [pc, #344]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d015      	beq.n	8001a7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a52:	f7fe fdfd 	bl	8000650 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7fe fdf9 	bl	8000650 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e08e      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a70:	4b4a      	ldr	r3, [pc, #296]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0ee      	beq.n	8001a5a <HAL_RCC_OscConfig+0x33a>
 8001a7c:	e014      	b.n	8001aa8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7e:	f7fe fde7 	bl	8000650 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7fe fde3 	bl	8000650 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e078      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9c:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1ee      	bne.n	8001a86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d105      	bne.n	8001aba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aae:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4a3a      	ldr	r2, [pc, #232]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d064      	beq.n	8001b8c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ac2:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d05c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d141      	bne.n	8001b5a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <HAL_RCC_OscConfig+0x480>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7fe fdb8 	bl	8000650 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7fe fdb4 	bl	8000650 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e04b      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	019b      	lsls	r3, r3, #6
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	041b      	lsls	r3, r3, #16
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	061b      	lsls	r3, r3, #24
 8001b26:	491d      	ldr	r1, [pc, #116]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_RCC_OscConfig+0x480>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe fd8d 	bl	8000650 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7fe fd89 	bl	8000650 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e020      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x41a>
 8001b58:	e018      	b.n	8001b8c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_RCC_OscConfig+0x480>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7fe fd76 	bl	8000650 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b68:	f7fe fd72 	bl	8000650 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e009      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_RCC_OscConfig+0x47c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x448>
 8001b86:	e001      	b.n	8001b8c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	42470060 	.word	0x42470060

08001ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0ca      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b67      	ldr	r3, [pc, #412]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d90c      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b64      	ldr	r3, [pc, #400]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b62      	ldr	r3, [pc, #392]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b6      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf8:	4b58      	ldr	r3, [pc, #352]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a57      	ldr	r2, [pc, #348]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c10:	4b52      	ldr	r3, [pc, #328]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a51      	ldr	r2, [pc, #324]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001c16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b4f      	ldr	r3, [pc, #316]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	494c      	ldr	r1, [pc, #304]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d044      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d119      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e07d      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d003      	beq.n	8001c62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c62:	4b3e      	ldr	r3, [pc, #248]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e06d      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	4b3a      	ldr	r3, [pc, #232]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e065      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c82:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f023 0203 	bic.w	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4933      	ldr	r1, [pc, #204]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c94:	f7fe fcdc 	bl	8000650 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7fe fcd8 	bl	8000650 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e04d      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 020c 	and.w	r2, r3, #12
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1eb      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d20c      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e030      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4915      	ldr	r1, [pc, #84]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	490d      	ldr	r1, [pc, #52]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d2a:	f000 f81d 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d2e:	4601      	mov	r1, r0
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d46:	200f      	movs	r0, #15
 8001d48:	f7fe fc3e 	bl	80005c8 <HAL_InitTick>

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023c00 	.word	0x40023c00
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	08004cd4 	.word	0x08004cd4
 8001d64:	20000028 	.word	0x20000028

08001d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d7e:	4b63      	ldr	r3, [pc, #396]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d007      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x32>
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d008      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x38>
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f040 80b4 	bne.w	8001efc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d94:	4b5e      	ldr	r3, [pc, #376]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d96:	60bb      	str	r3, [r7, #8]
       break;
 8001d98:	e0b3      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d9a:	4b5e      	ldr	r3, [pc, #376]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001d9c:	60bb      	str	r3, [r7, #8]
      break;
 8001d9e:	e0b0      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da0:	4b5a      	ldr	r3, [pc, #360]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001da8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001daa:	4b58      	ldr	r3, [pc, #352]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d04a      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db6:	4b55      	ldr	r3, [pc, #340]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	099b      	lsrs	r3, r3, #6
 8001dbc:	f04f 0400 	mov.w	r4, #0
 8001dc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	ea03 0501 	and.w	r5, r3, r1
 8001dcc:	ea04 0602 	and.w	r6, r4, r2
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	4632      	mov	r2, r6
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	f04f 0400 	mov.w	r4, #0
 8001ddc:	0154      	lsls	r4, r2, #5
 8001dde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001de2:	014b      	lsls	r3, r1, #5
 8001de4:	4619      	mov	r1, r3
 8001de6:	4622      	mov	r2, r4
 8001de8:	1b49      	subs	r1, r1, r5
 8001dea:	eb62 0206 	sbc.w	r2, r2, r6
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	f04f 0400 	mov.w	r4, #0
 8001df6:	0194      	lsls	r4, r2, #6
 8001df8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dfc:	018b      	lsls	r3, r1, #6
 8001dfe:	1a5b      	subs	r3, r3, r1
 8001e00:	eb64 0402 	sbc.w	r4, r4, r2
 8001e04:	f04f 0100 	mov.w	r1, #0
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	00e2      	lsls	r2, r4, #3
 8001e0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e12:	00d9      	lsls	r1, r3, #3
 8001e14:	460b      	mov	r3, r1
 8001e16:	4614      	mov	r4, r2
 8001e18:	195b      	adds	r3, r3, r5
 8001e1a:	eb44 0406 	adc.w	r4, r4, r6
 8001e1e:	f04f 0100 	mov.w	r1, #0
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	0262      	lsls	r2, r4, #9
 8001e28:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e2c:	0259      	lsls	r1, r3, #9
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4614      	mov	r4, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	4621      	mov	r1, r4
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f04f 0400 	mov.w	r4, #0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4623      	mov	r3, r4
 8001e40:	f7fe fa1e 	bl	8000280 <__aeabi_uldivmod>
 8001e44:	4603      	mov	r3, r0
 8001e46:	460c      	mov	r4, r1
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	e049      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	f04f 0400 	mov.w	r4, #0
 8001e56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	ea03 0501 	and.w	r5, r3, r1
 8001e62:	ea04 0602 	and.w	r6, r4, r2
 8001e66:	4629      	mov	r1, r5
 8001e68:	4632      	mov	r2, r6
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	f04f 0400 	mov.w	r4, #0
 8001e72:	0154      	lsls	r4, r2, #5
 8001e74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e78:	014b      	lsls	r3, r1, #5
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4622      	mov	r2, r4
 8001e7e:	1b49      	subs	r1, r1, r5
 8001e80:	eb62 0206 	sbc.w	r2, r2, r6
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	f04f 0400 	mov.w	r4, #0
 8001e8c:	0194      	lsls	r4, r2, #6
 8001e8e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e92:	018b      	lsls	r3, r1, #6
 8001e94:	1a5b      	subs	r3, r3, r1
 8001e96:	eb64 0402 	sbc.w	r4, r4, r2
 8001e9a:	f04f 0100 	mov.w	r1, #0
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	00e2      	lsls	r2, r4, #3
 8001ea4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ea8:	00d9      	lsls	r1, r3, #3
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4614      	mov	r4, r2
 8001eae:	195b      	adds	r3, r3, r5
 8001eb0:	eb44 0406 	adc.w	r4, r4, r6
 8001eb4:	f04f 0100 	mov.w	r1, #0
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	02a2      	lsls	r2, r4, #10
 8001ebe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ec2:	0299      	lsls	r1, r3, #10
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4614      	mov	r4, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	4621      	mov	r1, r4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f04f 0400 	mov.w	r4, #0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4623      	mov	r3, r4
 8001ed6:	f7fe f9d3 	bl	8000280 <__aeabi_uldivmod>
 8001eda:	4603      	mov	r3, r0
 8001edc:	460c      	mov	r4, r1
 8001ede:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	3301      	adds	r3, #1
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	60bb      	str	r3, [r7, #8]
      break;
 8001efa:	e002      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001efe:	60bb      	str	r3, [r7, #8]
      break;
 8001f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f02:	68bb      	ldr	r3, [r7, #8]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	00f42400 	.word	0x00f42400
 8001f14:	007a1200 	.word	0x007a1200

08001f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000028 	.word	0x20000028

08001f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f34:	f7ff fff0 	bl	8001f18 <HAL_RCC_GetHCLKFreq>
 8001f38:	4601      	mov	r1, r0
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	0a9b      	lsrs	r3, r3, #10
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	08004ce4 	.word	0x08004ce4

08001f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f5c:	f7ff ffdc 	bl	8001f18 <HAL_RCC_GetHCLKFreq>
 8001f60:	4601      	mov	r1, r0
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	0b5b      	lsrs	r3, r3, #13
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	4a03      	ldr	r2, [pc, #12]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	08004ce4 	.word	0x08004ce4

08001f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e01d      	b.n	8001fce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f815 	bl	8001fd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 fb4a 	bl	8002658 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b085      	sub	sp, #20
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0201 	orr.w	r2, r2, #1
 8002000:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b06      	cmp	r3, #6
 8002012:	d007      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2201      	movs	r2, #1
 8002044:	6839      	ldr	r1, [r7, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fdf0 	bl	8002c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <HAL_TIM_PWM_Start+0x74>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d004      	beq.n	8002060 <HAL_TIM_PWM_Start+0x2c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a14      	ldr	r2, [pc, #80]	; (80020ac <HAL_TIM_PWM_Start+0x78>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_TIM_PWM_Start+0x30>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_TIM_PWM_Start+0x32>
 8002064:	2300      	movs	r3, #0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002078:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b06      	cmp	r3, #6
 800208a:	d007      	beq.n	800209c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40010400 	.word	0x40010400

080020b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d122      	bne.n	800210c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d11b      	bne.n	800210c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0202 	mvn.w	r2, #2
 80020dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fa92 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fa84 	bl	8002608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fa95 	bl	8002630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b04      	cmp	r3, #4
 8002118:	d122      	bne.n	8002160 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b04      	cmp	r3, #4
 8002126:	d11b      	bne.n	8002160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0204 	mvn.w	r2, #4
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fa68 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 fa5a 	bl	8002608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fa6b 	bl	8002630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b08      	cmp	r3, #8
 800216c:	d122      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b08      	cmp	r3, #8
 800217a:	d11b      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0208 	mvn.w	r2, #8
 8002184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2204      	movs	r2, #4
 800218a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fa3e 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 80021a0:	e005      	b.n	80021ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fa30 	bl	8002608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fa41 	bl	8002630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d122      	bne.n	8002208 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d11b      	bne.n	8002208 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0210 	mvn.w	r2, #16
 80021d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2208      	movs	r2, #8
 80021de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fa14 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 80021f4:	e005      	b.n	8002202 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fa06 	bl	8002608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 fa17 	bl	8002630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d10e      	bne.n	8002234 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b01      	cmp	r3, #1
 8002222:	d107      	bne.n	8002234 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0201 	mvn.w	r2, #1
 800222c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f001 fc88 	bl	8003b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223e:	2b80      	cmp	r3, #128	; 0x80
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224c:	2b80      	cmp	r3, #128	; 0x80
 800224e:	d107      	bne.n	8002260 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 fd15 	bl	8002c8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226a:	2b40      	cmp	r3, #64	; 0x40
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002278:	2b40      	cmp	r3, #64	; 0x40
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f9dc 	bl	8002644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b20      	cmp	r3, #32
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0220 	mvn.w	r2, #32
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fcdf 	bl	8002c76 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e0b4      	b.n	8002444 <HAL_TIM_PWM_ConfigChannel+0x184>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2202      	movs	r2, #2
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	f200 809f 	bhi.w	8002430 <HAL_TIM_PWM_ConfigChannel+0x170>
 80022f2:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80022f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f8:	0800232d 	.word	0x0800232d
 80022fc:	08002431 	.word	0x08002431
 8002300:	08002431 	.word	0x08002431
 8002304:	08002431 	.word	0x08002431
 8002308:	0800236d 	.word	0x0800236d
 800230c:	08002431 	.word	0x08002431
 8002310:	08002431 	.word	0x08002431
 8002314:	08002431 	.word	0x08002431
 8002318:	080023af 	.word	0x080023af
 800231c:	08002431 	.word	0x08002431
 8002320:	08002431 	.word	0x08002431
 8002324:	08002431 	.word	0x08002431
 8002328:	080023ef 	.word	0x080023ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fa30 	bl	8002798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0208 	orr.w	r2, r2, #8
 8002346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0204 	bic.w	r2, r2, #4
 8002356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6999      	ldr	r1, [r3, #24]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	619a      	str	r2, [r3, #24]
      break;
 800236a:	e062      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fa80 	bl	8002878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6999      	ldr	r1, [r3, #24]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	021a      	lsls	r2, r3, #8
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	619a      	str	r2, [r3, #24]
      break;
 80023ac:	e041      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fad5 	bl	8002964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69da      	ldr	r2, [r3, #28]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0208 	orr.w	r2, r2, #8
 80023c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0204 	bic.w	r2, r2, #4
 80023d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69d9      	ldr	r1, [r3, #28]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	61da      	str	r2, [r3, #28]
      break;
 80023ec:	e021      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fb29 	bl	8002a4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	69da      	ldr	r2, [r3, #28]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	69da      	ldr	r2, [r3, #28]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69d9      	ldr	r1, [r3, #28]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	021a      	lsls	r2, r3, #8
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	61da      	str	r2, [r3, #28]
      break;
 800242e:	e000      	b.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002430:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_TIM_GenerateEvent+0x18>
 8002460:	2302      	movs	r3, #2
 8002462:	e014      	b.n	800248e <HAL_TIM_GenerateEvent+0x42>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_TIM_ConfigClockSource+0x18>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e0a6      	b.n	8002600 <HAL_TIM_ConfigClockSource+0x166>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024d8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b40      	cmp	r3, #64	; 0x40
 80024e8:	d067      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x120>
 80024ea:	2b40      	cmp	r3, #64	; 0x40
 80024ec:	d80b      	bhi.n	8002506 <HAL_TIM_ConfigClockSource+0x6c>
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d073      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x140>
 80024f2:	2b10      	cmp	r3, #16
 80024f4:	d802      	bhi.n	80024fc <HAL_TIM_ConfigClockSource+0x62>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d06f      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80024fa:	e078      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024fc:	2b20      	cmp	r3, #32
 80024fe:	d06c      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x140>
 8002500:	2b30      	cmp	r3, #48	; 0x30
 8002502:	d06a      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002504:	e073      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002506:	2b70      	cmp	r3, #112	; 0x70
 8002508:	d00d      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x8c>
 800250a:	2b70      	cmp	r3, #112	; 0x70
 800250c:	d804      	bhi.n	8002518 <HAL_TIM_ConfigClockSource+0x7e>
 800250e:	2b50      	cmp	r3, #80	; 0x50
 8002510:	d033      	beq.n	800257a <HAL_TIM_ConfigClockSource+0xe0>
 8002512:	2b60      	cmp	r3, #96	; 0x60
 8002514:	d041      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002516:	e06a      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251c:	d066      	beq.n	80025ec <HAL_TIM_ConfigClockSource+0x152>
 800251e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002522:	d017      	beq.n	8002554 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002524:	e063      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6899      	ldr	r1, [r3, #8]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f000 fb59 	bl	8002bec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002548:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	609a      	str	r2, [r3, #8]
      break;
 8002552:	e04c      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6899      	ldr	r1, [r3, #8]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f000 fb42 	bl	8002bec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002576:	609a      	str	r2, [r3, #8]
      break;
 8002578:	e039      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	461a      	mov	r2, r3
 8002588:	f000 fab6 	bl	8002af8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2150      	movs	r1, #80	; 0x50
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fb0f 	bl	8002bb6 <TIM_ITRx_SetConfig>
      break;
 8002598:	e029      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	461a      	mov	r2, r3
 80025a8:	f000 fad5 	bl	8002b56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2160      	movs	r1, #96	; 0x60
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 faff 	bl	8002bb6 <TIM_ITRx_SetConfig>
      break;
 80025b8:	e019      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f000 fa96 	bl	8002af8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2140      	movs	r1, #64	; 0x40
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 faef 	bl	8002bb6 <TIM_ITRx_SetConfig>
      break;
 80025d8:	e009      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4619      	mov	r1, r3
 80025e4:	4610      	mov	r0, r2
 80025e6:	f000 fae6 	bl	8002bb6 <TIM_ITRx_SetConfig>
      break;
 80025ea:	e000      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a40      	ldr	r2, [pc, #256]	; (800276c <TIM_Base_SetConfig+0x114>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <TIM_Base_SetConfig+0x40>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002676:	d00f      	beq.n	8002698 <TIM_Base_SetConfig+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3d      	ldr	r2, [pc, #244]	; (8002770 <TIM_Base_SetConfig+0x118>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d00b      	beq.n	8002698 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3c      	ldr	r2, [pc, #240]	; (8002774 <TIM_Base_SetConfig+0x11c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d007      	beq.n	8002698 <TIM_Base_SetConfig+0x40>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a3b      	ldr	r2, [pc, #236]	; (8002778 <TIM_Base_SetConfig+0x120>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d003      	beq.n	8002698 <TIM_Base_SetConfig+0x40>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a3a      	ldr	r2, [pc, #232]	; (800277c <TIM_Base_SetConfig+0x124>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d108      	bne.n	80026aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a2f      	ldr	r2, [pc, #188]	; (800276c <TIM_Base_SetConfig+0x114>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d02b      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b8:	d027      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a2c      	ldr	r2, [pc, #176]	; (8002770 <TIM_Base_SetConfig+0x118>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d023      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a2b      	ldr	r2, [pc, #172]	; (8002774 <TIM_Base_SetConfig+0x11c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01f      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <TIM_Base_SetConfig+0x120>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01b      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a29      	ldr	r2, [pc, #164]	; (800277c <TIM_Base_SetConfig+0x124>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d017      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a28      	ldr	r2, [pc, #160]	; (8002780 <TIM_Base_SetConfig+0x128>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a27      	ldr	r2, [pc, #156]	; (8002784 <TIM_Base_SetConfig+0x12c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00f      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a26      	ldr	r2, [pc, #152]	; (8002788 <TIM_Base_SetConfig+0x130>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00b      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a25      	ldr	r2, [pc, #148]	; (800278c <TIM_Base_SetConfig+0x134>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a24      	ldr	r2, [pc, #144]	; (8002790 <TIM_Base_SetConfig+0x138>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d003      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a23      	ldr	r2, [pc, #140]	; (8002794 <TIM_Base_SetConfig+0x13c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d108      	bne.n	800271c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <TIM_Base_SetConfig+0x114>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d003      	beq.n	8002750 <TIM_Base_SetConfig+0xf8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a0c      	ldr	r2, [pc, #48]	; (800277c <TIM_Base_SetConfig+0x124>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d103      	bne.n	8002758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	615a      	str	r2, [r3, #20]
}
 800275e:	bf00      	nop
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40010000 	.word	0x40010000
 8002770:	40000400 	.word	0x40000400
 8002774:	40000800 	.word	0x40000800
 8002778:	40000c00 	.word	0x40000c00
 800277c:	40010400 	.word	0x40010400
 8002780:	40014000 	.word	0x40014000
 8002784:	40014400 	.word	0x40014400
 8002788:	40014800 	.word	0x40014800
 800278c:	40001800 	.word	0x40001800
 8002790:	40001c00 	.word	0x40001c00
 8002794:	40002000 	.word	0x40002000

08002798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	f023 0201 	bic.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 0303 	bic.w	r3, r3, #3
 80027ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f023 0302 	bic.w	r3, r3, #2
 80027e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a20      	ldr	r2, [pc, #128]	; (8002870 <TIM_OC1_SetConfig+0xd8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d003      	beq.n	80027fc <TIM_OC1_SetConfig+0x64>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <TIM_OC1_SetConfig+0xdc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d10c      	bne.n	8002816 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f023 0308 	bic.w	r3, r3, #8
 8002802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a15      	ldr	r2, [pc, #84]	; (8002870 <TIM_OC1_SetConfig+0xd8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d003      	beq.n	8002826 <TIM_OC1_SetConfig+0x8e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <TIM_OC1_SetConfig+0xdc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d111      	bne.n	800284a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800282c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	621a      	str	r2, [r3, #32]
}
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40010000 	.word	0x40010000
 8002874:	40010400 	.word	0x40010400

08002878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	f023 0210 	bic.w	r2, r3, #16
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f023 0320 	bic.w	r3, r3, #32
 80028c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a22      	ldr	r2, [pc, #136]	; (800295c <TIM_OC2_SetConfig+0xe4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d003      	beq.n	80028e0 <TIM_OC2_SetConfig+0x68>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a21      	ldr	r2, [pc, #132]	; (8002960 <TIM_OC2_SetConfig+0xe8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d10d      	bne.n	80028fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a17      	ldr	r2, [pc, #92]	; (800295c <TIM_OC2_SetConfig+0xe4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d003      	beq.n	800290c <TIM_OC2_SetConfig+0x94>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a16      	ldr	r2, [pc, #88]	; (8002960 <TIM_OC2_SetConfig+0xe8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d113      	bne.n	8002934 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002912:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800291a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	621a      	str	r2, [r3, #32]
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40010000 	.word	0x40010000
 8002960:	40010400 	.word	0x40010400

08002964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0303 	bic.w	r3, r3, #3
 800299a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a21      	ldr	r2, [pc, #132]	; (8002a44 <TIM_OC3_SetConfig+0xe0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d003      	beq.n	80029ca <TIM_OC3_SetConfig+0x66>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <TIM_OC3_SetConfig+0xe4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d10d      	bne.n	80029e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <TIM_OC3_SetConfig+0xe0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_OC3_SetConfig+0x92>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <TIM_OC3_SetConfig+0xe4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d113      	bne.n	8002a1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	621a      	str	r2, [r3, #32]
}
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40010000 	.word	0x40010000
 8002a48:	40010400 	.word	0x40010400

08002a4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	031b      	lsls	r3, r3, #12
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <TIM_OC4_SetConfig+0xa4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d003      	beq.n	8002ab4 <TIM_OC4_SetConfig+0x68>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <TIM_OC4_SetConfig+0xa8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d109      	bne.n	8002ac8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	019b      	lsls	r3, r3, #6
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	621a      	str	r2, [r3, #32]
}
 8002ae2:	bf00      	nop
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40010400 	.word	0x40010400

08002af8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	f023 0201 	bic.w	r2, r3, #1
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f023 030a 	bic.w	r3, r3, #10
 8002b34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	621a      	str	r2, [r3, #32]
}
 8002b4a:	bf00      	nop
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b087      	sub	sp, #28
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	f023 0210 	bic.w	r2, r3, #16
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	031b      	lsls	r3, r3, #12
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	621a      	str	r2, [r3, #32]
}
 8002baa:	bf00      	nop
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f043 0307 	orr.w	r3, r3, #7
 8002bd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	609a      	str	r2, [r3, #8]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	021a      	lsls	r2, r3, #8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	609a      	str	r2, [r3, #8]
}
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2201      	movs	r2, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a1a      	ldr	r2, [r3, #32]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	401a      	ands	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a1a      	ldr	r2, [r3, #32]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	431a      	orrs	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	621a      	str	r2, [r3, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e03f      	b.n	8002d30 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d106      	bne.n	8002cca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f837 	bl	8002d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2224      	movs	r2, #36	; 0x24
 8002cce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ce0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fbd8 	bl	8003498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cf6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d06:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d16:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	f040 8083 	bne.w	8002e74 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <HAL_UART_Transmit+0x2e>
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e07b      	b.n	8002e76 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_UART_Transmit+0x40>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e074      	b.n	8002e76 <HAL_UART_Transmit+0x12a>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2221      	movs	r2, #33	; 0x21
 8002d9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002da2:	f7fd fc55 	bl	8000650 <HAL_GetTick>
 8002da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	88fa      	ldrh	r2, [r7, #6]
 8002db2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002db4:	e042      	b.n	8002e3c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dcc:	d122      	bne.n	8002e14 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f9f1 	bl	80031c0 <UART_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e046      	b.n	8002e76 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dfa:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d103      	bne.n	8002e0c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	3302      	adds	r3, #2
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	e017      	b.n	8002e3c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	e013      	b.n	8002e3c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f9ce 	bl	80031c0 <UART_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e023      	b.n	8002e76 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	60ba      	str	r2, [r7, #8]
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1b7      	bne.n	8002db6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2140      	movs	r1, #64	; 0x40
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f9b5 	bl	80031c0 <UART_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e00a      	b.n	8002e76 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d130      	bne.n	8002efa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_UART_Transmit_IT+0x26>
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e029      	b.n	8002efc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Transmit_IT+0x38>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e022      	b.n	8002efc <HAL_UART_Transmit_IT+0x7e>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2221      	movs	r2, #33	; 0x21
 8002eda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ef4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
  }
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d140      	bne.n	8002fa4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_UART_Receive_IT+0x26>
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e039      	b.n	8002fa6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_UART_Receive_IT+0x38>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e032      	b.n	8002fa6 <HAL_UART_Receive_IT+0x9e>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	88fa      	ldrh	r2, [r7, #6]
 8002f52:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	88fa      	ldrh	r2, [r7, #6]
 8002f58:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2222      	movs	r2, #34	; 0x22
 8002f64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0220 	orr.w	r2, r2, #32
 8002f9e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e000      	b.n	8002fa6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
  }
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10d      	bne.n	8003006 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_UART_IRQHandler+0x52>
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f9c8 	bl	8003394 <UART_Receive_IT>
      return;
 8003004:	e0cc      	b.n	80031a0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80ab 	beq.w	8003164 <HAL_UART_IRQHandler+0x1b0>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d105      	bne.n	8003024 <HAL_UART_IRQHandler+0x70>
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80a0 	beq.w	8003164 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_UART_IRQHandler+0x90>
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_UART_IRQHandler+0xb0>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	f043 0202 	orr.w	r2, r3, #2
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_UART_IRQHandler+0xd0>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307c:	f043 0204 	orr.w	r2, r3, #4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_UART_IRQHandler+0xf0>
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	f043 0208 	orr.w	r2, r3, #8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d078      	beq.n	800319e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <HAL_UART_IRQHandler+0x112>
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f967 	bl	8003394 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <HAL_UART_IRQHandler+0x13a>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d031      	beq.n	8003152 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8b0 	bl	8003254 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d123      	bne.n	800314a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003110:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	2b00      	cmp	r3, #0
 8003118:	d013      	beq.n	8003142 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311e:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <HAL_UART_IRQHandler+0x1f4>)
 8003120:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fbbc 	bl	80008a4 <HAL_DMA_Abort_IT>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d016      	beq.n	8003160 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800313c:	4610      	mov	r0, r2
 800313e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003140:	e00e      	b.n	8003160 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f832 	bl	80031ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003148:	e00a      	b.n	8003160 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f82e 	bl	80031ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003150:	e006      	b.n	8003160 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f82a 	bl	80031ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800315e:	e01e      	b.n	800319e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003160:	bf00      	nop
    return;
 8003162:	e01c      	b.n	800319e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_UART_IRQHandler+0x1cc>
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f89d 	bl	80032b8 <UART_Transmit_IT>
    return;
 800317e:	e00f      	b.n	80031a0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_UART_IRQHandler+0x1ec>
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f8e5 	bl	8003364 <UART_EndTransmit_IT>
    return;
 800319a:	bf00      	nop
 800319c:	e000      	b.n	80031a0 <HAL_UART_IRQHandler+0x1ec>
    return;
 800319e:	bf00      	nop
  }
}
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	08003291 	.word	0x08003291

080031ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d0:	e02c      	b.n	800322c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d028      	beq.n	800322c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d007      	beq.n	80031f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80031e0:	f7fd fa36 	bl	8000650 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d21d      	bcs.n	800322c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e00f      	b.n	800324c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4013      	ands	r3, r2
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	429a      	cmp	r2, r3
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	429a      	cmp	r2, r3
 8003248:	d0c3      	beq.n	80031d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800326a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff ff7e 	bl	80031ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b21      	cmp	r3, #33	; 0x21
 80032ca:	d144      	bne.n	8003356 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d4:	d11a      	bne.n	800330c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	1c9a      	adds	r2, r3, #2
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	621a      	str	r2, [r3, #32]
 80032fe:	e00e      	b.n	800331e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	621a      	str	r2, [r3, #32]
 800330a:	e008      	b.n	800331e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	1c59      	adds	r1, r3, #1
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6211      	str	r1, [r2, #32]
 8003316:	781a      	ldrb	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29b      	uxth	r3, r3
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	4619      	mov	r1, r3
 800332c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10f      	bne.n	8003352 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003340:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003350:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fdf7 	bl	8003f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b22      	cmp	r3, #34	; 0x22
 80033a6:	d171      	bne.n	800348c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b0:	d123      	bne.n	80033fa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10e      	bne.n	80033de <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	1c9a      	adds	r2, r3, #2
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
 80033dc:	e029      	b.n	8003432 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	629a      	str	r2, [r3, #40]	; 0x28
 80033f8:	e01b      	b.n	8003432 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6858      	ldr	r0, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	1c59      	adds	r1, r3, #1
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6291      	str	r1, [r2, #40]	; 0x28
 8003412:	b2c2      	uxtb	r2, r0
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	e00c      	b.n	8003432 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	1c58      	adds	r0, r3, #1
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	6288      	str	r0, [r1, #40]	; 0x28
 800342a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29b      	uxth	r3, r3
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	4619      	mov	r1, r3
 8003440:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003442:	2b00      	cmp	r3, #0
 8003444:	d120      	bne.n	8003488 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0220 	bic.w	r2, r2, #32
 8003454:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003464:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fd70 	bl	8003f64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	e002      	b.n	800348e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e000      	b.n	800348e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800348c:	2302      	movs	r3, #2
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003498:	b5b0      	push	{r4, r5, r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034d8:	f023 030c 	bic.w	r3, r3, #12
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	68f9      	ldr	r1, [r7, #12]
 80034e2:	430b      	orrs	r3, r1
 80034e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699a      	ldr	r2, [r3, #24]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003504:	f040 80e4 	bne.w	80036d0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4aab      	ldr	r2, [pc, #684]	; (80037bc <UART_SetConfig+0x324>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <UART_SetConfig+0x84>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4aaa      	ldr	r2, [pc, #680]	; (80037c0 <UART_SetConfig+0x328>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d16c      	bne.n	80035f6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800351c:	f7fe fd1c 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8003520:	4602      	mov	r2, r0
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009a      	lsls	r2, r3, #2
 800352a:	441a      	add	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fbb2 f3f3 	udiv	r3, r2, r3
 8003536:	4aa3      	ldr	r2, [pc, #652]	; (80037c4 <UART_SetConfig+0x32c>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	095b      	lsrs	r3, r3, #5
 800353e:	011c      	lsls	r4, r3, #4
 8003540:	f7fe fd0a 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8003544:	4602      	mov	r2, r0
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	009a      	lsls	r2, r3, #2
 800354e:	441a      	add	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	fbb2 f5f3 	udiv	r5, r2, r3
 800355a:	f7fe fcfd 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 800355e:	4602      	mov	r2, r0
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009a      	lsls	r2, r3, #2
 8003568:	441a      	add	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	4a93      	ldr	r2, [pc, #588]	; (80037c4 <UART_SetConfig+0x32c>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2264      	movs	r2, #100	; 0x64
 800357e:	fb02 f303 	mul.w	r3, r2, r3
 8003582:	1aeb      	subs	r3, r5, r3
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	3332      	adds	r3, #50	; 0x32
 8003588:	4a8e      	ldr	r2, [pc, #568]	; (80037c4 <UART_SetConfig+0x32c>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003596:	441c      	add	r4, r3
 8003598:	f7fe fcde 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 800359c:	4602      	mov	r2, r0
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	009a      	lsls	r2, r3, #2
 80035a6:	441a      	add	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	fbb2 f5f3 	udiv	r5, r2, r3
 80035b2:	f7fe fcd1 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 80035b6:	4602      	mov	r2, r0
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009a      	lsls	r2, r3, #2
 80035c0:	441a      	add	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	4a7d      	ldr	r2, [pc, #500]	; (80037c4 <UART_SetConfig+0x32c>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2264      	movs	r2, #100	; 0x64
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	1aeb      	subs	r3, r5, r3
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	3332      	adds	r3, #50	; 0x32
 80035e0:	4a78      	ldr	r2, [pc, #480]	; (80037c4 <UART_SetConfig+0x32c>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	f003 0207 	and.w	r2, r3, #7
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4422      	add	r2, r4
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	e154      	b.n	80038a0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80035f6:	f7fe fc9b 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 80035fa:	4602      	mov	r2, r0
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	009a      	lsls	r2, r3, #2
 8003604:	441a      	add	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	4a6c      	ldr	r2, [pc, #432]	; (80037c4 <UART_SetConfig+0x32c>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	011c      	lsls	r4, r3, #4
 800361a:	f7fe fc89 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 800361e:	4602      	mov	r2, r0
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	009a      	lsls	r2, r3, #2
 8003628:	441a      	add	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	fbb2 f5f3 	udiv	r5, r2, r3
 8003634:	f7fe fc7c 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8003638:	4602      	mov	r2, r0
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	009a      	lsls	r2, r3, #2
 8003642:	441a      	add	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	4a5d      	ldr	r2, [pc, #372]	; (80037c4 <UART_SetConfig+0x32c>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	2264      	movs	r2, #100	; 0x64
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	1aeb      	subs	r3, r5, r3
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	3332      	adds	r3, #50	; 0x32
 8003662:	4a58      	ldr	r2, [pc, #352]	; (80037c4 <UART_SetConfig+0x32c>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003670:	441c      	add	r4, r3
 8003672:	f7fe fc5d 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8003676:	4602      	mov	r2, r0
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009a      	lsls	r2, r3, #2
 8003680:	441a      	add	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fbb2 f5f3 	udiv	r5, r2, r3
 800368c:	f7fe fc50 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8003690:	4602      	mov	r2, r0
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	009a      	lsls	r2, r3, #2
 800369a:	441a      	add	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	4a47      	ldr	r2, [pc, #284]	; (80037c4 <UART_SetConfig+0x32c>)
 80036a8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	2264      	movs	r2, #100	; 0x64
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
 80036b4:	1aeb      	subs	r3, r5, r3
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	3332      	adds	r3, #50	; 0x32
 80036ba:	4a42      	ldr	r2, [pc, #264]	; (80037c4 <UART_SetConfig+0x32c>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	f003 0207 	and.w	r2, r3, #7
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4422      	add	r2, r4
 80036cc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80036ce:	e0e7      	b.n	80038a0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a39      	ldr	r2, [pc, #228]	; (80037bc <UART_SetConfig+0x324>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <UART_SetConfig+0x24c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a38      	ldr	r2, [pc, #224]	; (80037c0 <UART_SetConfig+0x328>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d171      	bne.n	80037c8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80036e4:	f7fe fc38 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	009a      	lsls	r2, r3, #2
 80036f2:	441a      	add	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fe:	4a31      	ldr	r2, [pc, #196]	; (80037c4 <UART_SetConfig+0x32c>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	011c      	lsls	r4, r3, #4
 8003708:	f7fe fc26 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 800370c:	4602      	mov	r2, r0
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	009a      	lsls	r2, r3, #2
 8003716:	441a      	add	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003722:	f7fe fc19 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8003726:	4602      	mov	r2, r0
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009a      	lsls	r2, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	4a21      	ldr	r2, [pc, #132]	; (80037c4 <UART_SetConfig+0x32c>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2264      	movs	r2, #100	; 0x64
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	1aeb      	subs	r3, r5, r3
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	3332      	adds	r3, #50	; 0x32
 8003750:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <UART_SetConfig+0x32c>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800375c:	441c      	add	r4, r3
 800375e:	f7fe fbfb 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8003762:	4602      	mov	r2, r0
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	009a      	lsls	r2, r3, #2
 800376c:	441a      	add	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	fbb2 f5f3 	udiv	r5, r2, r3
 8003778:	f7fe fbee 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 800377c:	4602      	mov	r2, r0
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	009a      	lsls	r2, r3, #2
 8003786:	441a      	add	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <UART_SetConfig+0x32c>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	2264      	movs	r2, #100	; 0x64
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	1aeb      	subs	r3, r5, r3
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	3332      	adds	r3, #50	; 0x32
 80037a6:	4a07      	ldr	r2, [pc, #28]	; (80037c4 <UART_SetConfig+0x32c>)
 80037a8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	f003 020f 	and.w	r2, r3, #15
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4422      	add	r2, r4
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	e071      	b.n	80038a0 <UART_SetConfig+0x408>
 80037bc:	40011000 	.word	0x40011000
 80037c0:	40011400 	.word	0x40011400
 80037c4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80037c8:	f7fe fbb2 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	009a      	lsls	r2, r3, #2
 80037d6:	441a      	add	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e2:	4a31      	ldr	r2, [pc, #196]	; (80038a8 <UART_SetConfig+0x410>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	011c      	lsls	r4, r3, #4
 80037ec:	f7fe fba0 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	009a      	lsls	r2, r3, #2
 80037fa:	441a      	add	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	fbb2 f5f3 	udiv	r5, r2, r3
 8003806:	f7fe fb93 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 800380a:	4602      	mov	r2, r0
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	009a      	lsls	r2, r3, #2
 8003814:	441a      	add	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	4a21      	ldr	r2, [pc, #132]	; (80038a8 <UART_SetConfig+0x410>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2264      	movs	r2, #100	; 0x64
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	1aeb      	subs	r3, r5, r3
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	3332      	adds	r3, #50	; 0x32
 8003834:	4a1c      	ldr	r2, [pc, #112]	; (80038a8 <UART_SetConfig+0x410>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003840:	441c      	add	r4, r3
 8003842:	f7fe fb75 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8003846:	4602      	mov	r2, r0
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009a      	lsls	r2, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	fbb2 f5f3 	udiv	r5, r2, r3
 800385c:	f7fe fb68 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8003860:	4602      	mov	r2, r0
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009a      	lsls	r2, r3, #2
 800386a:	441a      	add	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	4a0c      	ldr	r2, [pc, #48]	; (80038a8 <UART_SetConfig+0x410>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	2264      	movs	r2, #100	; 0x64
 8003880:	fb02 f303 	mul.w	r3, r2, r3
 8003884:	1aeb      	subs	r3, r5, r3
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	3332      	adds	r3, #50	; 0x32
 800388a:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <UART_SetConfig+0x410>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4422      	add	r2, r4
 800389c:	609a      	str	r2, [r3, #8]
}
 800389e:	e7ff      	b.n	80038a0 <UART_SetConfig+0x408>
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bdb0      	pop	{r4, r5, r7, pc}
 80038a8:	51eb851f 	.word	0x51eb851f

080038ac <Error_handler>:


extern duty_H1;

void Error_handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
	while(1);
 80038b0:	e7fe      	b.n	80038b0 <Error_handler+0x4>
	...

080038b4 <GPIO_Init>:
void receive_string(uint8_t* x){
	HAL_UART_Receive(&uart2, x, sizeof(*x), 1000);
}

void GPIO_Init()
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	4b5f      	ldr	r3, [pc, #380]	; (8003a3c <GPIO_Init+0x188>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a5e      	ldr	r2, [pc, #376]	; (8003a3c <GPIO_Init+0x188>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b5c      	ldr	r3, [pc, #368]	; (8003a3c <GPIO_Init+0x188>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	4b58      	ldr	r3, [pc, #352]	; (8003a3c <GPIO_Init+0x188>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4a57      	ldr	r2, [pc, #348]	; (8003a3c <GPIO_Init+0x188>)
 80038e0:	f043 0302 	orr.w	r3, r3, #2
 80038e4:	6313      	str	r3, [r2, #48]	; 0x30
 80038e6:	4b55      	ldr	r3, [pc, #340]	; (8003a3c <GPIO_Init+0x188>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	4b51      	ldr	r3, [pc, #324]	; (8003a3c <GPIO_Init+0x188>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4a50      	ldr	r2, [pc, #320]	; (8003a3c <GPIO_Init+0x188>)
 80038fc:	f043 0308 	orr.w	r3, r3, #8
 8003900:	6313      	str	r3, [r2, #48]	; 0x30
 8003902:	4b4e      	ldr	r3, [pc, #312]	; (8003a3c <GPIO_Init+0x188>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_USART2_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	4b4a      	ldr	r3, [pc, #296]	; (8003a3c <GPIO_Init+0x188>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	4a49      	ldr	r2, [pc, #292]	; (8003a3c <GPIO_Init+0x188>)
 8003918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800391c:	6413      	str	r3, [r2, #64]	; 0x40
 800391e:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <GPIO_Init+0x188>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_I2C1_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	4b43      	ldr	r3, [pc, #268]	; (8003a3c <GPIO_Init+0x188>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	4a42      	ldr	r2, [pc, #264]	; (8003a3c <GPIO_Init+0x188>)
 8003934:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003938:	6413      	str	r3, [r2, #64]	; 0x40
 800393a:	4b40      	ldr	r3, [pc, #256]	; (8003a3c <GPIO_Init+0x188>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	4b3c      	ldr	r3, [pc, #240]	; (8003a3c <GPIO_Init+0x188>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	4a3b      	ldr	r2, [pc, #236]	; (8003a3c <GPIO_Init+0x188>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6413      	str	r3, [r2, #64]	; 0x40
 8003956:	4b39      	ldr	r3, [pc, #228]	; (8003a3c <GPIO_Init+0x188>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_TIM4_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	4b35      	ldr	r3, [pc, #212]	; (8003a3c <GPIO_Init+0x188>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	4a34      	ldr	r2, [pc, #208]	; (8003a3c <GPIO_Init+0x188>)
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	6413      	str	r3, [r2, #64]	; 0x40
 8003972:	4b32      	ldr	r3, [pc, #200]	; (8003a3c <GPIO_Init+0x188>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	687b      	ldr	r3, [r7, #4]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800397e:	2003      	movs	r0, #3
 8003980:	f7fc ff42 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>



	 gpio.Pin = GPIO_PIN_2;
 8003984:	4b2e      	ldr	r3, [pc, #184]	; (8003a40 <GPIO_Init+0x18c>)
 8003986:	2204      	movs	r2, #4
 8003988:	601a      	str	r2, [r3, #0]
	 gpio.Mode =GPIO_MODE_AF_PP;
 800398a:	4b2d      	ldr	r3, [pc, #180]	; (8003a40 <GPIO_Init+0x18c>)
 800398c:	2202      	movs	r2, #2
 800398e:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_PULLUP;
 8003990:	4b2b      	ldr	r3, [pc, #172]	; (8003a40 <GPIO_Init+0x18c>)
 8003992:	2201      	movs	r2, #1
 8003994:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8003996:	4b2a      	ldr	r3, [pc, #168]	; (8003a40 <GPIO_Init+0x18c>)
 8003998:	2200      	movs	r2, #0
 800399a:	60da      	str	r2, [r3, #12]
	 gpio.Alternate =  GPIO_AF7_USART2; //TX
 800399c:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <GPIO_Init+0x18c>)
 800399e:	2207      	movs	r2, #7
 80039a0:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOA,&gpio);
 80039a2:	4927      	ldr	r1, [pc, #156]	; (8003a40 <GPIO_Init+0x18c>)
 80039a4:	4827      	ldr	r0, [pc, #156]	; (8003a44 <GPIO_Init+0x190>)
 80039a6:	f7fc ff9f 	bl	80008e8 <HAL_GPIO_Init>

	 gpio.Pin = GPIO_PIN_3; //RX
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <GPIO_Init+0x18c>)
 80039ac:	2208      	movs	r2, #8
 80039ae:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_OD;
 80039b0:	4b23      	ldr	r3, [pc, #140]	; (8003a40 <GPIO_Init+0x18c>)
 80039b2:	2212      	movs	r2, #18
 80039b4:	605a      	str	r2, [r3, #4]
	 HAL_GPIO_Init(GPIOA,&gpio);
 80039b6:	4922      	ldr	r1, [pc, #136]	; (8003a40 <GPIO_Init+0x18c>)
 80039b8:	4822      	ldr	r0, [pc, #136]	; (8003a44 <GPIO_Init+0x190>)
 80039ba:	f7fc ff95 	bl	80008e8 <HAL_GPIO_Init>

	 gpio.Pin = GPIO_PIN_8 |GPIO_PIN_9;
 80039be:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <GPIO_Init+0x18c>)
 80039c0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80039c4:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_OD;
 80039c6:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <GPIO_Init+0x18c>)
 80039c8:	2212      	movs	r2, #18
 80039ca:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_NOPULL;
 80039cc:	4b1c      	ldr	r3, [pc, #112]	; (8003a40 <GPIO_Init+0x18c>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <GPIO_Init+0x18c>)
 80039d4:	2202      	movs	r2, #2
 80039d6:	60da      	str	r2, [r3, #12]
	 gpio.Alternate = GPIO_AF4_I2C1;
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <GPIO_Init+0x18c>)
 80039da:	2204      	movs	r2, #4
 80039dc:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOB, &gpio);
 80039de:	4918      	ldr	r1, [pc, #96]	; (8003a40 <GPIO_Init+0x18c>)
 80039e0:	4819      	ldr	r0, [pc, #100]	; (8003a48 <GPIO_Init+0x194>)
 80039e2:	f7fc ff81 	bl	80008e8 <HAL_GPIO_Init>

	 	 //TIM2
	 gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80039e6:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <GPIO_Init+0x18c>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	605a      	str	r2, [r3, #4]
	 gpio.Pin = GPIO_PIN_5;
 80039ec:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <GPIO_Init+0x18c>)
 80039ee:	2220      	movs	r2, #32
 80039f0:	601a      	str	r2, [r3, #0]
	 gpio.Pull = GPIO_NOPULL;
 80039f2:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <GPIO_Init+0x18c>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <GPIO_Init+0x18c>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	60da      	str	r2, [r3, #12]
	 gpio.Alternate = GPIO_AF1_TIM1;
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <GPIO_Init+0x18c>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOA, &gpio);
 8003a04:	490e      	ldr	r1, [pc, #56]	; (8003a40 <GPIO_Init+0x18c>)
 8003a06:	480f      	ldr	r0, [pc, #60]	; (8003a44 <GPIO_Init+0x190>)
 8003a08:	f7fc ff6e 	bl	80008e8 <HAL_GPIO_Init>

//	 	 //TIM4
	 gpio.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <GPIO_Init+0x18c>)
 8003a0e:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8003a12:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_PP;
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <GPIO_Init+0x18c>)
 8003a16:	2202      	movs	r2, #2
 8003a18:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_NOPULL;
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <GPIO_Init+0x18c>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <GPIO_Init+0x18c>)
 8003a22:	2202      	movs	r2, #2
 8003a24:	60da      	str	r2, [r3, #12]
	 gpio.Alternate = GPIO_AF2_TIM4;
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <GPIO_Init+0x18c>)
 8003a28:	2202      	movs	r2, #2
 8003a2a:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOD, &gpio);
 8003a2c:	4904      	ldr	r1, [pc, #16]	; (8003a40 <GPIO_Init+0x18c>)
 8003a2e:	4807      	ldr	r0, [pc, #28]	; (8003a4c <GPIO_Init+0x198>)
 8003a30:	f7fc ff5a 	bl	80008e8 <HAL_GPIO_Init>

}
 8003a34:	bf00      	nop
 8003a36:	3720      	adds	r7, #32
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	200005fc 	.word	0x200005fc
 8003a44:	40020000 	.word	0x40020000
 8003a48:	40020400 	.word	0x40020400
 8003a4c:	40020c00 	.word	0x40020c00

08003a50 <UART2_Init>:

void UART2_Init()
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
	uart2.Instance = USART2;
 8003a54:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <UART2_Init+0x54>)
 8003a56:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <UART2_Init+0x58>)
 8003a58:	601a      	str	r2, [r3, #0]
	uart2.Init.BaudRate = 115200;
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <UART2_Init+0x54>)
 8003a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a60:	605a      	str	r2, [r3, #4]
	uart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <UART2_Init+0x54>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	609a      	str	r2, [r3, #8]
	uart2.Init.StopBits = UART_STOPBITS_1;
 8003a68:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <UART2_Init+0x54>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	60da      	str	r2, [r3, #12]
	uart2.Init.Parity = UART_PARITY_NONE;
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <UART2_Init+0x54>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	611a      	str	r2, [r3, #16]
	uart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <UART2_Init+0x54>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	619a      	str	r2, [r3, #24]
	uart2.Init.Mode = UART_MODE_TX_RX;
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <UART2_Init+0x54>)
 8003a7c:	220c      	movs	r2, #12
 8003a7e:	615a      	str	r2, [r3, #20]
	 if ( HAL_UART_Init(&uart2) != HAL_OK )
 8003a80:	4808      	ldr	r0, [pc, #32]	; (8003aa4 <UART2_Init+0x54>)
 8003a82:	f7ff f90c 	bl	8002c9e <HAL_UART_Init>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <UART2_Init+0x40>
	 {
	 	Error_handler();
 8003a8c:	f7ff ff0e 	bl	80038ac <Error_handler>
	 }

	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a90:	2026      	movs	r0, #38	; 0x26
 8003a92:	f7fc fee0 	bl	8000856 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2101      	movs	r1, #1
 8003a9a:	2026      	movs	r0, #38	; 0x26
 8003a9c:	f7fc febf 	bl	800081e <HAL_NVIC_SetPriority>
}
 8003aa0:	bf00      	nop
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	2000057c 	.word	0x2000057c
 8003aa8:	40004400 	.word	0x40004400

08003aac <I2C1_Init>:

void I2C1_Init()
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8003ab0:	4b12      	ldr	r3, [pc, #72]	; (8003afc <I2C1_Init+0x50>)
 8003ab2:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <I2C1_Init+0x54>)
 8003ab4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 300000;
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <I2C1_Init+0x50>)
 8003ab8:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <I2C1_Init+0x58>)
 8003aba:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003abc:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <I2C1_Init+0x50>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <I2C1_Init+0x50>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <I2C1_Init+0x50>)
 8003aca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ace:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <I2C1_Init+0x50>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <I2C1_Init+0x50>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003adc:	4b07      	ldr	r3, [pc, #28]	; (8003afc <I2C1_Init+0x50>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <I2C1_Init+0x50>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ae8:	4804      	ldr	r0, [pc, #16]	; (8003afc <I2C1_Init+0x50>)
 8003aea:	f7fd f8c9 	bl	8000c80 <HAL_I2C_Init>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <I2C1_Init+0x4c>
	  {
	    Error_handler();
 8003af4:	f7ff feda 	bl	80038ac <Error_handler>

	  }
}
 8003af8:	bf00      	nop
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20000524 	.word	0x20000524
 8003b00:	40005400 	.word	0x40005400
 8003b04:	000493e0 	.word	0x000493e0

08003b08 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8003b0c:	4802      	ldr	r0, [pc, #8]	; (8003b18 <TIM2_IRQHandler+0x10>)
 8003b0e:	f7fe facf 	bl	80020b0 <HAL_TIM_IRQHandler>
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200005bc 	.word	0x200005bc

08003b1c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8003b20:	4802      	ldr	r0, [pc, #8]	; (8003b2c <TIM4_IRQHandler+0x10>)
 8003b22:	f7fe fac5 	bl	80020b0 <HAL_TIM_IRQHandler>
}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	200004e4 	.word	0x200004e4

08003b30 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&uart2);
 8003b34:	4802      	ldr	r0, [pc, #8]	; (8003b40 <USART2_IRQHandler+0x10>)
 8003b36:	f7ff fa3d 	bl	8002fb4 <HAL_UART_IRQHandler>

}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	2000057c 	.word	0x2000057c

08003b44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET)
 8003b4c:	2120      	movs	r1, #32
 8003b4e:	480c      	ldr	r0, [pc, #48]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003b50:	f7fd f864 	bl	8000c1c <HAL_GPIO_ReadPin>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d105      	bne.n	8003b66 <HAL_TIM_PeriodElapsedCallback+0x22>
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	2120      	movs	r1, #32
 8003b5e:	4808      	ldr	r0, [pc, #32]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003b60:	f7fd f874 	bl	8000c4c <HAL_GPIO_WritePin>
 8003b64:	e004      	b.n	8003b70 <HAL_TIM_PeriodElapsedCallback+0x2c>
 else
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003b66:	2200      	movs	r2, #0
 8003b68:	2120      	movs	r1, #32
 8003b6a:	4805      	ldr	r0, [pc, #20]	; (8003b80 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003b6c:	f7fd f86e 	bl	8000c4c <HAL_GPIO_WritePin>


 duty_H1 = 300;
 8003b70:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003b72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b76:	601a      	str	r2, [r3, #0]

}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40020000 	.word	0x40020000
 8003b84:	20000024 	.word	0x20000024

08003b88 <TIM2_Init>:

void TIM2_Init()
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
	htim2.Instance = TIM2;
 8003b8c:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <TIM2_Init+0x4c>)
 8003b8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b92:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 10000-1;
 8003b94:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <TIM2_Init+0x4c>)
 8003b96:	f242 720f 	movw	r2, #9999	; 0x270f
 8003b9a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b9c:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <TIM2_Init+0x4c>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <TIM2_Init+0x4c>)
 8003ba4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ba8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003baa:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <TIM2_Init+0x4c>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0;
 8003bb0:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <TIM2_Init+0x4c>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	615a      	str	r2, [r3, #20]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb6:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <TIM2_Init+0x4c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 8003bbc:	4805      	ldr	r0, [pc, #20]	; (8003bd4 <TIM2_Init+0x4c>)
 8003bbe:	f7fe f9df 	bl	8001f80 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8003bc2:	4804      	ldr	r0, [pc, #16]	; (8003bd4 <TIM2_Init+0x4c>)
 8003bc4:	f7fe fa11 	bl	8001fea <HAL_TIM_Base_Start_IT>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003bc8:	201c      	movs	r0, #28
 8003bca:	f7fc fe44 	bl	8000856 <HAL_NVIC_EnableIRQ>
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	200005bc 	.word	0x200005bc

08003bd8 <TIM4_Init>:

void TIM4_Init()
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08e      	sub	sp, #56	; 0x38
 8003bdc:	af00      	add	r7, sp, #0
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	609a      	str	r2, [r3, #8]
 8003bea:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bec:	f107 0320 	add.w	r3, r7, #32
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bf6:	1d3b      	adds	r3, r7, #4
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
 8003c04:	615a      	str	r2, [r3, #20]
 8003c06:	619a      	str	r2, [r3, #24]

	 htim4.Instance = TIM4;
 8003c08:	4b3e      	ldr	r3, [pc, #248]	; (8003d04 <TIM4_Init+0x12c>)
 8003c0a:	4a3f      	ldr	r2, [pc, #252]	; (8003d08 <TIM4_Init+0x130>)
 8003c0c:	601a      	str	r2, [r3, #0]
	 htim4.Init.Period = 1000 - 1;
 8003c0e:	4b3d      	ldr	r3, [pc, #244]	; (8003d04 <TIM4_Init+0x12c>)
 8003c10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c14:	60da      	str	r2, [r3, #12]
	 htim4.Init.Prescaler = 10000 - 1;
 8003c16:	4b3b      	ldr	r3, [pc, #236]	; (8003d04 <TIM4_Init+0x12c>)
 8003c18:	f242 720f 	movw	r2, #9999	; 0x270f
 8003c1c:	605a      	str	r2, [r3, #4]
	 htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c1e:	4b39      	ldr	r3, [pc, #228]	; (8003d04 <TIM4_Init+0x12c>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	611a      	str	r2, [r3, #16]
	 htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c24:	4b37      	ldr	r3, [pc, #220]	; (8003d04 <TIM4_Init+0x12c>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
	 htim4.Init.RepetitionCounter = 0;
 8003c2a:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <TIM4_Init+0x12c>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	615a      	str	r2, [r3, #20]
	 htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c30:	4b34      	ldr	r3, [pc, #208]	; (8003d04 <TIM4_Init+0x12c>)
 8003c32:	2280      	movs	r2, #128	; 0x80
 8003c34:	619a      	str	r2, [r3, #24]

	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c36:	4833      	ldr	r0, [pc, #204]	; (8003d04 <TIM4_Init+0x12c>)
 8003c38:	f7fe f9a2 	bl	8001f80 <HAL_TIM_Base_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <TIM4_Init+0x6e>
	  {
	    Error_handler();
 8003c42:	f7ff fe33 	bl	80038ac <Error_handler>
	  }
//		HAL_TIM_Base_Start_IT(&htim4);
//		HAL_NVIC_EnableIRQ(TIM4_IRQn);

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c50:	4619      	mov	r1, r3
 8003c52:	482c      	ldr	r0, [pc, #176]	; (8003d04 <TIM4_Init+0x12c>)
 8003c54:	f7fe fc21 	bl	800249a <HAL_TIM_ConfigClockSource>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <TIM4_Init+0x8a>
	  {
	    Error_handler();
 8003c5e:	f7ff fe25 	bl	80038ac <Error_handler>
	  }

	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c62:	2360      	movs	r3, #96	; 0x60
 8003c64:	607b      	str	r3, [r7, #4]
	 sConfigOC.Pulse = 499;
 8003c66:	f240 13f3 	movw	r3, #499	; 0x1f3
 8003c6a:	60bb      	str	r3, [r7, #8]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
	 sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003c70:	2304      	movs	r3, #4
 8003c72:	617b      	str	r3, [r7, #20]

	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	2200      	movs	r2, #0
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4822      	ldr	r0, [pc, #136]	; (8003d04 <TIM4_Init+0x12c>)
 8003c7c:	f7fe fb20 	bl	80022c0 <HAL_TIM_PWM_ConfigChannel>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <TIM4_Init+0xb2>
	  {
	    Error_handler();
 8003c86:	f7ff fe11 	bl	80038ac <Error_handler>
	  }
	  sConfigOC.Pulse = duty_H1;
 8003c8a:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <TIM4_Init+0x134>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60bb      	str	r3, [r7, #8]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c90:	1d3b      	adds	r3, r7, #4
 8003c92:	2204      	movs	r2, #4
 8003c94:	4619      	mov	r1, r3
 8003c96:	481b      	ldr	r0, [pc, #108]	; (8003d04 <TIM4_Init+0x12c>)
 8003c98:	f7fe fb12 	bl	80022c0 <HAL_TIM_PWM_ConfigChannel>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <TIM4_Init+0xce>
	  {
	    Error_handler();
 8003ca2:	f7ff fe03 	bl	80038ac <Error_handler>
	  }
	  sConfigOC.Pulse = duty_H1;
 8003ca6:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <TIM4_Init+0x134>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60bb      	str	r3, [r7, #8]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003cac:	1d3b      	adds	r3, r7, #4
 8003cae:	2208      	movs	r2, #8
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4814      	ldr	r0, [pc, #80]	; (8003d04 <TIM4_Init+0x12c>)
 8003cb4:	f7fe fb04 	bl	80022c0 <HAL_TIM_PWM_ConfigChannel>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <TIM4_Init+0xea>
	  {
	    Error_handler();
 8003cbe:	f7ff fdf5 	bl	80038ac <Error_handler>
	  }
	  sConfigOC.Pulse = 199;
 8003cc2:	23c7      	movs	r3, #199	; 0xc7
 8003cc4:	60bb      	str	r3, [r7, #8]
	  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003cc6:	1d3b      	adds	r3, r7, #4
 8003cc8:	220c      	movs	r2, #12
 8003cca:	4619      	mov	r1, r3
 8003ccc:	480d      	ldr	r0, [pc, #52]	; (8003d04 <TIM4_Init+0x12c>)
 8003cce:	f7fe faf7 	bl	80022c0 <HAL_TIM_PWM_ConfigChannel>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <TIM4_Init+0x104>
	  {
	    Error_handler();
 8003cd8:	f7ff fde8 	bl	80038ac <Error_handler>
	  }
	  HAL_NVIC_SetPriority( TIM4_IRQn, 0, 0);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2100      	movs	r1, #0
 8003ce0:	201e      	movs	r0, #30
 8003ce2:	f7fc fd9c 	bl	800081e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ( TIM4_IRQn );
 8003ce6:	201e      	movs	r0, #30
 8003ce8:	f7fc fdb5 	bl	8000856 <HAL_NVIC_EnableIRQ>

	  HAL_TIM_GenerateEvent( &htim4, TIM_EVENTSOURCE_UPDATE );
 8003cec:	2101      	movs	r1, #1
 8003cee:	4805      	ldr	r0, [pc, #20]	; (8003d04 <TIM4_Init+0x12c>)
 8003cf0:	f7fe fbac 	bl	800244c <HAL_TIM_GenerateEvent>
	  HAL_TIM_GenerateEvent( &htim4, TIM_EVENTSOURCE_CC1 );
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	4803      	ldr	r0, [pc, #12]	; (8003d04 <TIM4_Init+0x12c>)
 8003cf8:	f7fe fba8 	bl	800244c <HAL_TIM_GenerateEvent>

}
 8003cfc:	bf00      	nop
 8003cfe:	3738      	adds	r7, #56	; 0x38
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	200004e4 	.word	0x200004e4
 8003d08:	40000800 	.word	0x40000800
 8003d0c:	20000024 	.word	0x20000024

08003d10 <main>:
uint8_t m = 0x5A;
uint8_t dataRS = 0x00;
uint8_t multiple = 0x64;

int main(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b09a      	sub	sp, #104	; 0x68
 8003d14:	af00      	add	r7, sp, #0
	char msg[100];

	HAL_Init();
 8003d16:	f7fc fc33 	bl	8000580 <HAL_Init>
	SystemConfigClk();
 8003d1a:	f000 f8b3 	bl	8003e84 <SystemConfigClk>
	GPIO_Init();
 8003d1e:	f7ff fdc9 	bl	80038b4 <GPIO_Init>
    UART2_Init();
 8003d22:	f7ff fe95 	bl	8003a50 <UART2_Init>
    I2C1_Init();
 8003d26:	f7ff fec1 	bl	8003aac <I2C1_Init>
    TIM2_Init();
 8003d2a:	f7ff ff2d 	bl	8003b88 <TIM2_Init>
    TIM4_Init();
 8003d2e:	f7ff ff53 	bl	8003bd8 <TIM4_Init>
    SSD1306_Init();
 8003d32:	f000 f939 	bl	8003fa8 <SSD1306_Init>

    HAL_TIM_Base_Start_IT(&htim4);
 8003d36:	4849      	ldr	r0, [pc, #292]	; (8003e5c <main+0x14c>)
 8003d38:	f7fe f957 	bl	8001fea <HAL_TIM_Base_Start_IT>

    HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4847      	ldr	r0, [pc, #284]	; (8003e5c <main+0x14c>)
 8003d40:	f7fe f978 	bl	8002034 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8003d44:	2104      	movs	r1, #4
 8003d46:	4845      	ldr	r0, [pc, #276]	; (8003e5c <main+0x14c>)
 8003d48:	f7fe f974 	bl	8002034 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8003d4c:	2108      	movs	r1, #8
 8003d4e:	4843      	ldr	r0, [pc, #268]	; (8003e5c <main+0x14c>)
 8003d50:	f7fe f970 	bl	8002034 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8003d54:	210c      	movs	r1, #12
 8003d56:	4841      	ldr	r0, [pc, #260]	; (8003e5c <main+0x14c>)
 8003d58:	f7fe f96c 	bl	8002034 <HAL_TIM_PWM_Start>

    memset(msg,0,sizeof(msg));
 8003d5c:	1d3b      	adds	r3, r7, #4
 8003d5e:	2264      	movs	r2, #100	; 0x64
 8003d60:	2100      	movs	r1, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fb62 	bl	800442c <memset>
	sprintf(msg,"SYSCLK : %ldHz\r\n",HAL_RCC_GetSysClockFreq());
 8003d68:	f7fd fffe 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	493b      	ldr	r1, [pc, #236]	; (8003e60 <main+0x150>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fb62 	bl	800443c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fc fa28 	bl	80001d0 <strlen>
 8003d80:	4603      	mov	r3, r0
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	1d39      	adds	r1, r7, #4
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8a:	4836      	ldr	r0, [pc, #216]	; (8003e64 <main+0x154>)
 8003d8c:	f7fe ffde 	bl	8002d4c <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 8003d90:	1d3b      	adds	r3, r7, #4
 8003d92:	2264      	movs	r2, #100	; 0x64
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fb48 	bl	800442c <memset>
	sprintf(msg,"HCLK   : %ldHz\r\n",HAL_RCC_GetHCLKFreq());
 8003d9c:	f7fe f8bc 	bl	8001f18 <HAL_RCC_GetHCLKFreq>
 8003da0:	4602      	mov	r2, r0
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	4930      	ldr	r1, [pc, #192]	; (8003e68 <main+0x158>)
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fb48 	bl	800443c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8003dac:	1d3b      	adds	r3, r7, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fc fa0e 	bl	80001d0 <strlen>
 8003db4:	4603      	mov	r3, r0
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	1d39      	adds	r1, r7, #4
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbe:	4829      	ldr	r0, [pc, #164]	; (8003e64 <main+0x154>)
 8003dc0:	f7fe ffc4 	bl	8002d4c <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 8003dc4:	1d3b      	adds	r3, r7, #4
 8003dc6:	2264      	movs	r2, #100	; 0x64
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fb2e 	bl	800442c <memset>
	sprintf(msg,"PCLK1  : %ldHz\r\n",HAL_RCC_GetPCLK1Freq());
 8003dd0:	f7fe f8ae 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	4924      	ldr	r1, [pc, #144]	; (8003e6c <main+0x15c>)
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fb2e 	bl	800443c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8003de0:	1d3b      	adds	r3, r7, #4
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc f9f4 	bl	80001d0 <strlen>
 8003de8:	4603      	mov	r3, r0
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	1d39      	adds	r1, r7, #4
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295
 8003df2:	481c      	ldr	r0, [pc, #112]	; (8003e64 <main+0x154>)
 8003df4:	f7fe ffaa 	bl	8002d4c <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 8003df8:	1d3b      	adds	r3, r7, #4
 8003dfa:	2264      	movs	r2, #100	; 0x64
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fb14 	bl	800442c <memset>
	sprintf(msg,"PCLK2  : %ldHz\r\n",HAL_RCC_GetPCLK2Freq());
 8003e04:	f7fe f8a8 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	1d3b      	adds	r3, r7, #4
 8003e0c:	4918      	ldr	r1, [pc, #96]	; (8003e70 <main+0x160>)
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fb14 	bl	800443c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8003e14:	1d3b      	adds	r3, r7, #4
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fc f9da 	bl	80001d0 <strlen>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	1d39      	adds	r1, r7, #4
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	480f      	ldr	r0, [pc, #60]	; (8003e64 <main+0x154>)
 8003e28:	f7fe ff90 	bl	8002d4c <HAL_UART_Transmit>
//    	HAL_UART_Receive_IT(&uart2,&recvd_data,1);
//    }

	//

	HAL_UART_Receive_IT(&uart2, &dataRS, 1);
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	4911      	ldr	r1, [pc, #68]	; (8003e74 <main+0x164>)
 8003e30:	480c      	ldr	r0, [pc, #48]	; (8003e64 <main+0x154>)
 8003e32:	f7ff f869 	bl	8002f08 <HAL_UART_Receive_IT>
	HAL_UART_Transmit_IT(&uart2, &m, 1);
 8003e36:	2201      	movs	r2, #1
 8003e38:	490f      	ldr	r1, [pc, #60]	; (8003e78 <main+0x168>)
 8003e3a:	480a      	ldr	r0, [pc, #40]	; (8003e64 <main+0x154>)
 8003e3c:	f7ff f81f 	bl	8002e7e <HAL_UART_Transmit_IT>

	while(1){

		if(getData)
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <main+0x16c>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0fb      	beq.n	8003e40 <main+0x130>
		{
			getData = FALSE;
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <main+0x16c>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&uart2, buforRx, 20);
 8003e4e:	2214      	movs	r2, #20
 8003e50:	490b      	ldr	r1, [pc, #44]	; (8003e80 <main+0x170>)
 8003e52:	4804      	ldr	r0, [pc, #16]	; (8003e64 <main+0x154>)
 8003e54:	f7ff f813 	bl	8002e7e <HAL_UART_Transmit_IT>
		if(getData)
 8003e58:	e7f2      	b.n	8003e40 <main+0x130>
 8003e5a:	bf00      	nop
 8003e5c:	200004e4 	.word	0x200004e4
 8003e60:	08004c84 	.word	0x08004c84
 8003e64:	2000057c 	.word	0x2000057c
 8003e68:	08004c98 	.word	0x08004c98
 8003e6c:	08004cac 	.word	0x08004cac
 8003e70:	08004cc0 	.word	0x08004cc0
 8003e74:	200000c6 	.word	0x200000c6
 8003e78:	20000025 	.word	0x20000025
 8003e7c:	200000be 	.word	0x200000be
 8003e80:	200000ac 	.word	0x200000ac

08003e84 <SystemConfigClk>:

	return 0;
}

void SystemConfigClk()
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b094      	sub	sp, #80	; 0x50
 8003e88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc_init = {0};
 8003e8a:	f107 0320 	add.w	r3, r7, #32
 8003e8e:	2230      	movs	r2, #48	; 0x30
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 faca 	bl	800442c <memset>
	RCC_ClkInitTypeDef clk_init = {0};
 8003e98:	f107 030c 	add.w	r3, r7, #12
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <SystemConfigClk+0xd8>)
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	4a2a      	ldr	r2, [pc, #168]	; (8003f5c <SystemConfigClk+0xd8>)
 8003eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb8:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <SystemConfigClk+0xd8>)
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	607b      	str	r3, [r7, #4]
 8003ec8:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <SystemConfigClk+0xdc>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a24      	ldr	r2, [pc, #144]	; (8003f60 <SystemConfigClk+0xdc>)
 8003ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4b22      	ldr	r3, [pc, #136]	; (8003f60 <SystemConfigClk+0xdc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]

	memset(&osc_init,0,sizeof(osc_init));
 8003ee0:	f107 0320 	add.w	r3, r7, #32
 8003ee4:	2230      	movs	r2, #48	; 0x30
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fa9f 	bl	800442c <memset>
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	623b      	str	r3, [r7, #32]
    osc_init.HSEState = RCC_HSE_BYPASS;
 8003ef2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
    osc_init.PLL.PLLState = RCC_PLL_ON;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	63bb      	str	r3, [r7, #56]	; 0x38
    osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003efc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f00:	63fb      	str	r3, [r7, #60]	; 0x3c
	osc_init.PLL.PLLM = 4;
 8003f02:	2304      	movs	r3, #4
 8003f04:	643b      	str	r3, [r7, #64]	; 0x40
	osc_init.PLL.PLLN = 100;
 8003f06:	2364      	movs	r3, #100	; 0x64
 8003f08:	647b      	str	r3, [r7, #68]	; 0x44
	osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	64bb      	str	r3, [r7, #72]	; 0x48
	osc_init.PLL.PLLQ = 7;
 8003f0e:	2307      	movs	r3, #7
 8003f10:	64fb      	str	r3, [r7, #76]	; 0x4c

    //osc_init.HSEState = RCC_HSE_ON;
    if ( HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8003f12:	f107 0320 	add.w	r3, r7, #32
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fd fc02 	bl	8001720 <HAL_RCC_OscConfig>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <SystemConfigClk+0xa2>
    {
    	Error_handler();
 8003f22:	f7ff fcc3 	bl	80038ac <Error_handler>
    }

    clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8003f26:	230f      	movs	r3, #15
 8003f28:	60fb      	str	r3, [r7, #12]
    					RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    //clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  // NOT WORKING
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	613b      	str	r3, [r7, #16]
    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
    clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f36:	61bb      	str	r3, [r7, #24]
    clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f3c:	61fb      	str	r3, [r7, #28]

    if( HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_3) != HAL_OK)
 8003f3e:	f107 030c 	add.w	r3, r7, #12
 8003f42:	2103      	movs	r1, #3
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fd fe2d 	bl	8001ba4 <HAL_RCC_ClockConfig>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <SystemConfigClk+0xd0>
    {
    	Error_handler();
 8003f50:	f7ff fcac 	bl	80038ac <Error_handler>
    }

}
 8003f54:	bf00      	nop
 8003f56:	3750      	adds	r7, #80	; 0x50
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40007000 	.word	0x40007000

08003f64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
//
//			if (duty_H1 > 499) duty_H1 = 499;
//			if (duty_H1 < 0) duty_H1 = 0;

	}
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART2){
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a05      	ldr	r2, [pc, #20]	; (8003f9c <HAL_UART_TxCpltCallback+0x24>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d104      	bne.n	8003f94 <HAL_UART_TxCpltCallback+0x1c>


		HAL_UART_Transmit_IT(&uart2, &m, 1);
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	4904      	ldr	r1, [pc, #16]	; (8003fa0 <HAL_UART_TxCpltCallback+0x28>)
 8003f8e:	4805      	ldr	r0, [pc, #20]	; (8003fa4 <HAL_UART_TxCpltCallback+0x2c>)
 8003f90:	f7fe ff75 	bl	8002e7e <HAL_UART_Transmit_IT>
	}


}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40004400 	.word	0x40004400
 8003fa0:	20000025 	.word	0x20000025
 8003fa4:	2000057c 	.word	0x2000057c

08003fa8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003fae:	f000 f905 	bl	80041bc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003fb2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	2178      	movs	r1, #120	; 0x78
 8003fba:	485b      	ldr	r0, [pc, #364]	; (8004128 <SSD1306_Init+0x180>)
 8003fbc:	f7fd f890 	bl	80010e0 <HAL_I2C_IsDeviceReady>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e0a9      	b.n	800411e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8003fca:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003fce:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003fd0:	e002      	b.n	8003fd8 <SSD1306_Init+0x30>
		p--;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f9      	bne.n	8003fd2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003fde:	22ae      	movs	r2, #174	; 0xae
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	2078      	movs	r0, #120	; 0x78
 8003fe4:	f000 f946 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8003fe8:	2220      	movs	r2, #32
 8003fea:	2100      	movs	r1, #0
 8003fec:	2078      	movs	r0, #120	; 0x78
 8003fee:	f000 f941 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	2078      	movs	r0, #120	; 0x78
 8003ff8:	f000 f93c 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003ffc:	22b0      	movs	r2, #176	; 0xb0
 8003ffe:	2100      	movs	r1, #0
 8004000:	2078      	movs	r0, #120	; 0x78
 8004002:	f000 f937 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8004006:	22c8      	movs	r2, #200	; 0xc8
 8004008:	2100      	movs	r1, #0
 800400a:	2078      	movs	r0, #120	; 0x78
 800400c:	f000 f932 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004010:	2200      	movs	r2, #0
 8004012:	2100      	movs	r1, #0
 8004014:	2078      	movs	r0, #120	; 0x78
 8004016:	f000 f92d 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800401a:	2210      	movs	r2, #16
 800401c:	2100      	movs	r1, #0
 800401e:	2078      	movs	r0, #120	; 0x78
 8004020:	f000 f928 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004024:	2240      	movs	r2, #64	; 0x40
 8004026:	2100      	movs	r1, #0
 8004028:	2078      	movs	r0, #120	; 0x78
 800402a:	f000 f923 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800402e:	2281      	movs	r2, #129	; 0x81
 8004030:	2100      	movs	r1, #0
 8004032:	2078      	movs	r0, #120	; 0x78
 8004034:	f000 f91e 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004038:	22ff      	movs	r2, #255	; 0xff
 800403a:	2100      	movs	r1, #0
 800403c:	2078      	movs	r0, #120	; 0x78
 800403e:	f000 f919 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004042:	22a1      	movs	r2, #161	; 0xa1
 8004044:	2100      	movs	r1, #0
 8004046:	2078      	movs	r0, #120	; 0x78
 8004048:	f000 f914 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800404c:	22a6      	movs	r2, #166	; 0xa6
 800404e:	2100      	movs	r1, #0
 8004050:	2078      	movs	r0, #120	; 0x78
 8004052:	f000 f90f 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8004056:	22a8      	movs	r2, #168	; 0xa8
 8004058:	2100      	movs	r1, #0
 800405a:	2078      	movs	r0, #120	; 0x78
 800405c:	f000 f90a 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8004060:	223f      	movs	r2, #63	; 0x3f
 8004062:	2100      	movs	r1, #0
 8004064:	2078      	movs	r0, #120	; 0x78
 8004066:	f000 f905 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800406a:	22a4      	movs	r2, #164	; 0xa4
 800406c:	2100      	movs	r1, #0
 800406e:	2078      	movs	r0, #120	; 0x78
 8004070:	f000 f900 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004074:	22d3      	movs	r2, #211	; 0xd3
 8004076:	2100      	movs	r1, #0
 8004078:	2078      	movs	r0, #120	; 0x78
 800407a:	f000 f8fb 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800407e:	2200      	movs	r2, #0
 8004080:	2100      	movs	r1, #0
 8004082:	2078      	movs	r0, #120	; 0x78
 8004084:	f000 f8f6 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004088:	22d5      	movs	r2, #213	; 0xd5
 800408a:	2100      	movs	r1, #0
 800408c:	2078      	movs	r0, #120	; 0x78
 800408e:	f000 f8f1 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004092:	22f0      	movs	r2, #240	; 0xf0
 8004094:	2100      	movs	r1, #0
 8004096:	2078      	movs	r0, #120	; 0x78
 8004098:	f000 f8ec 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800409c:	22d9      	movs	r2, #217	; 0xd9
 800409e:	2100      	movs	r1, #0
 80040a0:	2078      	movs	r0, #120	; 0x78
 80040a2:	f000 f8e7 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80040a6:	2222      	movs	r2, #34	; 0x22
 80040a8:	2100      	movs	r1, #0
 80040aa:	2078      	movs	r0, #120	; 0x78
 80040ac:	f000 f8e2 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80040b0:	22da      	movs	r2, #218	; 0xda
 80040b2:	2100      	movs	r1, #0
 80040b4:	2078      	movs	r0, #120	; 0x78
 80040b6:	f000 f8dd 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80040ba:	2212      	movs	r2, #18
 80040bc:	2100      	movs	r1, #0
 80040be:	2078      	movs	r0, #120	; 0x78
 80040c0:	f000 f8d8 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80040c4:	22db      	movs	r2, #219	; 0xdb
 80040c6:	2100      	movs	r1, #0
 80040c8:	2078      	movs	r0, #120	; 0x78
 80040ca:	f000 f8d3 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80040ce:	2220      	movs	r2, #32
 80040d0:	2100      	movs	r1, #0
 80040d2:	2078      	movs	r0, #120	; 0x78
 80040d4:	f000 f8ce 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80040d8:	228d      	movs	r2, #141	; 0x8d
 80040da:	2100      	movs	r1, #0
 80040dc:	2078      	movs	r0, #120	; 0x78
 80040de:	f000 f8c9 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80040e2:	2214      	movs	r2, #20
 80040e4:	2100      	movs	r1, #0
 80040e6:	2078      	movs	r0, #120	; 0x78
 80040e8:	f000 f8c4 	bl	8004274 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80040ec:	22af      	movs	r2, #175	; 0xaf
 80040ee:	2100      	movs	r1, #0
 80040f0:	2078      	movs	r0, #120	; 0x78
 80040f2:	f000 f8bf 	bl	8004274 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80040f6:	222e      	movs	r2, #46	; 0x2e
 80040f8:	2100      	movs	r1, #0
 80040fa:	2078      	movs	r0, #120	; 0x78
 80040fc:	f000 f8ba 	bl	8004274 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8004100:	2000      	movs	r0, #0
 8004102:	f000 f843 	bl	800418c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8004106:	f000 f813 	bl	8004130 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <SSD1306_Init+0x184>)
 800410c:	2200      	movs	r2, #0
 800410e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <SSD1306_Init+0x184>)
 8004112:	2200      	movs	r2, #0
 8004114:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8004116:	4b05      	ldr	r3, [pc, #20]	; (800412c <SSD1306_Init+0x184>)
 8004118:	2201      	movs	r2, #1
 800411a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800411c:	2301      	movs	r3, #1
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000524 	.word	0x20000524
 800412c:	200004c8 	.word	0x200004c8

08004130 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8004136:	2300      	movs	r3, #0
 8004138:	71fb      	strb	r3, [r7, #7]
 800413a:	e01d      	b.n	8004178 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	3b50      	subs	r3, #80	; 0x50
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	2100      	movs	r1, #0
 8004146:	2078      	movs	r0, #120	; 0x78
 8004148:	f000 f894 	bl	8004274 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800414c:	2200      	movs	r2, #0
 800414e:	2100      	movs	r1, #0
 8004150:	2078      	movs	r0, #120	; 0x78
 8004152:	f000 f88f 	bl	8004274 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004156:	2210      	movs	r2, #16
 8004158:	2100      	movs	r1, #0
 800415a:	2078      	movs	r0, #120	; 0x78
 800415c:	f000 f88a 	bl	8004274 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	01db      	lsls	r3, r3, #7
 8004164:	4a08      	ldr	r2, [pc, #32]	; (8004188 <SSD1306_UpdateScreen+0x58>)
 8004166:	441a      	add	r2, r3
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	2140      	movs	r1, #64	; 0x40
 800416c:	2078      	movs	r0, #120	; 0x78
 800416e:	f000 f839 	bl	80041e4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	3301      	adds	r3, #1
 8004176:	71fb      	strb	r3, [r7, #7]
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	2b07      	cmp	r3, #7
 800417c:	d9de      	bls.n	800413c <SSD1306_UpdateScreen+0xc>
	}
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	200000c8 	.word	0x200000c8

0800418c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <SSD1306_Fill+0x14>
 800419c:	2300      	movs	r3, #0
 800419e:	e000      	b.n	80041a2 <SSD1306_Fill+0x16>
 80041a0:	23ff      	movs	r3, #255	; 0xff
 80041a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041a6:	4619      	mov	r1, r3
 80041a8:	4803      	ldr	r0, [pc, #12]	; (80041b8 <SSD1306_Fill+0x2c>)
 80041aa:	f000 f93f 	bl	800442c <memset>
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200000c8 	.word	0x200000c8

080041bc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <ssd1306_I2C_Init+0x24>)
 80041c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80041c6:	e002      	b.n	80041ce <ssd1306_I2C_Init+0x12>
		p--;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f9      	bne.n	80041c8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	0003d090 	.word	0x0003d090

080041e4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80041e4:	b590      	push	{r4, r7, lr}
 80041e6:	b0c7      	sub	sp, #284	; 0x11c
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	4604      	mov	r4, r0
 80041ec:	4608      	mov	r0, r1
 80041ee:	4639      	mov	r1, r7
 80041f0:	600a      	str	r2, [r1, #0]
 80041f2:	4619      	mov	r1, r3
 80041f4:	1dfb      	adds	r3, r7, #7
 80041f6:	4622      	mov	r2, r4
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	1dbb      	adds	r3, r7, #6
 80041fc:	4602      	mov	r2, r0
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	460a      	mov	r2, r1
 8004204:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8004206:	f107 030c 	add.w	r3, r7, #12
 800420a:	1dba      	adds	r2, r7, #6
 800420c:	7812      	ldrb	r2, [r2, #0]
 800420e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8004210:	2300      	movs	r3, #0
 8004212:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8004216:	e010      	b.n	800423a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8004218:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800421c:	463a      	mov	r2, r7
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	441a      	add	r2, r3
 8004222:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004226:	3301      	adds	r3, #1
 8004228:	7811      	ldrb	r1, [r2, #0]
 800422a:	f107 020c 	add.w	r2, r7, #12
 800422e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8004230:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004234:	3301      	adds	r3, #1
 8004236:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800423a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800423e:	b29b      	uxth	r3, r3
 8004240:	1d3a      	adds	r2, r7, #4
 8004242:	8812      	ldrh	r2, [r2, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d8e7      	bhi.n	8004218 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8004248:	1dfb      	adds	r3, r7, #7
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	b299      	uxth	r1, r3
 800424e:	1d3b      	adds	r3, r7, #4
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	3301      	adds	r3, #1
 8004254:	b298      	uxth	r0, r3
 8004256:	f107 020c 	add.w	r2, r7, #12
 800425a:	230a      	movs	r3, #10
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	4603      	mov	r3, r0
 8004260:	4803      	ldr	r0, [pc, #12]	; (8004270 <ssd1306_I2C_WriteMulti+0x8c>)
 8004262:	f7fc fe3f 	bl	8000ee4 <HAL_I2C_Master_Transmit>
}
 8004266:	bf00      	nop
 8004268:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800426c:	46bd      	mov	sp, r7
 800426e:	bd90      	pop	{r4, r7, pc}
 8004270:	20000524 	.word	0x20000524

08004274 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af02      	add	r7, sp, #8
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
 800427e:	460b      	mov	r3, r1
 8004280:	71bb      	strb	r3, [r7, #6]
 8004282:	4613      	mov	r3, r2
 8004284:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8004286:	79bb      	ldrb	r3, [r7, #6]
 8004288:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800428a:	797b      	ldrb	r3, [r7, #5]
 800428c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	b299      	uxth	r1, r3
 8004292:	f107 020c 	add.w	r2, r7, #12
 8004296:	230a      	movs	r3, #10
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2302      	movs	r3, #2
 800429c:	4803      	ldr	r0, [pc, #12]	; (80042ac <ssd1306_I2C_Write+0x38>)
 800429e:	f7fc fe21 	bl	8000ee4 <HAL_I2C_Master_Transmit>
}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000524 	.word	0x20000524

080042b0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80042b4:	f7fc f9b8 	bl	8000628 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80042b8:	f7fc fae7 	bl	800088a <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}

080042c0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80042c8:	4b11      	ldr	r3, [pc, #68]	; (8004310 <_sbrk+0x50>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <_sbrk+0x16>
		heap_end = &end;
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <_sbrk+0x50>)
 80042d2:	4a10      	ldr	r2, [pc, #64]	; (8004314 <_sbrk+0x54>)
 80042d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80042d6:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <_sbrk+0x50>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80042dc:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <_sbrk+0x50>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4413      	add	r3, r2
 80042e4:	466a      	mov	r2, sp
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d907      	bls.n	80042fa <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80042ea:	f000 f875 	bl	80043d8 <__errno>
 80042ee:	4602      	mov	r2, r0
 80042f0:	230c      	movs	r3, #12
 80042f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80042f4:	f04f 33ff 	mov.w	r3, #4294967295
 80042f8:	e006      	b.n	8004308 <_sbrk+0x48>
	}

	heap_end += incr;
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <_sbrk+0x50>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	4a03      	ldr	r2, [pc, #12]	; (8004310 <_sbrk+0x50>)
 8004304:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004306:	68fb      	ldr	r3, [r7, #12]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	200004d4 	.word	0x200004d4
 8004314:	20000678 	.word	0x20000678

08004318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800431c:	4b16      	ldr	r3, [pc, #88]	; (8004378 <SystemInit+0x60>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	4a15      	ldr	r2, [pc, #84]	; (8004378 <SystemInit+0x60>)
 8004324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800432c:	4b13      	ldr	r3, [pc, #76]	; (800437c <SystemInit+0x64>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a12      	ldr	r2, [pc, #72]	; (800437c <SystemInit+0x64>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004338:	4b10      	ldr	r3, [pc, #64]	; (800437c <SystemInit+0x64>)
 800433a:	2200      	movs	r2, #0
 800433c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <SystemInit+0x64>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a0e      	ldr	r2, [pc, #56]	; (800437c <SystemInit+0x64>)
 8004344:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800434e:	4b0b      	ldr	r3, [pc, #44]	; (800437c <SystemInit+0x64>)
 8004350:	4a0b      	ldr	r2, [pc, #44]	; (8004380 <SystemInit+0x68>)
 8004352:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <SystemInit+0x64>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a08      	ldr	r2, [pc, #32]	; (800437c <SystemInit+0x64>)
 800435a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800435e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <SystemInit+0x64>)
 8004362:	2200      	movs	r2, #0
 8004364:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004366:	4b04      	ldr	r3, [pc, #16]	; (8004378 <SystemInit+0x60>)
 8004368:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800436c:	609a      	str	r2, [r3, #8]
#endif
}
 800436e:	bf00      	nop
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	e000ed00 	.word	0xe000ed00
 800437c:	40023800 	.word	0x40023800
 8004380:	24003010 	.word	0x24003010

08004384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004388:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800438a:	e003      	b.n	8004394 <LoopCopyDataInit>

0800438c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800438c:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800438e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004390:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004392:	3104      	adds	r1, #4

08004394 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004394:	480b      	ldr	r0, [pc, #44]	; (80043c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004398:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800439a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800439c:	d3f6      	bcc.n	800438c <CopyDataInit>
  ldr  r2, =_sbss
 800439e:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80043a0:	e002      	b.n	80043a8 <LoopFillZerobss>

080043a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80043a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80043a4:	f842 3b04 	str.w	r3, [r2], #4

080043a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80043a8:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80043aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043ac:	d3f9      	bcc.n	80043a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043ae:	f7ff ffb3 	bl	8004318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043b2:	f000 f817 	bl	80043e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043b6:	f7ff fcab 	bl	8003d10 <main>
  bx  lr    
 80043ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80043c0:	08004d48 	.word	0x08004d48
  ldr  r0, =_sdata
 80043c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043c8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80043cc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80043d0:	20000678 	.word	0x20000678

080043d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043d4:	e7fe      	b.n	80043d4 <ADC_IRQHandler>
	...

080043d8 <__errno>:
 80043d8:	4b01      	ldr	r3, [pc, #4]	; (80043e0 <__errno+0x8>)
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	2000002c 	.word	0x2000002c

080043e4 <__libc_init_array>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	4e0d      	ldr	r6, [pc, #52]	; (800441c <__libc_init_array+0x38>)
 80043e8:	4c0d      	ldr	r4, [pc, #52]	; (8004420 <__libc_init_array+0x3c>)
 80043ea:	1ba4      	subs	r4, r4, r6
 80043ec:	10a4      	asrs	r4, r4, #2
 80043ee:	2500      	movs	r5, #0
 80043f0:	42a5      	cmp	r5, r4
 80043f2:	d109      	bne.n	8004408 <__libc_init_array+0x24>
 80043f4:	4e0b      	ldr	r6, [pc, #44]	; (8004424 <__libc_init_array+0x40>)
 80043f6:	4c0c      	ldr	r4, [pc, #48]	; (8004428 <__libc_init_array+0x44>)
 80043f8:	f000 fc92 	bl	8004d20 <_init>
 80043fc:	1ba4      	subs	r4, r4, r6
 80043fe:	10a4      	asrs	r4, r4, #2
 8004400:	2500      	movs	r5, #0
 8004402:	42a5      	cmp	r5, r4
 8004404:	d105      	bne.n	8004412 <__libc_init_array+0x2e>
 8004406:	bd70      	pop	{r4, r5, r6, pc}
 8004408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800440c:	4798      	blx	r3
 800440e:	3501      	adds	r5, #1
 8004410:	e7ee      	b.n	80043f0 <__libc_init_array+0xc>
 8004412:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004416:	4798      	blx	r3
 8004418:	3501      	adds	r5, #1
 800441a:	e7f2      	b.n	8004402 <__libc_init_array+0x1e>
 800441c:	08004d40 	.word	0x08004d40
 8004420:	08004d40 	.word	0x08004d40
 8004424:	08004d40 	.word	0x08004d40
 8004428:	08004d44 	.word	0x08004d44

0800442c <memset>:
 800442c:	4402      	add	r2, r0
 800442e:	4603      	mov	r3, r0
 8004430:	4293      	cmp	r3, r2
 8004432:	d100      	bne.n	8004436 <memset+0xa>
 8004434:	4770      	bx	lr
 8004436:	f803 1b01 	strb.w	r1, [r3], #1
 800443a:	e7f9      	b.n	8004430 <memset+0x4>

0800443c <siprintf>:
 800443c:	b40e      	push	{r1, r2, r3}
 800443e:	b500      	push	{lr}
 8004440:	b09c      	sub	sp, #112	; 0x70
 8004442:	ab1d      	add	r3, sp, #116	; 0x74
 8004444:	9002      	str	r0, [sp, #8]
 8004446:	9006      	str	r0, [sp, #24]
 8004448:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800444c:	4809      	ldr	r0, [pc, #36]	; (8004474 <siprintf+0x38>)
 800444e:	9107      	str	r1, [sp, #28]
 8004450:	9104      	str	r1, [sp, #16]
 8004452:	4909      	ldr	r1, [pc, #36]	; (8004478 <siprintf+0x3c>)
 8004454:	f853 2b04 	ldr.w	r2, [r3], #4
 8004458:	9105      	str	r1, [sp, #20]
 800445a:	6800      	ldr	r0, [r0, #0]
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	a902      	add	r1, sp, #8
 8004460:	f000 f866 	bl	8004530 <_svfiprintf_r>
 8004464:	9b02      	ldr	r3, [sp, #8]
 8004466:	2200      	movs	r2, #0
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	b01c      	add	sp, #112	; 0x70
 800446c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004470:	b003      	add	sp, #12
 8004472:	4770      	bx	lr
 8004474:	2000002c 	.word	0x2000002c
 8004478:	ffff0208 	.word	0xffff0208

0800447c <__ssputs_r>:
 800447c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004480:	688e      	ldr	r6, [r1, #8]
 8004482:	429e      	cmp	r6, r3
 8004484:	4682      	mov	sl, r0
 8004486:	460c      	mov	r4, r1
 8004488:	4690      	mov	r8, r2
 800448a:	4699      	mov	r9, r3
 800448c:	d837      	bhi.n	80044fe <__ssputs_r+0x82>
 800448e:	898a      	ldrh	r2, [r1, #12]
 8004490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004494:	d031      	beq.n	80044fa <__ssputs_r+0x7e>
 8004496:	6825      	ldr	r5, [r4, #0]
 8004498:	6909      	ldr	r1, [r1, #16]
 800449a:	1a6f      	subs	r7, r5, r1
 800449c:	6965      	ldr	r5, [r4, #20]
 800449e:	2302      	movs	r3, #2
 80044a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80044a8:	f109 0301 	add.w	r3, r9, #1
 80044ac:	443b      	add	r3, r7
 80044ae:	429d      	cmp	r5, r3
 80044b0:	bf38      	it	cc
 80044b2:	461d      	movcc	r5, r3
 80044b4:	0553      	lsls	r3, r2, #21
 80044b6:	d530      	bpl.n	800451a <__ssputs_r+0x9e>
 80044b8:	4629      	mov	r1, r5
 80044ba:	f000 fb2b 	bl	8004b14 <_malloc_r>
 80044be:	4606      	mov	r6, r0
 80044c0:	b950      	cbnz	r0, 80044d8 <__ssputs_r+0x5c>
 80044c2:	230c      	movs	r3, #12
 80044c4:	f8ca 3000 	str.w	r3, [sl]
 80044c8:	89a3      	ldrh	r3, [r4, #12]
 80044ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ce:	81a3      	strh	r3, [r4, #12]
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d8:	463a      	mov	r2, r7
 80044da:	6921      	ldr	r1, [r4, #16]
 80044dc:	f000 faa8 	bl	8004a30 <memcpy>
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ea:	81a3      	strh	r3, [r4, #12]
 80044ec:	6126      	str	r6, [r4, #16]
 80044ee:	6165      	str	r5, [r4, #20]
 80044f0:	443e      	add	r6, r7
 80044f2:	1bed      	subs	r5, r5, r7
 80044f4:	6026      	str	r6, [r4, #0]
 80044f6:	60a5      	str	r5, [r4, #8]
 80044f8:	464e      	mov	r6, r9
 80044fa:	454e      	cmp	r6, r9
 80044fc:	d900      	bls.n	8004500 <__ssputs_r+0x84>
 80044fe:	464e      	mov	r6, r9
 8004500:	4632      	mov	r2, r6
 8004502:	4641      	mov	r1, r8
 8004504:	6820      	ldr	r0, [r4, #0]
 8004506:	f000 fa9e 	bl	8004a46 <memmove>
 800450a:	68a3      	ldr	r3, [r4, #8]
 800450c:	1b9b      	subs	r3, r3, r6
 800450e:	60a3      	str	r3, [r4, #8]
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	441e      	add	r6, r3
 8004514:	6026      	str	r6, [r4, #0]
 8004516:	2000      	movs	r0, #0
 8004518:	e7dc      	b.n	80044d4 <__ssputs_r+0x58>
 800451a:	462a      	mov	r2, r5
 800451c:	f000 fb54 	bl	8004bc8 <_realloc_r>
 8004520:	4606      	mov	r6, r0
 8004522:	2800      	cmp	r0, #0
 8004524:	d1e2      	bne.n	80044ec <__ssputs_r+0x70>
 8004526:	6921      	ldr	r1, [r4, #16]
 8004528:	4650      	mov	r0, sl
 800452a:	f000 faa5 	bl	8004a78 <_free_r>
 800452e:	e7c8      	b.n	80044c2 <__ssputs_r+0x46>

08004530 <_svfiprintf_r>:
 8004530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004534:	461d      	mov	r5, r3
 8004536:	898b      	ldrh	r3, [r1, #12]
 8004538:	061f      	lsls	r7, r3, #24
 800453a:	b09d      	sub	sp, #116	; 0x74
 800453c:	4680      	mov	r8, r0
 800453e:	460c      	mov	r4, r1
 8004540:	4616      	mov	r6, r2
 8004542:	d50f      	bpl.n	8004564 <_svfiprintf_r+0x34>
 8004544:	690b      	ldr	r3, [r1, #16]
 8004546:	b96b      	cbnz	r3, 8004564 <_svfiprintf_r+0x34>
 8004548:	2140      	movs	r1, #64	; 0x40
 800454a:	f000 fae3 	bl	8004b14 <_malloc_r>
 800454e:	6020      	str	r0, [r4, #0]
 8004550:	6120      	str	r0, [r4, #16]
 8004552:	b928      	cbnz	r0, 8004560 <_svfiprintf_r+0x30>
 8004554:	230c      	movs	r3, #12
 8004556:	f8c8 3000 	str.w	r3, [r8]
 800455a:	f04f 30ff 	mov.w	r0, #4294967295
 800455e:	e0c8      	b.n	80046f2 <_svfiprintf_r+0x1c2>
 8004560:	2340      	movs	r3, #64	; 0x40
 8004562:	6163      	str	r3, [r4, #20]
 8004564:	2300      	movs	r3, #0
 8004566:	9309      	str	r3, [sp, #36]	; 0x24
 8004568:	2320      	movs	r3, #32
 800456a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800456e:	2330      	movs	r3, #48	; 0x30
 8004570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004574:	9503      	str	r5, [sp, #12]
 8004576:	f04f 0b01 	mov.w	fp, #1
 800457a:	4637      	mov	r7, r6
 800457c:	463d      	mov	r5, r7
 800457e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004582:	b10b      	cbz	r3, 8004588 <_svfiprintf_r+0x58>
 8004584:	2b25      	cmp	r3, #37	; 0x25
 8004586:	d13e      	bne.n	8004606 <_svfiprintf_r+0xd6>
 8004588:	ebb7 0a06 	subs.w	sl, r7, r6
 800458c:	d00b      	beq.n	80045a6 <_svfiprintf_r+0x76>
 800458e:	4653      	mov	r3, sl
 8004590:	4632      	mov	r2, r6
 8004592:	4621      	mov	r1, r4
 8004594:	4640      	mov	r0, r8
 8004596:	f7ff ff71 	bl	800447c <__ssputs_r>
 800459a:	3001      	adds	r0, #1
 800459c:	f000 80a4 	beq.w	80046e8 <_svfiprintf_r+0x1b8>
 80045a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a2:	4453      	add	r3, sl
 80045a4:	9309      	str	r3, [sp, #36]	; 0x24
 80045a6:	783b      	ldrb	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 809d 	beq.w	80046e8 <_svfiprintf_r+0x1b8>
 80045ae:	2300      	movs	r3, #0
 80045b0:	f04f 32ff 	mov.w	r2, #4294967295
 80045b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045b8:	9304      	str	r3, [sp, #16]
 80045ba:	9307      	str	r3, [sp, #28]
 80045bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045c0:	931a      	str	r3, [sp, #104]	; 0x68
 80045c2:	462f      	mov	r7, r5
 80045c4:	2205      	movs	r2, #5
 80045c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80045ca:	4850      	ldr	r0, [pc, #320]	; (800470c <_svfiprintf_r+0x1dc>)
 80045cc:	f7fb fe08 	bl	80001e0 <memchr>
 80045d0:	9b04      	ldr	r3, [sp, #16]
 80045d2:	b9d0      	cbnz	r0, 800460a <_svfiprintf_r+0xda>
 80045d4:	06d9      	lsls	r1, r3, #27
 80045d6:	bf44      	itt	mi
 80045d8:	2220      	movmi	r2, #32
 80045da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045de:	071a      	lsls	r2, r3, #28
 80045e0:	bf44      	itt	mi
 80045e2:	222b      	movmi	r2, #43	; 0x2b
 80045e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045e8:	782a      	ldrb	r2, [r5, #0]
 80045ea:	2a2a      	cmp	r2, #42	; 0x2a
 80045ec:	d015      	beq.n	800461a <_svfiprintf_r+0xea>
 80045ee:	9a07      	ldr	r2, [sp, #28]
 80045f0:	462f      	mov	r7, r5
 80045f2:	2000      	movs	r0, #0
 80045f4:	250a      	movs	r5, #10
 80045f6:	4639      	mov	r1, r7
 80045f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045fc:	3b30      	subs	r3, #48	; 0x30
 80045fe:	2b09      	cmp	r3, #9
 8004600:	d94d      	bls.n	800469e <_svfiprintf_r+0x16e>
 8004602:	b1b8      	cbz	r0, 8004634 <_svfiprintf_r+0x104>
 8004604:	e00f      	b.n	8004626 <_svfiprintf_r+0xf6>
 8004606:	462f      	mov	r7, r5
 8004608:	e7b8      	b.n	800457c <_svfiprintf_r+0x4c>
 800460a:	4a40      	ldr	r2, [pc, #256]	; (800470c <_svfiprintf_r+0x1dc>)
 800460c:	1a80      	subs	r0, r0, r2
 800460e:	fa0b f000 	lsl.w	r0, fp, r0
 8004612:	4318      	orrs	r0, r3
 8004614:	9004      	str	r0, [sp, #16]
 8004616:	463d      	mov	r5, r7
 8004618:	e7d3      	b.n	80045c2 <_svfiprintf_r+0x92>
 800461a:	9a03      	ldr	r2, [sp, #12]
 800461c:	1d11      	adds	r1, r2, #4
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	9103      	str	r1, [sp, #12]
 8004622:	2a00      	cmp	r2, #0
 8004624:	db01      	blt.n	800462a <_svfiprintf_r+0xfa>
 8004626:	9207      	str	r2, [sp, #28]
 8004628:	e004      	b.n	8004634 <_svfiprintf_r+0x104>
 800462a:	4252      	negs	r2, r2
 800462c:	f043 0302 	orr.w	r3, r3, #2
 8004630:	9207      	str	r2, [sp, #28]
 8004632:	9304      	str	r3, [sp, #16]
 8004634:	783b      	ldrb	r3, [r7, #0]
 8004636:	2b2e      	cmp	r3, #46	; 0x2e
 8004638:	d10c      	bne.n	8004654 <_svfiprintf_r+0x124>
 800463a:	787b      	ldrb	r3, [r7, #1]
 800463c:	2b2a      	cmp	r3, #42	; 0x2a
 800463e:	d133      	bne.n	80046a8 <_svfiprintf_r+0x178>
 8004640:	9b03      	ldr	r3, [sp, #12]
 8004642:	1d1a      	adds	r2, r3, #4
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	9203      	str	r2, [sp, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	bfb8      	it	lt
 800464c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004650:	3702      	adds	r7, #2
 8004652:	9305      	str	r3, [sp, #20]
 8004654:	4d2e      	ldr	r5, [pc, #184]	; (8004710 <_svfiprintf_r+0x1e0>)
 8004656:	7839      	ldrb	r1, [r7, #0]
 8004658:	2203      	movs	r2, #3
 800465a:	4628      	mov	r0, r5
 800465c:	f7fb fdc0 	bl	80001e0 <memchr>
 8004660:	b138      	cbz	r0, 8004672 <_svfiprintf_r+0x142>
 8004662:	2340      	movs	r3, #64	; 0x40
 8004664:	1b40      	subs	r0, r0, r5
 8004666:	fa03 f000 	lsl.w	r0, r3, r0
 800466a:	9b04      	ldr	r3, [sp, #16]
 800466c:	4303      	orrs	r3, r0
 800466e:	3701      	adds	r7, #1
 8004670:	9304      	str	r3, [sp, #16]
 8004672:	7839      	ldrb	r1, [r7, #0]
 8004674:	4827      	ldr	r0, [pc, #156]	; (8004714 <_svfiprintf_r+0x1e4>)
 8004676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800467a:	2206      	movs	r2, #6
 800467c:	1c7e      	adds	r6, r7, #1
 800467e:	f7fb fdaf 	bl	80001e0 <memchr>
 8004682:	2800      	cmp	r0, #0
 8004684:	d038      	beq.n	80046f8 <_svfiprintf_r+0x1c8>
 8004686:	4b24      	ldr	r3, [pc, #144]	; (8004718 <_svfiprintf_r+0x1e8>)
 8004688:	bb13      	cbnz	r3, 80046d0 <_svfiprintf_r+0x1a0>
 800468a:	9b03      	ldr	r3, [sp, #12]
 800468c:	3307      	adds	r3, #7
 800468e:	f023 0307 	bic.w	r3, r3, #7
 8004692:	3308      	adds	r3, #8
 8004694:	9303      	str	r3, [sp, #12]
 8004696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004698:	444b      	add	r3, r9
 800469a:	9309      	str	r3, [sp, #36]	; 0x24
 800469c:	e76d      	b.n	800457a <_svfiprintf_r+0x4a>
 800469e:	fb05 3202 	mla	r2, r5, r2, r3
 80046a2:	2001      	movs	r0, #1
 80046a4:	460f      	mov	r7, r1
 80046a6:	e7a6      	b.n	80045f6 <_svfiprintf_r+0xc6>
 80046a8:	2300      	movs	r3, #0
 80046aa:	3701      	adds	r7, #1
 80046ac:	9305      	str	r3, [sp, #20]
 80046ae:	4619      	mov	r1, r3
 80046b0:	250a      	movs	r5, #10
 80046b2:	4638      	mov	r0, r7
 80046b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046b8:	3a30      	subs	r2, #48	; 0x30
 80046ba:	2a09      	cmp	r2, #9
 80046bc:	d903      	bls.n	80046c6 <_svfiprintf_r+0x196>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0c8      	beq.n	8004654 <_svfiprintf_r+0x124>
 80046c2:	9105      	str	r1, [sp, #20]
 80046c4:	e7c6      	b.n	8004654 <_svfiprintf_r+0x124>
 80046c6:	fb05 2101 	mla	r1, r5, r1, r2
 80046ca:	2301      	movs	r3, #1
 80046cc:	4607      	mov	r7, r0
 80046ce:	e7f0      	b.n	80046b2 <_svfiprintf_r+0x182>
 80046d0:	ab03      	add	r3, sp, #12
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	4622      	mov	r2, r4
 80046d6:	4b11      	ldr	r3, [pc, #68]	; (800471c <_svfiprintf_r+0x1ec>)
 80046d8:	a904      	add	r1, sp, #16
 80046da:	4640      	mov	r0, r8
 80046dc:	f3af 8000 	nop.w
 80046e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80046e4:	4681      	mov	r9, r0
 80046e6:	d1d6      	bne.n	8004696 <_svfiprintf_r+0x166>
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	065b      	lsls	r3, r3, #25
 80046ec:	f53f af35 	bmi.w	800455a <_svfiprintf_r+0x2a>
 80046f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046f2:	b01d      	add	sp, #116	; 0x74
 80046f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f8:	ab03      	add	r3, sp, #12
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	4622      	mov	r2, r4
 80046fe:	4b07      	ldr	r3, [pc, #28]	; (800471c <_svfiprintf_r+0x1ec>)
 8004700:	a904      	add	r1, sp, #16
 8004702:	4640      	mov	r0, r8
 8004704:	f000 f882 	bl	800480c <_printf_i>
 8004708:	e7ea      	b.n	80046e0 <_svfiprintf_r+0x1b0>
 800470a:	bf00      	nop
 800470c:	08004cec 	.word	0x08004cec
 8004710:	08004cf2 	.word	0x08004cf2
 8004714:	08004cf6 	.word	0x08004cf6
 8004718:	00000000 	.word	0x00000000
 800471c:	0800447d 	.word	0x0800447d

08004720 <_printf_common>:
 8004720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004724:	4691      	mov	r9, r2
 8004726:	461f      	mov	r7, r3
 8004728:	688a      	ldr	r2, [r1, #8]
 800472a:	690b      	ldr	r3, [r1, #16]
 800472c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004730:	4293      	cmp	r3, r2
 8004732:	bfb8      	it	lt
 8004734:	4613      	movlt	r3, r2
 8004736:	f8c9 3000 	str.w	r3, [r9]
 800473a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800473e:	4606      	mov	r6, r0
 8004740:	460c      	mov	r4, r1
 8004742:	b112      	cbz	r2, 800474a <_printf_common+0x2a>
 8004744:	3301      	adds	r3, #1
 8004746:	f8c9 3000 	str.w	r3, [r9]
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	0699      	lsls	r1, r3, #26
 800474e:	bf42      	ittt	mi
 8004750:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004754:	3302      	addmi	r3, #2
 8004756:	f8c9 3000 	strmi.w	r3, [r9]
 800475a:	6825      	ldr	r5, [r4, #0]
 800475c:	f015 0506 	ands.w	r5, r5, #6
 8004760:	d107      	bne.n	8004772 <_printf_common+0x52>
 8004762:	f104 0a19 	add.w	sl, r4, #25
 8004766:	68e3      	ldr	r3, [r4, #12]
 8004768:	f8d9 2000 	ldr.w	r2, [r9]
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	42ab      	cmp	r3, r5
 8004770:	dc28      	bgt.n	80047c4 <_printf_common+0xa4>
 8004772:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004776:	6822      	ldr	r2, [r4, #0]
 8004778:	3300      	adds	r3, #0
 800477a:	bf18      	it	ne
 800477c:	2301      	movne	r3, #1
 800477e:	0692      	lsls	r2, r2, #26
 8004780:	d42d      	bmi.n	80047de <_printf_common+0xbe>
 8004782:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004786:	4639      	mov	r1, r7
 8004788:	4630      	mov	r0, r6
 800478a:	47c0      	blx	r8
 800478c:	3001      	adds	r0, #1
 800478e:	d020      	beq.n	80047d2 <_printf_common+0xb2>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	68e5      	ldr	r5, [r4, #12]
 8004794:	f8d9 2000 	ldr.w	r2, [r9]
 8004798:	f003 0306 	and.w	r3, r3, #6
 800479c:	2b04      	cmp	r3, #4
 800479e:	bf08      	it	eq
 80047a0:	1aad      	subeq	r5, r5, r2
 80047a2:	68a3      	ldr	r3, [r4, #8]
 80047a4:	6922      	ldr	r2, [r4, #16]
 80047a6:	bf0c      	ite	eq
 80047a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047ac:	2500      	movne	r5, #0
 80047ae:	4293      	cmp	r3, r2
 80047b0:	bfc4      	itt	gt
 80047b2:	1a9b      	subgt	r3, r3, r2
 80047b4:	18ed      	addgt	r5, r5, r3
 80047b6:	f04f 0900 	mov.w	r9, #0
 80047ba:	341a      	adds	r4, #26
 80047bc:	454d      	cmp	r5, r9
 80047be:	d11a      	bne.n	80047f6 <_printf_common+0xd6>
 80047c0:	2000      	movs	r0, #0
 80047c2:	e008      	b.n	80047d6 <_printf_common+0xb6>
 80047c4:	2301      	movs	r3, #1
 80047c6:	4652      	mov	r2, sl
 80047c8:	4639      	mov	r1, r7
 80047ca:	4630      	mov	r0, r6
 80047cc:	47c0      	blx	r8
 80047ce:	3001      	adds	r0, #1
 80047d0:	d103      	bne.n	80047da <_printf_common+0xba>
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295
 80047d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047da:	3501      	adds	r5, #1
 80047dc:	e7c3      	b.n	8004766 <_printf_common+0x46>
 80047de:	18e1      	adds	r1, r4, r3
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	2030      	movs	r0, #48	; 0x30
 80047e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047e8:	4422      	add	r2, r4
 80047ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047f2:	3302      	adds	r3, #2
 80047f4:	e7c5      	b.n	8004782 <_printf_common+0x62>
 80047f6:	2301      	movs	r3, #1
 80047f8:	4622      	mov	r2, r4
 80047fa:	4639      	mov	r1, r7
 80047fc:	4630      	mov	r0, r6
 80047fe:	47c0      	blx	r8
 8004800:	3001      	adds	r0, #1
 8004802:	d0e6      	beq.n	80047d2 <_printf_common+0xb2>
 8004804:	f109 0901 	add.w	r9, r9, #1
 8004808:	e7d8      	b.n	80047bc <_printf_common+0x9c>
	...

0800480c <_printf_i>:
 800480c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004810:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004814:	460c      	mov	r4, r1
 8004816:	7e09      	ldrb	r1, [r1, #24]
 8004818:	b085      	sub	sp, #20
 800481a:	296e      	cmp	r1, #110	; 0x6e
 800481c:	4617      	mov	r7, r2
 800481e:	4606      	mov	r6, r0
 8004820:	4698      	mov	r8, r3
 8004822:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004824:	f000 80b3 	beq.w	800498e <_printf_i+0x182>
 8004828:	d822      	bhi.n	8004870 <_printf_i+0x64>
 800482a:	2963      	cmp	r1, #99	; 0x63
 800482c:	d036      	beq.n	800489c <_printf_i+0x90>
 800482e:	d80a      	bhi.n	8004846 <_printf_i+0x3a>
 8004830:	2900      	cmp	r1, #0
 8004832:	f000 80b9 	beq.w	80049a8 <_printf_i+0x19c>
 8004836:	2958      	cmp	r1, #88	; 0x58
 8004838:	f000 8083 	beq.w	8004942 <_printf_i+0x136>
 800483c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004840:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004844:	e032      	b.n	80048ac <_printf_i+0xa0>
 8004846:	2964      	cmp	r1, #100	; 0x64
 8004848:	d001      	beq.n	800484e <_printf_i+0x42>
 800484a:	2969      	cmp	r1, #105	; 0x69
 800484c:	d1f6      	bne.n	800483c <_printf_i+0x30>
 800484e:	6820      	ldr	r0, [r4, #0]
 8004850:	6813      	ldr	r3, [r2, #0]
 8004852:	0605      	lsls	r5, r0, #24
 8004854:	f103 0104 	add.w	r1, r3, #4
 8004858:	d52a      	bpl.n	80048b0 <_printf_i+0xa4>
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6011      	str	r1, [r2, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	da03      	bge.n	800486a <_printf_i+0x5e>
 8004862:	222d      	movs	r2, #45	; 0x2d
 8004864:	425b      	negs	r3, r3
 8004866:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800486a:	486f      	ldr	r0, [pc, #444]	; (8004a28 <_printf_i+0x21c>)
 800486c:	220a      	movs	r2, #10
 800486e:	e039      	b.n	80048e4 <_printf_i+0xd8>
 8004870:	2973      	cmp	r1, #115	; 0x73
 8004872:	f000 809d 	beq.w	80049b0 <_printf_i+0x1a4>
 8004876:	d808      	bhi.n	800488a <_printf_i+0x7e>
 8004878:	296f      	cmp	r1, #111	; 0x6f
 800487a:	d020      	beq.n	80048be <_printf_i+0xb2>
 800487c:	2970      	cmp	r1, #112	; 0x70
 800487e:	d1dd      	bne.n	800483c <_printf_i+0x30>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	f043 0320 	orr.w	r3, r3, #32
 8004886:	6023      	str	r3, [r4, #0]
 8004888:	e003      	b.n	8004892 <_printf_i+0x86>
 800488a:	2975      	cmp	r1, #117	; 0x75
 800488c:	d017      	beq.n	80048be <_printf_i+0xb2>
 800488e:	2978      	cmp	r1, #120	; 0x78
 8004890:	d1d4      	bne.n	800483c <_printf_i+0x30>
 8004892:	2378      	movs	r3, #120	; 0x78
 8004894:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004898:	4864      	ldr	r0, [pc, #400]	; (8004a2c <_printf_i+0x220>)
 800489a:	e055      	b.n	8004948 <_printf_i+0x13c>
 800489c:	6813      	ldr	r3, [r2, #0]
 800489e:	1d19      	adds	r1, r3, #4
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6011      	str	r1, [r2, #0]
 80048a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048ac:	2301      	movs	r3, #1
 80048ae:	e08c      	b.n	80049ca <_printf_i+0x1be>
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6011      	str	r1, [r2, #0]
 80048b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048b8:	bf18      	it	ne
 80048ba:	b21b      	sxthne	r3, r3
 80048bc:	e7cf      	b.n	800485e <_printf_i+0x52>
 80048be:	6813      	ldr	r3, [r2, #0]
 80048c0:	6825      	ldr	r5, [r4, #0]
 80048c2:	1d18      	adds	r0, r3, #4
 80048c4:	6010      	str	r0, [r2, #0]
 80048c6:	0628      	lsls	r0, r5, #24
 80048c8:	d501      	bpl.n	80048ce <_printf_i+0xc2>
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	e002      	b.n	80048d4 <_printf_i+0xc8>
 80048ce:	0668      	lsls	r0, r5, #25
 80048d0:	d5fb      	bpl.n	80048ca <_printf_i+0xbe>
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	4854      	ldr	r0, [pc, #336]	; (8004a28 <_printf_i+0x21c>)
 80048d6:	296f      	cmp	r1, #111	; 0x6f
 80048d8:	bf14      	ite	ne
 80048da:	220a      	movne	r2, #10
 80048dc:	2208      	moveq	r2, #8
 80048de:	2100      	movs	r1, #0
 80048e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048e4:	6865      	ldr	r5, [r4, #4]
 80048e6:	60a5      	str	r5, [r4, #8]
 80048e8:	2d00      	cmp	r5, #0
 80048ea:	f2c0 8095 	blt.w	8004a18 <_printf_i+0x20c>
 80048ee:	6821      	ldr	r1, [r4, #0]
 80048f0:	f021 0104 	bic.w	r1, r1, #4
 80048f4:	6021      	str	r1, [r4, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d13d      	bne.n	8004976 <_printf_i+0x16a>
 80048fa:	2d00      	cmp	r5, #0
 80048fc:	f040 808e 	bne.w	8004a1c <_printf_i+0x210>
 8004900:	4665      	mov	r5, ip
 8004902:	2a08      	cmp	r2, #8
 8004904:	d10b      	bne.n	800491e <_printf_i+0x112>
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	07db      	lsls	r3, r3, #31
 800490a:	d508      	bpl.n	800491e <_printf_i+0x112>
 800490c:	6923      	ldr	r3, [r4, #16]
 800490e:	6862      	ldr	r2, [r4, #4]
 8004910:	429a      	cmp	r2, r3
 8004912:	bfde      	ittt	le
 8004914:	2330      	movle	r3, #48	; 0x30
 8004916:	f805 3c01 	strble.w	r3, [r5, #-1]
 800491a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800491e:	ebac 0305 	sub.w	r3, ip, r5
 8004922:	6123      	str	r3, [r4, #16]
 8004924:	f8cd 8000 	str.w	r8, [sp]
 8004928:	463b      	mov	r3, r7
 800492a:	aa03      	add	r2, sp, #12
 800492c:	4621      	mov	r1, r4
 800492e:	4630      	mov	r0, r6
 8004930:	f7ff fef6 	bl	8004720 <_printf_common>
 8004934:	3001      	adds	r0, #1
 8004936:	d14d      	bne.n	80049d4 <_printf_i+0x1c8>
 8004938:	f04f 30ff 	mov.w	r0, #4294967295
 800493c:	b005      	add	sp, #20
 800493e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004942:	4839      	ldr	r0, [pc, #228]	; (8004a28 <_printf_i+0x21c>)
 8004944:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004948:	6813      	ldr	r3, [r2, #0]
 800494a:	6821      	ldr	r1, [r4, #0]
 800494c:	1d1d      	adds	r5, r3, #4
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6015      	str	r5, [r2, #0]
 8004952:	060a      	lsls	r2, r1, #24
 8004954:	d50b      	bpl.n	800496e <_printf_i+0x162>
 8004956:	07ca      	lsls	r2, r1, #31
 8004958:	bf44      	itt	mi
 800495a:	f041 0120 	orrmi.w	r1, r1, #32
 800495e:	6021      	strmi	r1, [r4, #0]
 8004960:	b91b      	cbnz	r3, 800496a <_printf_i+0x15e>
 8004962:	6822      	ldr	r2, [r4, #0]
 8004964:	f022 0220 	bic.w	r2, r2, #32
 8004968:	6022      	str	r2, [r4, #0]
 800496a:	2210      	movs	r2, #16
 800496c:	e7b7      	b.n	80048de <_printf_i+0xd2>
 800496e:	064d      	lsls	r5, r1, #25
 8004970:	bf48      	it	mi
 8004972:	b29b      	uxthmi	r3, r3
 8004974:	e7ef      	b.n	8004956 <_printf_i+0x14a>
 8004976:	4665      	mov	r5, ip
 8004978:	fbb3 f1f2 	udiv	r1, r3, r2
 800497c:	fb02 3311 	mls	r3, r2, r1, r3
 8004980:	5cc3      	ldrb	r3, [r0, r3]
 8004982:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004986:	460b      	mov	r3, r1
 8004988:	2900      	cmp	r1, #0
 800498a:	d1f5      	bne.n	8004978 <_printf_i+0x16c>
 800498c:	e7b9      	b.n	8004902 <_printf_i+0xf6>
 800498e:	6813      	ldr	r3, [r2, #0]
 8004990:	6825      	ldr	r5, [r4, #0]
 8004992:	6961      	ldr	r1, [r4, #20]
 8004994:	1d18      	adds	r0, r3, #4
 8004996:	6010      	str	r0, [r2, #0]
 8004998:	0628      	lsls	r0, r5, #24
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	d501      	bpl.n	80049a2 <_printf_i+0x196>
 800499e:	6019      	str	r1, [r3, #0]
 80049a0:	e002      	b.n	80049a8 <_printf_i+0x19c>
 80049a2:	066a      	lsls	r2, r5, #25
 80049a4:	d5fb      	bpl.n	800499e <_printf_i+0x192>
 80049a6:	8019      	strh	r1, [r3, #0]
 80049a8:	2300      	movs	r3, #0
 80049aa:	6123      	str	r3, [r4, #16]
 80049ac:	4665      	mov	r5, ip
 80049ae:	e7b9      	b.n	8004924 <_printf_i+0x118>
 80049b0:	6813      	ldr	r3, [r2, #0]
 80049b2:	1d19      	adds	r1, r3, #4
 80049b4:	6011      	str	r1, [r2, #0]
 80049b6:	681d      	ldr	r5, [r3, #0]
 80049b8:	6862      	ldr	r2, [r4, #4]
 80049ba:	2100      	movs	r1, #0
 80049bc:	4628      	mov	r0, r5
 80049be:	f7fb fc0f 	bl	80001e0 <memchr>
 80049c2:	b108      	cbz	r0, 80049c8 <_printf_i+0x1bc>
 80049c4:	1b40      	subs	r0, r0, r5
 80049c6:	6060      	str	r0, [r4, #4]
 80049c8:	6863      	ldr	r3, [r4, #4]
 80049ca:	6123      	str	r3, [r4, #16]
 80049cc:	2300      	movs	r3, #0
 80049ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d2:	e7a7      	b.n	8004924 <_printf_i+0x118>
 80049d4:	6923      	ldr	r3, [r4, #16]
 80049d6:	462a      	mov	r2, r5
 80049d8:	4639      	mov	r1, r7
 80049da:	4630      	mov	r0, r6
 80049dc:	47c0      	blx	r8
 80049de:	3001      	adds	r0, #1
 80049e0:	d0aa      	beq.n	8004938 <_printf_i+0x12c>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	079b      	lsls	r3, r3, #30
 80049e6:	d413      	bmi.n	8004a10 <_printf_i+0x204>
 80049e8:	68e0      	ldr	r0, [r4, #12]
 80049ea:	9b03      	ldr	r3, [sp, #12]
 80049ec:	4298      	cmp	r0, r3
 80049ee:	bfb8      	it	lt
 80049f0:	4618      	movlt	r0, r3
 80049f2:	e7a3      	b.n	800493c <_printf_i+0x130>
 80049f4:	2301      	movs	r3, #1
 80049f6:	464a      	mov	r2, r9
 80049f8:	4639      	mov	r1, r7
 80049fa:	4630      	mov	r0, r6
 80049fc:	47c0      	blx	r8
 80049fe:	3001      	adds	r0, #1
 8004a00:	d09a      	beq.n	8004938 <_printf_i+0x12c>
 8004a02:	3501      	adds	r5, #1
 8004a04:	68e3      	ldr	r3, [r4, #12]
 8004a06:	9a03      	ldr	r2, [sp, #12]
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	42ab      	cmp	r3, r5
 8004a0c:	dcf2      	bgt.n	80049f4 <_printf_i+0x1e8>
 8004a0e:	e7eb      	b.n	80049e8 <_printf_i+0x1dc>
 8004a10:	2500      	movs	r5, #0
 8004a12:	f104 0919 	add.w	r9, r4, #25
 8004a16:	e7f5      	b.n	8004a04 <_printf_i+0x1f8>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1ac      	bne.n	8004976 <_printf_i+0x16a>
 8004a1c:	7803      	ldrb	r3, [r0, #0]
 8004a1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a26:	e76c      	b.n	8004902 <_printf_i+0xf6>
 8004a28:	08004cfd 	.word	0x08004cfd
 8004a2c:	08004d0e 	.word	0x08004d0e

08004a30 <memcpy>:
 8004a30:	b510      	push	{r4, lr}
 8004a32:	1e43      	subs	r3, r0, #1
 8004a34:	440a      	add	r2, r1
 8004a36:	4291      	cmp	r1, r2
 8004a38:	d100      	bne.n	8004a3c <memcpy+0xc>
 8004a3a:	bd10      	pop	{r4, pc}
 8004a3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a44:	e7f7      	b.n	8004a36 <memcpy+0x6>

08004a46 <memmove>:
 8004a46:	4288      	cmp	r0, r1
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	eb01 0302 	add.w	r3, r1, r2
 8004a4e:	d807      	bhi.n	8004a60 <memmove+0x1a>
 8004a50:	1e42      	subs	r2, r0, #1
 8004a52:	4299      	cmp	r1, r3
 8004a54:	d00a      	beq.n	8004a6c <memmove+0x26>
 8004a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a5a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004a5e:	e7f8      	b.n	8004a52 <memmove+0xc>
 8004a60:	4283      	cmp	r3, r0
 8004a62:	d9f5      	bls.n	8004a50 <memmove+0xa>
 8004a64:	1881      	adds	r1, r0, r2
 8004a66:	1ad2      	subs	r2, r2, r3
 8004a68:	42d3      	cmn	r3, r2
 8004a6a:	d100      	bne.n	8004a6e <memmove+0x28>
 8004a6c:	bd10      	pop	{r4, pc}
 8004a6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a72:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004a76:	e7f7      	b.n	8004a68 <memmove+0x22>

08004a78 <_free_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	2900      	cmp	r1, #0
 8004a7e:	d045      	beq.n	8004b0c <_free_r+0x94>
 8004a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a84:	1f0c      	subs	r4, r1, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bfb8      	it	lt
 8004a8a:	18e4      	addlt	r4, r4, r3
 8004a8c:	f000 f8d2 	bl	8004c34 <__malloc_lock>
 8004a90:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <_free_r+0x98>)
 8004a92:	6813      	ldr	r3, [r2, #0]
 8004a94:	4610      	mov	r0, r2
 8004a96:	b933      	cbnz	r3, 8004aa6 <_free_r+0x2e>
 8004a98:	6063      	str	r3, [r4, #4]
 8004a9a:	6014      	str	r4, [r2, #0]
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aa2:	f000 b8c8 	b.w	8004c36 <__malloc_unlock>
 8004aa6:	42a3      	cmp	r3, r4
 8004aa8:	d90c      	bls.n	8004ac4 <_free_r+0x4c>
 8004aaa:	6821      	ldr	r1, [r4, #0]
 8004aac:	1862      	adds	r2, r4, r1
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	bf04      	itt	eq
 8004ab2:	681a      	ldreq	r2, [r3, #0]
 8004ab4:	685b      	ldreq	r3, [r3, #4]
 8004ab6:	6063      	str	r3, [r4, #4]
 8004ab8:	bf04      	itt	eq
 8004aba:	1852      	addeq	r2, r2, r1
 8004abc:	6022      	streq	r2, [r4, #0]
 8004abe:	6004      	str	r4, [r0, #0]
 8004ac0:	e7ec      	b.n	8004a9c <_free_r+0x24>
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	b10a      	cbz	r2, 8004acc <_free_r+0x54>
 8004ac8:	42a2      	cmp	r2, r4
 8004aca:	d9fa      	bls.n	8004ac2 <_free_r+0x4a>
 8004acc:	6819      	ldr	r1, [r3, #0]
 8004ace:	1858      	adds	r0, r3, r1
 8004ad0:	42a0      	cmp	r0, r4
 8004ad2:	d10b      	bne.n	8004aec <_free_r+0x74>
 8004ad4:	6820      	ldr	r0, [r4, #0]
 8004ad6:	4401      	add	r1, r0
 8004ad8:	1858      	adds	r0, r3, r1
 8004ada:	4282      	cmp	r2, r0
 8004adc:	6019      	str	r1, [r3, #0]
 8004ade:	d1dd      	bne.n	8004a9c <_free_r+0x24>
 8004ae0:	6810      	ldr	r0, [r2, #0]
 8004ae2:	6852      	ldr	r2, [r2, #4]
 8004ae4:	605a      	str	r2, [r3, #4]
 8004ae6:	4401      	add	r1, r0
 8004ae8:	6019      	str	r1, [r3, #0]
 8004aea:	e7d7      	b.n	8004a9c <_free_r+0x24>
 8004aec:	d902      	bls.n	8004af4 <_free_r+0x7c>
 8004aee:	230c      	movs	r3, #12
 8004af0:	602b      	str	r3, [r5, #0]
 8004af2:	e7d3      	b.n	8004a9c <_free_r+0x24>
 8004af4:	6820      	ldr	r0, [r4, #0]
 8004af6:	1821      	adds	r1, r4, r0
 8004af8:	428a      	cmp	r2, r1
 8004afa:	bf04      	itt	eq
 8004afc:	6811      	ldreq	r1, [r2, #0]
 8004afe:	6852      	ldreq	r2, [r2, #4]
 8004b00:	6062      	str	r2, [r4, #4]
 8004b02:	bf04      	itt	eq
 8004b04:	1809      	addeq	r1, r1, r0
 8004b06:	6021      	streq	r1, [r4, #0]
 8004b08:	605c      	str	r4, [r3, #4]
 8004b0a:	e7c7      	b.n	8004a9c <_free_r+0x24>
 8004b0c:	bd38      	pop	{r3, r4, r5, pc}
 8004b0e:	bf00      	nop
 8004b10:	200004d8 	.word	0x200004d8

08004b14 <_malloc_r>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	1ccd      	adds	r5, r1, #3
 8004b18:	f025 0503 	bic.w	r5, r5, #3
 8004b1c:	3508      	adds	r5, #8
 8004b1e:	2d0c      	cmp	r5, #12
 8004b20:	bf38      	it	cc
 8004b22:	250c      	movcc	r5, #12
 8004b24:	2d00      	cmp	r5, #0
 8004b26:	4606      	mov	r6, r0
 8004b28:	db01      	blt.n	8004b2e <_malloc_r+0x1a>
 8004b2a:	42a9      	cmp	r1, r5
 8004b2c:	d903      	bls.n	8004b36 <_malloc_r+0x22>
 8004b2e:	230c      	movs	r3, #12
 8004b30:	6033      	str	r3, [r6, #0]
 8004b32:	2000      	movs	r0, #0
 8004b34:	bd70      	pop	{r4, r5, r6, pc}
 8004b36:	f000 f87d 	bl	8004c34 <__malloc_lock>
 8004b3a:	4a21      	ldr	r2, [pc, #132]	; (8004bc0 <_malloc_r+0xac>)
 8004b3c:	6814      	ldr	r4, [r2, #0]
 8004b3e:	4621      	mov	r1, r4
 8004b40:	b991      	cbnz	r1, 8004b68 <_malloc_r+0x54>
 8004b42:	4c20      	ldr	r4, [pc, #128]	; (8004bc4 <_malloc_r+0xb0>)
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	b91b      	cbnz	r3, 8004b50 <_malloc_r+0x3c>
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f000 f863 	bl	8004c14 <_sbrk_r>
 8004b4e:	6020      	str	r0, [r4, #0]
 8004b50:	4629      	mov	r1, r5
 8004b52:	4630      	mov	r0, r6
 8004b54:	f000 f85e 	bl	8004c14 <_sbrk_r>
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	d124      	bne.n	8004ba6 <_malloc_r+0x92>
 8004b5c:	230c      	movs	r3, #12
 8004b5e:	6033      	str	r3, [r6, #0]
 8004b60:	4630      	mov	r0, r6
 8004b62:	f000 f868 	bl	8004c36 <__malloc_unlock>
 8004b66:	e7e4      	b.n	8004b32 <_malloc_r+0x1e>
 8004b68:	680b      	ldr	r3, [r1, #0]
 8004b6a:	1b5b      	subs	r3, r3, r5
 8004b6c:	d418      	bmi.n	8004ba0 <_malloc_r+0x8c>
 8004b6e:	2b0b      	cmp	r3, #11
 8004b70:	d90f      	bls.n	8004b92 <_malloc_r+0x7e>
 8004b72:	600b      	str	r3, [r1, #0]
 8004b74:	50cd      	str	r5, [r1, r3]
 8004b76:	18cc      	adds	r4, r1, r3
 8004b78:	4630      	mov	r0, r6
 8004b7a:	f000 f85c 	bl	8004c36 <__malloc_unlock>
 8004b7e:	f104 000b 	add.w	r0, r4, #11
 8004b82:	1d23      	adds	r3, r4, #4
 8004b84:	f020 0007 	bic.w	r0, r0, #7
 8004b88:	1ac3      	subs	r3, r0, r3
 8004b8a:	d0d3      	beq.n	8004b34 <_malloc_r+0x20>
 8004b8c:	425a      	negs	r2, r3
 8004b8e:	50e2      	str	r2, [r4, r3]
 8004b90:	e7d0      	b.n	8004b34 <_malloc_r+0x20>
 8004b92:	428c      	cmp	r4, r1
 8004b94:	684b      	ldr	r3, [r1, #4]
 8004b96:	bf16      	itet	ne
 8004b98:	6063      	strne	r3, [r4, #4]
 8004b9a:	6013      	streq	r3, [r2, #0]
 8004b9c:	460c      	movne	r4, r1
 8004b9e:	e7eb      	b.n	8004b78 <_malloc_r+0x64>
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	6849      	ldr	r1, [r1, #4]
 8004ba4:	e7cc      	b.n	8004b40 <_malloc_r+0x2c>
 8004ba6:	1cc4      	adds	r4, r0, #3
 8004ba8:	f024 0403 	bic.w	r4, r4, #3
 8004bac:	42a0      	cmp	r0, r4
 8004bae:	d005      	beq.n	8004bbc <_malloc_r+0xa8>
 8004bb0:	1a21      	subs	r1, r4, r0
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	f000 f82e 	bl	8004c14 <_sbrk_r>
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d0cf      	beq.n	8004b5c <_malloc_r+0x48>
 8004bbc:	6025      	str	r5, [r4, #0]
 8004bbe:	e7db      	b.n	8004b78 <_malloc_r+0x64>
 8004bc0:	200004d8 	.word	0x200004d8
 8004bc4:	200004dc 	.word	0x200004dc

08004bc8 <_realloc_r>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	4607      	mov	r7, r0
 8004bcc:	4614      	mov	r4, r2
 8004bce:	460e      	mov	r6, r1
 8004bd0:	b921      	cbnz	r1, 8004bdc <_realloc_r+0x14>
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004bd8:	f7ff bf9c 	b.w	8004b14 <_malloc_r>
 8004bdc:	b922      	cbnz	r2, 8004be8 <_realloc_r+0x20>
 8004bde:	f7ff ff4b 	bl	8004a78 <_free_r>
 8004be2:	4625      	mov	r5, r4
 8004be4:	4628      	mov	r0, r5
 8004be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be8:	f000 f826 	bl	8004c38 <_malloc_usable_size_r>
 8004bec:	42a0      	cmp	r0, r4
 8004bee:	d20f      	bcs.n	8004c10 <_realloc_r+0x48>
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	f7ff ff8e 	bl	8004b14 <_malloc_r>
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d0f2      	beq.n	8004be4 <_realloc_r+0x1c>
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4622      	mov	r2, r4
 8004c02:	f7ff ff15 	bl	8004a30 <memcpy>
 8004c06:	4631      	mov	r1, r6
 8004c08:	4638      	mov	r0, r7
 8004c0a:	f7ff ff35 	bl	8004a78 <_free_r>
 8004c0e:	e7e9      	b.n	8004be4 <_realloc_r+0x1c>
 8004c10:	4635      	mov	r5, r6
 8004c12:	e7e7      	b.n	8004be4 <_realloc_r+0x1c>

08004c14 <_sbrk_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	4c06      	ldr	r4, [pc, #24]	; (8004c30 <_sbrk_r+0x1c>)
 8004c18:	2300      	movs	r3, #0
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	4608      	mov	r0, r1
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	f7ff fb4e 	bl	80042c0 <_sbrk>
 8004c24:	1c43      	adds	r3, r0, #1
 8004c26:	d102      	bne.n	8004c2e <_sbrk_r+0x1a>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	b103      	cbz	r3, 8004c2e <_sbrk_r+0x1a>
 8004c2c:	602b      	str	r3, [r5, #0]
 8004c2e:	bd38      	pop	{r3, r4, r5, pc}
 8004c30:	20000674 	.word	0x20000674

08004c34 <__malloc_lock>:
 8004c34:	4770      	bx	lr

08004c36 <__malloc_unlock>:
 8004c36:	4770      	bx	lr

08004c38 <_malloc_usable_size_r>:
 8004c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c3c:	1f18      	subs	r0, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bfbc      	itt	lt
 8004c42:	580b      	ldrlt	r3, [r1, r0]
 8004c44:	18c0      	addlt	r0, r0, r3
 8004c46:	4770      	bx	lr
 8004c48:	20656854 	.word	0x20656854
 8004c4c:	6c707061 	.word	0x6c707061
 8004c50:	74616369 	.word	0x74616369
 8004c54:	206e6f69 	.word	0x206e6f69
 8004c58:	72207369 	.word	0x72207369
 8004c5c:	696e6e75 	.word	0x696e6e75
 8004c60:	0a0d676e 	.word	0x0a0d676e
 8004c64:	00000000 	.word	0x00000000
 8004c68:	20656854 	.word	0x20656854
 8004c6c:	74726175 	.word	0x74726175
 8004c70:	20544920 	.word	0x20544920
 8004c74:	72207369 	.word	0x72207369
 8004c78:	696e6e75 	.word	0x696e6e75
 8004c7c:	0a0d676e 	.word	0x0a0d676e
 8004c80:	00000000 	.word	0x00000000
 8004c84:	43535953 	.word	0x43535953
 8004c88:	3a204b4c 	.word	0x3a204b4c
 8004c8c:	646c2520 	.word	0x646c2520
 8004c90:	0a0d7a48 	.word	0x0a0d7a48
 8004c94:	00000000 	.word	0x00000000
 8004c98:	4b4c4348 	.word	0x4b4c4348
 8004c9c:	3a202020 	.word	0x3a202020
 8004ca0:	646c2520 	.word	0x646c2520
 8004ca4:	0a0d7a48 	.word	0x0a0d7a48
 8004ca8:	00000000 	.word	0x00000000
 8004cac:	4b4c4350 	.word	0x4b4c4350
 8004cb0:	3a202031 	.word	0x3a202031
 8004cb4:	646c2520 	.word	0x646c2520
 8004cb8:	0a0d7a48 	.word	0x0a0d7a48
 8004cbc:	00000000 	.word	0x00000000
 8004cc0:	4b4c4350 	.word	0x4b4c4350
 8004cc4:	3a202032 	.word	0x3a202032
 8004cc8:	646c2520 	.word	0x646c2520
 8004ccc:	0a0d7a48 	.word	0x0a0d7a48
 8004cd0:	00000000 	.word	0x00000000

08004cd4 <AHBPrescTable>:
	...
 8004cdc:	04030201 09080706                       ........

08004ce4 <APBPrescTable>:
 8004ce4:	00000000 04030201 2b302d23 6c680020     ........#-0+ .hl
 8004cf4:	6665004c 47464567 32313000 36353433     L.efgEFG.0123456
 8004d04:	41393837 45444342 31300046 35343332     789ABCDEF.012345
 8004d14:	39383736 64636261 00006665              6789abcdef..

08004d20 <_init>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	bf00      	nop
 8004d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d26:	bc08      	pop	{r3}
 8004d28:	469e      	mov	lr, r3
 8004d2a:	4770      	bx	lr

08004d2c <_fini>:
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2e:	bf00      	nop
 8004d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d32:	bc08      	pop	{r3}
 8004d34:	469e      	mov	lr, r3
 8004d36:	4770      	bx	lr
