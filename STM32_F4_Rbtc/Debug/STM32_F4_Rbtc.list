
STM32_F4_Rbtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006990  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  08006b20  08006b20  00016b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08006b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005c4  20000088  08006bb8  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000404  2000064c  0800717c  00020088  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f93d  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f1e  00000000  00000000  0002f9f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ef8  00000000  00000000  00031918  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e20  00000000  00000000  00032810  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004333  00000000  00000000  00033630  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e5ab  00000000  00000000  00037963  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ed22d  00000000  00000000  00045f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0013313b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000431c  00000000  00000000  001331b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b08 	.word	0x08006b08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08006b08 	.word	0x08006b08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_Init+0x34>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_Init+0x34>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_Init+0x34>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_Init+0x34>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f955 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	200f      	movs	r0, #15
 80005a4:	f000 f810 	bl	80005c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f000 f806 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023c00 	.word	0x40023c00

080005b8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x54>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x58>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f965 	bl	80008b6 <HAL_SYSTICK_Config>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00e      	b.n	8000614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	d80a      	bhi.n	8000612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	2200      	movs	r2, #0
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f000 f92d 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <HAL_InitTick+0x5c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
 8000610:	e000      	b.n	8000614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000020 	.word	0x20000020
 8000620:	20000004 	.word	0x20000004
 8000624:	20000000 	.word	0x20000000

08000628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x20>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_IncTick+0x24>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_IncTick+0x24>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000004 	.word	0x20000004
 800064c:	20000500 	.word	0x20000500

08000650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_GetTick+0x14>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000500 	.word	0x20000500

08000668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000670:	f7ff ffee 	bl	8000650 <HAL_GetTick>
 8000674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000680:	d005      	beq.n	800068e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_Delay+0x40>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4413      	add	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068e:	bf00      	nop
 8000690:	f7ff ffde 	bl	8000650 <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	429a      	cmp	r2, r3
 800069e:	d8f7      	bhi.n	8000690 <HAL_Delay+0x28>
  {
  }
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000004 	.word	0x20000004

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db0b      	blt.n	800073a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 021f 	and.w	r2, r3, #31
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <__NVIC_EnableIRQ+0x38>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff29 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff3e 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff8e 	bl	80007a0 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff31 	bl	8000710 <__NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffa2 	bl	8000808 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d106      	bne.n	80008ec <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008ea:	e005      	b.n	80008f8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80008f2:	f023 0304 	bic.w	r3, r3, #4
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000e010 	.word	0xe000e010

08000908 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800090c:	f000 f802 	bl	8000914 <HAL_SYSTICK_Callback>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	e16b      	b.n	8000c18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000940:	2201      	movs	r2, #1
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	429a      	cmp	r2, r3
 800095a:	f040 815a 	bne.w	8000c12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b02      	cmp	r3, #2
 8000964:	d003      	beq.n	800096e <HAL_GPIO_Init+0x4a>
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	2b12      	cmp	r3, #18
 800096c:	d123      	bne.n	80009b6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	08da      	lsrs	r2, r3, #3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3208      	adds	r2, #8
 8000976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800097a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	220f      	movs	r2, #15
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	4013      	ands	r3, r2
 8000990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	691a      	ldr	r2, [r3, #16]
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	f003 0307 	and.w	r3, r3, #7
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	08da      	lsrs	r2, r3, #3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3208      	adds	r2, #8
 80009b0:	69b9      	ldr	r1, [r7, #24]
 80009b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2203      	movs	r2, #3
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 0203 	and.w	r2, r3, #3
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d00b      	beq.n	8000a0a <HAL_GPIO_Init+0xe6>
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d007      	beq.n	8000a0a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009fe:	2b11      	cmp	r3, #17
 8000a00:	d003      	beq.n	8000a0a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b12      	cmp	r3, #18
 8000a08:	d130      	bne.n	8000a6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	2203      	movs	r2, #3
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	68da      	ldr	r2, [r3, #12]
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a40:	2201      	movs	r2, #1
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	091b      	lsrs	r3, r3, #4
 8000a56:	f003 0201 	and.w	r2, r3, #1
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f000 80b4 	beq.w	8000c12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b5f      	ldr	r3, [pc, #380]	; (8000c2c <HAL_GPIO_Init+0x308>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a5e      	ldr	r2, [pc, #376]	; (8000c2c <HAL_GPIO_Init+0x308>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b5c      	ldr	r3, [pc, #368]	; (8000c2c <HAL_GPIO_Init+0x308>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ac6:	4a5a      	ldr	r2, [pc, #360]	; (8000c30 <HAL_GPIO_Init+0x30c>)
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	3302      	adds	r3, #2
 8000ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	220f      	movs	r2, #15
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a51      	ldr	r2, [pc, #324]	; (8000c34 <HAL_GPIO_Init+0x310>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d02b      	beq.n	8000b4a <HAL_GPIO_Init+0x226>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a50      	ldr	r2, [pc, #320]	; (8000c38 <HAL_GPIO_Init+0x314>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d025      	beq.n	8000b46 <HAL_GPIO_Init+0x222>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a4f      	ldr	r2, [pc, #316]	; (8000c3c <HAL_GPIO_Init+0x318>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d01f      	beq.n	8000b42 <HAL_GPIO_Init+0x21e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a4e      	ldr	r2, [pc, #312]	; (8000c40 <HAL_GPIO_Init+0x31c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d019      	beq.n	8000b3e <HAL_GPIO_Init+0x21a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4d      	ldr	r2, [pc, #308]	; (8000c44 <HAL_GPIO_Init+0x320>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d013      	beq.n	8000b3a <HAL_GPIO_Init+0x216>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4c      	ldr	r2, [pc, #304]	; (8000c48 <HAL_GPIO_Init+0x324>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d00d      	beq.n	8000b36 <HAL_GPIO_Init+0x212>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4b      	ldr	r2, [pc, #300]	; (8000c4c <HAL_GPIO_Init+0x328>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d007      	beq.n	8000b32 <HAL_GPIO_Init+0x20e>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a4a      	ldr	r2, [pc, #296]	; (8000c50 <HAL_GPIO_Init+0x32c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d101      	bne.n	8000b2e <HAL_GPIO_Init+0x20a>
 8000b2a:	2307      	movs	r3, #7
 8000b2c:	e00e      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b2e:	2308      	movs	r3, #8
 8000b30:	e00c      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b32:	2306      	movs	r3, #6
 8000b34:	e00a      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b36:	2305      	movs	r3, #5
 8000b38:	e008      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	e006      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e004      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b42:	2302      	movs	r3, #2
 8000b44:	e002      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <HAL_GPIO_Init+0x228>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	69fa      	ldr	r2, [r7, #28]
 8000b4e:	f002 0203 	and.w	r2, r2, #3
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	4093      	lsls	r3, r2
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b5c:	4934      	ldr	r1, [pc, #208]	; (8000c30 <HAL_GPIO_Init+0x30c>)
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	3302      	adds	r3, #2
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b6a:	4b3a      	ldr	r3, [pc, #232]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	43db      	mvns	r3, r3
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	4013      	ands	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b8e:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b94:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bb8:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c0c:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3301      	adds	r3, #1
 8000c16:	61fb      	str	r3, [r7, #28]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	2b0f      	cmp	r3, #15
 8000c1c:	f67f ae90 	bls.w	8000940 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c20:	bf00      	nop
 8000c22:	3724      	adds	r7, #36	; 0x24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40013800 	.word	0x40013800
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	40020800 	.word	0x40020800
 8000c40:	40020c00 	.word	0x40020c00
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40021400 	.word	0x40021400
 8000c4c:	40021800 	.word	0x40021800
 8000c50:	40021c00 	.word	0x40021c00
 8000c54:	40013c00 	.word	0x40013c00

08000c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	691a      	ldr	r2, [r3, #16]
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e001      	b.n	8000c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ca4:	e003      	b.n	8000cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	041a      	lsls	r2, r3, #16
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	619a      	str	r2, [r3, #24]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	460b      	mov	r3, r1
 8000cca:	817b      	strh	r3, [r7, #10]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff fcbe 	bl	8000650 <HAL_GetTick>
 8000cd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b20      	cmp	r3, #32
 8000ce0:	f040 80e0 	bne.w	8000ea4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2319      	movs	r3, #25
 8000cea:	2201      	movs	r2, #1
 8000cec:	4970      	ldr	r1, [pc, #448]	; (8000eb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f000 fa7a 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e0d3      	b.n	8000ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d101      	bne.n	8000d0c <HAL_I2C_Master_Transmit+0x50>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e0cc      	b.n	8000ea6 <HAL_I2C_Master_Transmit+0x1ea>
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d007      	beq.n	8000d32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f042 0201 	orr.w	r2, r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2221      	movs	r2, #33	; 0x21
 8000d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2200      	movs	r2, #0
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	893a      	ldrh	r2, [r7, #8]
 8000d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4a50      	ldr	r2, [pc, #320]	; (8000eb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000d74:	8979      	ldrh	r1, [r7, #10]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	6a3a      	ldr	r2, [r7, #32]
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f000 f9be 	bl	80010fc <I2C_MasterRequestWrite>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e08d      	b.n	8000ea6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000da0:	e066      	b.n	8000e70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	6a39      	ldr	r1, [r7, #32]
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f000 faf4 	bl	8001394 <I2C_WaitOnTXEFlagUntilTimeout>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00d      	beq.n	8000dce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d107      	bne.n	8000dca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e06b      	b.n	8000ea6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	3b01      	subs	r3, #1
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000df6:	3b01      	subs	r3, #1
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	2b04      	cmp	r3, #4
 8000e0a:	d11b      	bne.n	8000e44 <HAL_I2C_Master_Transmit+0x188>
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d017      	beq.n	8000e44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e18:	781a      	ldrb	r2, [r3, #0]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	3b01      	subs	r3, #1
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	6a39      	ldr	r1, [r7, #32]
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f000 fae4 	bl	8001416 <I2C_WaitOnBTFFlagUntilTimeout>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00d      	beq.n	8000e70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d107      	bne.n	8000e6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e01a      	b.n	8000ea6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d194      	bne.n	8000da2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2220      	movs	r2, #32
 8000e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e000      	b.n	8000ea6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000ea4:	2302      	movs	r3, #2
  }
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	00100002 	.word	0x00100002
 8000eb4:	ffff0000 	.word	0xffff0000

08000eb8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff fbc2 	bl	8000650 <HAL_GetTick>
 8000ecc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b20      	cmp	r3, #32
 8000edc:	f040 8105 	bne.w	80010ea <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2319      	movs	r3, #25
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4982      	ldr	r1, [pc, #520]	; (80010f4 <HAL_I2C_IsDeviceReady+0x23c>)
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f000 f97c 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e0f8      	b.n	80010ec <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <HAL_I2C_IsDeviceReady+0x50>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e0f1      	b.n	80010ec <HAL_I2C_IsDeviceReady+0x234>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d007      	beq.n	8000f2e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0201 	orr.w	r2, r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2224      	movs	r2, #36	; 0x24
 8000f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4a6a      	ldr	r2, [pc, #424]	; (80010f8 <HAL_I2C_IsDeviceReady+0x240>)
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f60:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f000 f93a 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e0b6      	b.n	80010ec <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000f7e:	897b      	ldrh	r3, [r7, #10]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000f8c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8000f8e:	f7ff fb5f 	bl	8000650 <HAL_GetTick>
 8000f92:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	bf0c      	ite	eq
 8000fa2:	2301      	moveq	r3, #1
 8000fa4:	2300      	movne	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb8:	bf0c      	ite	eq
 8000fba:	2301      	moveq	r3, #1
 8000fbc:	2300      	movne	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000fc2:	e025      	b.n	8001010 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000fc4:	f7ff fb44 	bl	8000650 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d302      	bcc.n	8000fda <HAL_I2C_IsDeviceReady+0x122>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d103      	bne.n	8000fe2 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	22a0      	movs	r2, #160	; 0xa0
 8000fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	bf0c      	ite	eq
 8000ff0:	2301      	moveq	r3, #1
 8000ff2:	2300      	movne	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001006:	bf0c      	ite	eq
 8001008:	2301      	moveq	r3, #1
 800100a:	2300      	movne	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2ba0      	cmp	r3, #160	; 0xa0
 800101a:	d005      	beq.n	8001028 <HAL_I2C_IsDeviceReady+0x170>
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <HAL_I2C_IsDeviceReady+0x170>
 8001022:	7dbb      	ldrb	r3, [r7, #22]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0cd      	beq.n	8000fc4 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2220      	movs	r2, #32
 800102c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b02      	cmp	r3, #2
 800103c:	d129      	bne.n	8001092 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800104c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2319      	movs	r3, #25
 800106a:	2201      	movs	r2, #1
 800106c:	4921      	ldr	r1, [pc, #132]	; (80010f4 <HAL_I2C_IsDeviceReady+0x23c>)
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 f8ba 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e036      	b.n	80010ec <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2220      	movs	r2, #32
 8001082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	e02c      	b.n	80010ec <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80010aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2319      	movs	r3, #25
 80010b2:	2201      	movs	r2, #1
 80010b4:	490f      	ldr	r1, [pc, #60]	; (80010f4 <HAL_I2C_IsDeviceReady+0x23c>)
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f000 f896 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e012      	b.n	80010ec <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	3301      	adds	r3, #1
 80010ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f4ff af3e 	bcc.w	8000f52 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2220      	movs	r2, #32
 80010da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80010ea:	2302      	movs	r3, #2
  }
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	00100002 	.word	0x00100002
 80010f8:	ffff0000 	.word	0xffff0000

080010fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af02      	add	r7, sp, #8
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	460b      	mov	r3, r1
 800110a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b08      	cmp	r3, #8
 8001116:	d006      	beq.n	8001126 <I2C_MasterRequestWrite+0x2a>
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d003      	beq.n	8001126 <I2C_MasterRequestWrite+0x2a>
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001124:	d108      	bne.n	8001138 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e00b      	b.n	8001150 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	2b12      	cmp	r3, #18
 800113e:	d107      	bne.n	8001150 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800114e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f000 f843 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e035      	b.n	80011d8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001174:	d108      	bne.n	8001188 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001176:	897b      	ldrh	r3, [r7, #10]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001184:	611a      	str	r2, [r3, #16]
 8001186:	e01b      	b.n	80011c0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001188:	897b      	ldrh	r3, [r7, #10]
 800118a:	11db      	asrs	r3, r3, #7
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f003 0306 	and.w	r3, r3, #6
 8001192:	b2db      	uxtb	r3, r3
 8001194:	f063 030f 	orn	r3, r3, #15
 8001198:	b2da      	uxtb	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	490e      	ldr	r1, [pc, #56]	; (80011e0 <I2C_MasterRequestWrite+0xe4>)
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f000 f875 	bl	8001296 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e010      	b.n	80011d8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80011b6:	897b      	ldrh	r3, [r7, #10]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <I2C_MasterRequestWrite+0xe8>)
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 f865 	bl	8001296 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	00010008 	.word	0x00010008
 80011e4:	00010002 	.word	0x00010002

080011e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011f8:	e025      	b.n	8001246 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d021      	beq.n	8001246 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001202:	f7ff fa25 	bl	8000650 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d302      	bcc.n	8001218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d116      	bne.n	8001246 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2220      	movs	r2, #32
 8001222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f043 0220 	orr.w	r2, r3, #32
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e023      	b.n	800128e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	0c1b      	lsrs	r3, r3, #16
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b01      	cmp	r3, #1
 800124e:	d10d      	bne.n	800126c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4013      	ands	r3, r2
 800125c:	b29b      	uxth	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	bf0c      	ite	eq
 8001262:	2301      	moveq	r3, #1
 8001264:	2300      	movne	r3, #0
 8001266:	b2db      	uxtb	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	e00c      	b.n	8001286 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4013      	ands	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	bf0c      	ite	eq
 800127e:	2301      	moveq	r3, #1
 8001280:	2300      	movne	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	429a      	cmp	r2, r3
 800128a:	d0b6      	beq.n	80011fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012a4:	e051      	b.n	800134a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b4:	d123      	bne.n	80012fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80012ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2220      	movs	r2, #32
 80012da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f043 0204 	orr.w	r2, r3, #4
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e046      	b.n	800138c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001304:	d021      	beq.n	800134a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001306:	f7ff f9a3 	bl	8000650 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	429a      	cmp	r2, r3
 8001314:	d302      	bcc.n	800131c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d116      	bne.n	800134a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2220      	movs	r2, #32
 8001326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f043 0220 	orr.w	r2, r3, #32
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e020      	b.n	800138c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	0c1b      	lsrs	r3, r3, #16
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b01      	cmp	r3, #1
 8001352:	d10c      	bne.n	800136e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4013      	ands	r3, r2
 8001360:	b29b      	uxth	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf14      	ite	ne
 8001366:	2301      	movne	r3, #1
 8001368:	2300      	moveq	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	e00b      	b.n	8001386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	43da      	mvns	r2, r3
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	4013      	ands	r3, r2
 800137a:	b29b      	uxth	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	bf14      	ite	ne
 8001380:	2301      	movne	r3, #1
 8001382:	2300      	moveq	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d18d      	bne.n	80012a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013a0:	e02d      	b.n	80013fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f878 	bl	8001498 <I2C_IsAcknowledgeFailed>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e02d      	b.n	800140e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b8:	d021      	beq.n	80013fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ba:	f7ff f949 	bl	8000650 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d302      	bcc.n	80013d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d116      	bne.n	80013fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2220      	movs	r2, #32
 80013da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f043 0220 	orr.w	r2, r3, #32
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e007      	b.n	800140e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001408:	2b80      	cmp	r3, #128	; 0x80
 800140a:	d1ca      	bne.n	80013a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001422:	e02d      	b.n	8001480 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f000 f837 	bl	8001498 <I2C_IsAcknowledgeFailed>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e02d      	b.n	8001490 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143a:	d021      	beq.n	8001480 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800143c:	f7ff f908 	bl	8000650 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	429a      	cmp	r2, r3
 800144a:	d302      	bcc.n	8001452 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d116      	bne.n	8001480 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2220      	movs	r2, #32
 800145c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f043 0220 	orr.w	r2, r3, #32
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e007      	b.n	8001490 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b04      	cmp	r3, #4
 800148c:	d1ca      	bne.n	8001424 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ae:	d11b      	bne.n	80014e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2220      	movs	r2, #32
 80014c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f043 0204 	orr.w	r2, r3, #4
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e22d      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d075      	beq.n	8001602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001516:	4ba3      	ldr	r3, [pc, #652]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b04      	cmp	r3, #4
 8001520:	d00c      	beq.n	800153c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001522:	4ba0      	ldr	r3, [pc, #640]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800152a:	2b08      	cmp	r3, #8
 800152c:	d112      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152e:	4b9d      	ldr	r3, [pc, #628]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800153a:	d10b      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	4b99      	ldr	r3, [pc, #612]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d05b      	beq.n	8001600 <HAL_RCC_OscConfig+0x108>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d157      	bne.n	8001600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e208      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d106      	bne.n	800156c <HAL_RCC_OscConfig+0x74>
 800155e:	4b91      	ldr	r3, [pc, #580]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a90      	ldr	r2, [pc, #576]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e01d      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x98>
 8001576:	4b8b      	ldr	r3, [pc, #556]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a8a      	ldr	r2, [pc, #552]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b88      	ldr	r3, [pc, #544]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a87      	ldr	r2, [pc, #540]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0xb0>
 8001590:	4b84      	ldr	r3, [pc, #528]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a83      	ldr	r2, [pc, #524]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b81      	ldr	r3, [pc, #516]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a80      	ldr	r2, [pc, #512]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff f84e 	bl	8000650 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff f84a 	bl	8000650 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1cd      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b76      	ldr	r3, [pc, #472]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0xc0>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff f83a 	bl	8000650 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff f836 	bl	8000650 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1b9      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	4b6c      	ldr	r3, [pc, #432]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0xe8>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d063      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800160e:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800161a:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001622:	2b08      	cmp	r3, #8
 8001624:	d11c      	bne.n	8001660 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001626:	4b5f      	ldr	r3, [pc, #380]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d116      	bne.n	8001660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	4b5c      	ldr	r3, [pc, #368]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_RCC_OscConfig+0x152>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e18d      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164a:	4b56      	ldr	r3, [pc, #344]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4952      	ldr	r1, [pc, #328]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	e03a      	b.n	80016d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001668:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <HAL_RCC_OscConfig+0x2b0>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7fe ffef 	bl	8000650 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001676:	f7fe ffeb 	bl	8000650 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e16e      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b43      	ldr	r3, [pc, #268]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4940      	ldr	r1, [pc, #256]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <HAL_RCC_OscConfig+0x2b0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7fe ffce 	bl	8000650 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b8:	f7fe ffca 	bl	8000650 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e14d      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d030      	beq.n	8001744 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d016      	beq.n	8001718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ea:	4b30      	ldr	r3, [pc, #192]	; (80017ac <HAL_RCC_OscConfig+0x2b4>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f0:	f7fe ffae 	bl	8000650 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f8:	f7fe ffaa 	bl	8000650 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e12d      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800170c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x200>
 8001716:	e015      	b.n	8001744 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_RCC_OscConfig+0x2b4>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7fe ff97 	bl	8000650 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001726:	f7fe ff93 	bl	8000650 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e116      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800173a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a0 	beq.w	8001892 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10f      	bne.n	8001782 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800177e:	2301      	movs	r3, #1
 8001780:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_OscConfig+0x2b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	2b00      	cmp	r3, #0
 800178c:	d121      	bne.n	80017d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_RCC_OscConfig+0x2b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_RCC_OscConfig+0x2b8>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179a:	f7fe ff59 	bl	8000650 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	e011      	b.n	80017c6 <HAL_RCC_OscConfig+0x2ce>
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	42470000 	.word	0x42470000
 80017ac:	42470e80 	.word	0x42470e80
 80017b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b4:	f7fe ff4c 	bl	8000650 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0cf      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <HAL_RCC_OscConfig+0x478>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d106      	bne.n	80017e8 <HAL_RCC_OscConfig+0x2f0>
 80017da:	4b66      	ldr	r3, [pc, #408]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017de:	4a65      	ldr	r2, [pc, #404]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6713      	str	r3, [r2, #112]	; 0x70
 80017e6:	e01c      	b.n	8001822 <HAL_RCC_OscConfig+0x32a>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d10c      	bne.n	800180a <HAL_RCC_OscConfig+0x312>
 80017f0:	4b60      	ldr	r3, [pc, #384]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	4a5f      	ldr	r2, [pc, #380]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	6713      	str	r3, [r2, #112]	; 0x70
 80017fc:	4b5d      	ldr	r3, [pc, #372]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001800:	4a5c      	ldr	r2, [pc, #368]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6713      	str	r3, [r2, #112]	; 0x70
 8001808:	e00b      	b.n	8001822 <HAL_RCC_OscConfig+0x32a>
 800180a:	4b5a      	ldr	r3, [pc, #360]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a59      	ldr	r2, [pc, #356]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	4b57      	ldr	r3, [pc, #348]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a56      	ldr	r2, [pc, #344]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d015      	beq.n	8001856 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182a:	f7fe ff11 	bl	8000650 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7fe ff0d 	bl	8000650 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e08e      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001848:	4b4a      	ldr	r3, [pc, #296]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0ee      	beq.n	8001832 <HAL_RCC_OscConfig+0x33a>
 8001854:	e014      	b.n	8001880 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001856:	f7fe fefb 	bl	8000650 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	e00a      	b.n	8001874 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7fe fef7 	bl	8000650 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e078      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001874:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ee      	bne.n	800185e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001880:	7dfb      	ldrb	r3, [r7, #23]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d105      	bne.n	8001892 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a3a      	ldr	r2, [pc, #232]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 800188c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d064      	beq.n	8001964 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800189a:	4b36      	ldr	r3, [pc, #216]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d05c      	beq.n	8001960 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d141      	bne.n	8001932 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ae:	4b32      	ldr	r3, [pc, #200]	; (8001978 <HAL_RCC_OscConfig+0x480>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7fe fecc 	bl	8000650 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018bc:	f7fe fec8 	bl	8000650 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e04b      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ce:	4b29      	ldr	r3, [pc, #164]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69da      	ldr	r2, [r3, #28]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	019b      	lsls	r3, r3, #6
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	085b      	lsrs	r3, r3, #1
 80018f2:	3b01      	subs	r3, #1
 80018f4:	041b      	lsls	r3, r3, #16
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	061b      	lsls	r3, r3, #24
 80018fe:	491d      	ldr	r1, [pc, #116]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_RCC_OscConfig+0x480>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7fe fea1 	bl	8000650 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001912:	f7fe fe9d 	bl	8000650 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e020      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x41a>
 8001930:	e018      	b.n	8001964 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_RCC_OscConfig+0x480>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7fe fe8a 	bl	8000650 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001940:	f7fe fe86 	bl	8000650 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e009      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_RCC_OscConfig+0x47c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x448>
 800195e:	e001      	b.n	8001964 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40007000 	.word	0x40007000
 8001974:	40023800 	.word	0x40023800
 8001978:	42470060 	.word	0x42470060

0800197c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0ca      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001990:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <HAL_RCC_ClockConfig+0x1b4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d90c      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b64      	ldr	r3, [pc, #400]	; (8001b30 <HAL_RCC_ClockConfig+0x1b4>)
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b62      	ldr	r3, [pc, #392]	; (8001b30 <HAL_RCC_ClockConfig+0x1b4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0b6      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d0:	4b58      	ldr	r3, [pc, #352]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4a57      	ldr	r2, [pc, #348]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 80019d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e8:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4a51      	ldr	r2, [pc, #324]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 80019ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f4:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	494c      	ldr	r1, [pc, #304]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d044      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d119      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e07d      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d003      	beq.n	8001a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06d      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e065      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5a:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f023 0203 	bic.w	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4933      	ldr	r1, [pc, #204]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a6c:	f7fe fdf0 	bl	8000650 <HAL_GetTick>
 8001a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	e00a      	b.n	8001a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a74:	f7fe fdec 	bl	8000650 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e04d      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 020c 	and.w	r2, r3, #12
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d1eb      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_RCC_ClockConfig+0x1b4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d20c      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_RCC_ClockConfig+0x1b4>)
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <HAL_RCC_ClockConfig+0x1b4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e030      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4915      	ldr	r1, [pc, #84]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	490d      	ldr	r1, [pc, #52]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b02:	f000 f81d 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001b06:	4601      	mov	r1, r0
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	fa21 f303 	lsr.w	r3, r1, r3
 8001b1a:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b1e:	200f      	movs	r0, #15
 8001b20:	f7fe fd52 	bl	80005c8 <HAL_InitTick>

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023c00 	.word	0x40023c00
 8001b34:	40023800 	.word	0x40023800
 8001b38:	08006abc 	.word	0x08006abc
 8001b3c:	20000020 	.word	0x20000020

08001b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b56:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d007      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x32>
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d008      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x38>
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 80b4 	bne.w	8001cd4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b5e      	ldr	r3, [pc, #376]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b6e:	60bb      	str	r3, [r7, #8]
       break;
 8001b70:	e0b3      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b72:	4b5e      	ldr	r3, [pc, #376]	; (8001cec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001b74:	60bb      	str	r3, [r7, #8]
      break;
 8001b76:	e0b0      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b78:	4b5a      	ldr	r3, [pc, #360]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b82:	4b58      	ldr	r3, [pc, #352]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d04a      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	4b55      	ldr	r3, [pc, #340]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	f04f 0400 	mov.w	r4, #0
 8001b98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	ea03 0501 	and.w	r5, r3, r1
 8001ba4:	ea04 0602 	and.w	r6, r4, r2
 8001ba8:	4629      	mov	r1, r5
 8001baa:	4632      	mov	r2, r6
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	f04f 0400 	mov.w	r4, #0
 8001bb4:	0154      	lsls	r4, r2, #5
 8001bb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bba:	014b      	lsls	r3, r1, #5
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4622      	mov	r2, r4
 8001bc0:	1b49      	subs	r1, r1, r5
 8001bc2:	eb62 0206 	sbc.w	r2, r2, r6
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	f04f 0400 	mov.w	r4, #0
 8001bce:	0194      	lsls	r4, r2, #6
 8001bd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bd4:	018b      	lsls	r3, r1, #6
 8001bd6:	1a5b      	subs	r3, r3, r1
 8001bd8:	eb64 0402 	sbc.w	r4, r4, r2
 8001bdc:	f04f 0100 	mov.w	r1, #0
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	00e2      	lsls	r2, r4, #3
 8001be6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bea:	00d9      	lsls	r1, r3, #3
 8001bec:	460b      	mov	r3, r1
 8001bee:	4614      	mov	r4, r2
 8001bf0:	195b      	adds	r3, r3, r5
 8001bf2:	eb44 0406 	adc.w	r4, r4, r6
 8001bf6:	f04f 0100 	mov.w	r1, #0
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	0262      	lsls	r2, r4, #9
 8001c00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c04:	0259      	lsls	r1, r3, #9
 8001c06:	460b      	mov	r3, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f04f 0400 	mov.w	r4, #0
 8001c14:	461a      	mov	r2, r3
 8001c16:	4623      	mov	r3, r4
 8001c18:	f7fe fb32 	bl	8000280 <__aeabi_uldivmod>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	460c      	mov	r4, r1
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	e049      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c24:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	f04f 0400 	mov.w	r4, #0
 8001c2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	ea03 0501 	and.w	r5, r3, r1
 8001c3a:	ea04 0602 	and.w	r6, r4, r2
 8001c3e:	4629      	mov	r1, r5
 8001c40:	4632      	mov	r2, r6
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	f04f 0400 	mov.w	r4, #0
 8001c4a:	0154      	lsls	r4, r2, #5
 8001c4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c50:	014b      	lsls	r3, r1, #5
 8001c52:	4619      	mov	r1, r3
 8001c54:	4622      	mov	r2, r4
 8001c56:	1b49      	subs	r1, r1, r5
 8001c58:	eb62 0206 	sbc.w	r2, r2, r6
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	f04f 0400 	mov.w	r4, #0
 8001c64:	0194      	lsls	r4, r2, #6
 8001c66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c6a:	018b      	lsls	r3, r1, #6
 8001c6c:	1a5b      	subs	r3, r3, r1
 8001c6e:	eb64 0402 	sbc.w	r4, r4, r2
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	00e2      	lsls	r2, r4, #3
 8001c7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c80:	00d9      	lsls	r1, r3, #3
 8001c82:	460b      	mov	r3, r1
 8001c84:	4614      	mov	r4, r2
 8001c86:	195b      	adds	r3, r3, r5
 8001c88:	eb44 0406 	adc.w	r4, r4, r6
 8001c8c:	f04f 0100 	mov.w	r1, #0
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	02a2      	lsls	r2, r4, #10
 8001c96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c9a:	0299      	lsls	r1, r3, #10
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4614      	mov	r4, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f04f 0400 	mov.w	r4, #0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4623      	mov	r3, r4
 8001cae:	f7fe fae7 	bl	8000280 <__aeabi_uldivmod>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	460c      	mov	r4, r1
 8001cb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	60bb      	str	r3, [r7, #8]
      break;
 8001cd2:	e002      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001cd6:	60bb      	str	r3, [r7, #8]
      break;
 8001cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cda:	68bb      	ldr	r3, [r7, #8]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	00f42400 	.word	0x00f42400
 8001cec:	007a1200 	.word	0x007a1200

08001cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000020 	.word	0x20000020

08001d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d0c:	f7ff fff0 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d10:	4601      	mov	r1, r0
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	0a9b      	lsrs	r3, r3, #10
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4a03      	ldr	r2, [pc, #12]	; (8001d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
 8001d20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	08006acc 	.word	0x08006acc

08001d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d34:	f7ff ffdc 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d38:	4601      	mov	r1, r0
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0b5b      	lsrs	r3, r3, #13
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d46:	5cd3      	ldrb	r3, [r2, r3]
 8001d48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	08006acc 	.word	0x08006acc

08001d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e01d      	b.n	8001da6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f815 	bl	8001dae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3304      	adds	r3, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f000 faa0 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0201 	orr.w	r2, r2, #1
 8001dd8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b06      	cmp	r3, #6
 8001dea:	d007      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e01d      	b.n	8001e58 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d106      	bne.n	8001e36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f815 	bl	8001e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3304      	adds	r3, #4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4610      	mov	r0, r2
 8001e4a:	f000 fa47 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2201      	movs	r2, #1
 8001e84:	6839      	ldr	r1, [r7, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fc78 	bl	800277c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <HAL_TIM_PWM_Start+0x74>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d004      	beq.n	8001ea0 <HAL_TIM_PWM_Start+0x2c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a14      	ldr	r2, [pc, #80]	; (8001eec <HAL_TIM_PWM_Start+0x78>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d101      	bne.n	8001ea4 <HAL_TIM_PWM_Start+0x30>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_TIM_PWM_Start+0x32>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b06      	cmp	r3, #6
 8001eca:	d007      	beq.n	8001edc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d122      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d11b      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0202 	mvn.w	r2, #2
 8001f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f9b4 	bl	80022a0 <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f9a6 	bl	800228c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f9b7 	bl	80022b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d122      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d11b      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0204 	mvn.w	r2, #4
 8001f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2202      	movs	r2, #2
 8001f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f98a 	bl	80022a0 <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f97c 	bl	800228c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f98d 	bl	80022b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d122      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d11b      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0208 	mvn.w	r2, #8
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f960 	bl	80022a0 <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f952 	bl	800228c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f963 	bl	80022b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b10      	cmp	r3, #16
 8002000:	d122      	bne.n	8002048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b10      	cmp	r3, #16
 800200e:	d11b      	bne.n	8002048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0210 	mvn.w	r2, #16
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2208      	movs	r2, #8
 800201e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f936 	bl	80022a0 <HAL_TIM_IC_CaptureCallback>
 8002034:	e005      	b.n	8002042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f928 	bl	800228c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f939 	bl	80022b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d10e      	bne.n	8002074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d107      	bne.n	8002074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0201 	mvn.w	r2, #1
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fff2 	bl	8003058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207e:	2b80      	cmp	r3, #128	; 0x80
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208c:	2b80      	cmp	r3, #128	; 0x80
 800208e:	d107      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fb9d 	bl	80027da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b40      	cmp	r3, #64	; 0x40
 80020ac:	d10e      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	d107      	bne.n	80020cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8fe 	bl	80022c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d10e      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d107      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0220 	mvn.w	r2, #32
 80020f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fb67 	bl	80027c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002116:	2302      	movs	r3, #2
 8002118:	e0b4      	b.n	8002284 <HAL_TIM_PWM_ConfigChannel+0x184>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2202      	movs	r2, #2
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b0c      	cmp	r3, #12
 800212e:	f200 809f 	bhi.w	8002270 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002132:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	0800216d 	.word	0x0800216d
 800213c:	08002271 	.word	0x08002271
 8002140:	08002271 	.word	0x08002271
 8002144:	08002271 	.word	0x08002271
 8002148:	080021ad 	.word	0x080021ad
 800214c:	08002271 	.word	0x08002271
 8002150:	08002271 	.word	0x08002271
 8002154:	08002271 	.word	0x08002271
 8002158:	080021ef 	.word	0x080021ef
 800215c:	08002271 	.word	0x08002271
 8002160:	08002271 	.word	0x08002271
 8002164:	08002271 	.word	0x08002271
 8002168:	0800222f 	.word	0x0800222f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f952 	bl	800241c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0208 	orr.w	r2, r2, #8
 8002186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0204 	bic.w	r2, r2, #4
 8002196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6999      	ldr	r1, [r3, #24]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	619a      	str	r2, [r3, #24]
      break;
 80021aa:	e062      	b.n	8002272 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f9a2 	bl	80024fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6999      	ldr	r1, [r3, #24]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	021a      	lsls	r2, r3, #8
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	619a      	str	r2, [r3, #24]
      break;
 80021ec:	e041      	b.n	8002272 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 f9f7 	bl	80025e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69da      	ldr	r2, [r3, #28]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0208 	orr.w	r2, r2, #8
 8002208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0204 	bic.w	r2, r2, #4
 8002218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69d9      	ldr	r1, [r3, #28]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	61da      	str	r2, [r3, #28]
      break;
 800222c:	e021      	b.n	8002272 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fa4b 	bl	80026d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69d9      	ldr	r1, [r3, #28]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	021a      	lsls	r2, r3, #8
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	61da      	str	r2, [r3, #28]
      break;
 800226e:	e000      	b.n	8002272 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002270:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a40      	ldr	r2, [pc, #256]	; (80023f0 <TIM_Base_SetConfig+0x114>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <TIM_Base_SetConfig+0x40>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fa:	d00f      	beq.n	800231c <TIM_Base_SetConfig+0x40>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3d      	ldr	r2, [pc, #244]	; (80023f4 <TIM_Base_SetConfig+0x118>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00b      	beq.n	800231c <TIM_Base_SetConfig+0x40>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3c      	ldr	r2, [pc, #240]	; (80023f8 <TIM_Base_SetConfig+0x11c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <TIM_Base_SetConfig+0x40>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3b      	ldr	r2, [pc, #236]	; (80023fc <TIM_Base_SetConfig+0x120>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d003      	beq.n	800231c <TIM_Base_SetConfig+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3a      	ldr	r2, [pc, #232]	; (8002400 <TIM_Base_SetConfig+0x124>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d108      	bne.n	800232e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a2f      	ldr	r2, [pc, #188]	; (80023f0 <TIM_Base_SetConfig+0x114>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d02b      	beq.n	800238e <TIM_Base_SetConfig+0xb2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233c:	d027      	beq.n	800238e <TIM_Base_SetConfig+0xb2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a2c      	ldr	r2, [pc, #176]	; (80023f4 <TIM_Base_SetConfig+0x118>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d023      	beq.n	800238e <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a2b      	ldr	r2, [pc, #172]	; (80023f8 <TIM_Base_SetConfig+0x11c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d01f      	beq.n	800238e <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a2a      	ldr	r2, [pc, #168]	; (80023fc <TIM_Base_SetConfig+0x120>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01b      	beq.n	800238e <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a29      	ldr	r2, [pc, #164]	; (8002400 <TIM_Base_SetConfig+0x124>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d017      	beq.n	800238e <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a28      	ldr	r2, [pc, #160]	; (8002404 <TIM_Base_SetConfig+0x128>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a27      	ldr	r2, [pc, #156]	; (8002408 <TIM_Base_SetConfig+0x12c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00f      	beq.n	800238e <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a26      	ldr	r2, [pc, #152]	; (800240c <TIM_Base_SetConfig+0x130>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00b      	beq.n	800238e <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a25      	ldr	r2, [pc, #148]	; (8002410 <TIM_Base_SetConfig+0x134>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a24      	ldr	r2, [pc, #144]	; (8002414 <TIM_Base_SetConfig+0x138>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d003      	beq.n	800238e <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a23      	ldr	r2, [pc, #140]	; (8002418 <TIM_Base_SetConfig+0x13c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d108      	bne.n	80023a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <TIM_Base_SetConfig+0x114>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d003      	beq.n	80023d4 <TIM_Base_SetConfig+0xf8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <TIM_Base_SetConfig+0x124>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d103      	bne.n	80023dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	615a      	str	r2, [r3, #20]
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40010000 	.word	0x40010000
 80023f4:	40000400 	.word	0x40000400
 80023f8:	40000800 	.word	0x40000800
 80023fc:	40000c00 	.word	0x40000c00
 8002400:	40010400 	.word	0x40010400
 8002404:	40014000 	.word	0x40014000
 8002408:	40014400 	.word	0x40014400
 800240c:	40014800 	.word	0x40014800
 8002410:	40001800 	.word	0x40001800
 8002414:	40001c00 	.word	0x40001c00
 8002418:	40002000 	.word	0x40002000

0800241c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f023 0201 	bic.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 0303 	bic.w	r3, r3, #3
 8002452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f023 0302 	bic.w	r3, r3, #2
 8002464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <TIM_OC1_SetConfig+0xd8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d003      	beq.n	8002480 <TIM_OC1_SetConfig+0x64>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <TIM_OC1_SetConfig+0xdc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d10c      	bne.n	800249a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f023 0308 	bic.w	r3, r3, #8
 8002486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <TIM_OC1_SetConfig+0xd8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d003      	beq.n	80024aa <TIM_OC1_SetConfig+0x8e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <TIM_OC1_SetConfig+0xdc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d111      	bne.n	80024ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	621a      	str	r2, [r3, #32]
}
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40010400 	.word	0x40010400

080024fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f023 0210 	bic.w	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800252a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f023 0320 	bic.w	r3, r3, #32
 8002546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <TIM_OC2_SetConfig+0xe4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d003      	beq.n	8002564 <TIM_OC2_SetConfig+0x68>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <TIM_OC2_SetConfig+0xe8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d10d      	bne.n	8002580 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800256a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800257e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a17      	ldr	r2, [pc, #92]	; (80025e0 <TIM_OC2_SetConfig+0xe4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d003      	beq.n	8002590 <TIM_OC2_SetConfig+0x94>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <TIM_OC2_SetConfig+0xe8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d113      	bne.n	80025b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800259e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	621a      	str	r2, [r3, #32]
}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40010000 	.word	0x40010000
 80025e4:	40010400 	.word	0x40010400

080025e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 0303 	bic.w	r3, r3, #3
 800261e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a21      	ldr	r2, [pc, #132]	; (80026c8 <TIM_OC3_SetConfig+0xe0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d003      	beq.n	800264e <TIM_OC3_SetConfig+0x66>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a20      	ldr	r2, [pc, #128]	; (80026cc <TIM_OC3_SetConfig+0xe4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d10d      	bne.n	800266a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a16      	ldr	r2, [pc, #88]	; (80026c8 <TIM_OC3_SetConfig+0xe0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d003      	beq.n	800267a <TIM_OC3_SetConfig+0x92>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a15      	ldr	r2, [pc, #84]	; (80026cc <TIM_OC3_SetConfig+0xe4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d113      	bne.n	80026a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	621a      	str	r2, [r3, #32]
}
 80026bc:	bf00      	nop
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40010000 	.word	0x40010000
 80026cc:	40010400 	.word	0x40010400

080026d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800271a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	031b      	lsls	r3, r3, #12
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <TIM_OC4_SetConfig+0xa4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d003      	beq.n	8002738 <TIM_OC4_SetConfig+0x68>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a11      	ldr	r2, [pc, #68]	; (8002778 <TIM_OC4_SetConfig+0xa8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d109      	bne.n	800274c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800273e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	019b      	lsls	r3, r3, #6
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	621a      	str	r2, [r3, #32]
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40010000 	.word	0x40010000
 8002778:	40010400 	.word	0x40010400

0800277c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2201      	movs	r2, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a1a      	ldr	r2, [r3, #32]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	43db      	mvns	r3, r3
 800279e:	401a      	ands	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a1a      	ldr	r2, [r3, #32]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	fa01 f303 	lsl.w	r3, r1, r3
 80027b4:	431a      	orrs	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	621a      	str	r2, [r3, #32]
}
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e03f      	b.n	8002880 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f837 	bl	8002888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2224      	movs	r2, #36	; 0x24
 800281e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002830:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f916 	bl	8002a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002846:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002856:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002866:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	f040 8083 	bne.w	80029c4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_UART_Transmit+0x2e>
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e07b      	b.n	80029c6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_UART_Transmit+0x40>
 80028d8:	2302      	movs	r3, #2
 80028da:	e074      	b.n	80029c6 <HAL_UART_Transmit+0x12a>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2221      	movs	r2, #33	; 0x21
 80028ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028f2:	f7fd fead 	bl	8000650 <HAL_GetTick>
 80028f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	88fa      	ldrh	r2, [r7, #6]
 80028fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	88fa      	ldrh	r2, [r7, #6]
 8002902:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002904:	e042      	b.n	800298c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291c:	d122      	bne.n	8002964 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2200      	movs	r2, #0
 8002926:	2180      	movs	r1, #128	; 0x80
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f850 	bl	80029ce <UART_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e046      	b.n	80029c6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800294a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	3302      	adds	r3, #2
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	e017      	b.n	800298c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	3301      	adds	r3, #1
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	e013      	b.n	800298c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2200      	movs	r2, #0
 800296c:	2180      	movs	r1, #128	; 0x80
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f82d 	bl	80029ce <UART_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e023      	b.n	80029c6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	60ba      	str	r2, [r7, #8]
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1b7      	bne.n	8002906 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2200      	movs	r2, #0
 800299e:	2140      	movs	r1, #64	; 0x40
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f814 	bl	80029ce <UART_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e00a      	b.n	80029c6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	e000      	b.n	80029c6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80029c4:	2302      	movs	r3, #2
  }
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	4613      	mov	r3, r2
 80029dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029de:	e02c      	b.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d028      	beq.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <UART_WaitOnFlagUntilTimeout+0x30>
 80029ee:	f7fd fe2f 	bl	8000650 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d21d      	bcs.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a0c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e00f      	b.n	8002a5a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4013      	ands	r3, r2
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	bf0c      	ite	eq
 8002a4a:	2301      	moveq	r3, #1
 8002a4c:	2300      	movne	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d0c3      	beq.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a64:	b5b0      	push	{r4, r5, r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002aa4:	f023 030c 	bic.w	r3, r3, #12
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	68f9      	ldr	r1, [r7, #12]
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad0:	f040 80e4 	bne.w	8002c9c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4aab      	ldr	r2, [pc, #684]	; (8002d88 <UART_SetConfig+0x324>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d004      	beq.n	8002ae8 <UART_SetConfig+0x84>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4aaa      	ldr	r2, [pc, #680]	; (8002d8c <UART_SetConfig+0x328>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d16c      	bne.n	8002bc2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ae8:	f7ff f922 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	009a      	lsls	r2, r3, #2
 8002af6:	441a      	add	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b02:	4aa3      	ldr	r2, [pc, #652]	; (8002d90 <UART_SetConfig+0x32c>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	011c      	lsls	r4, r3, #4
 8002b0c:	f7ff f910 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	009a      	lsls	r2, r3, #2
 8002b1a:	441a      	add	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b26:	f7ff f903 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	009a      	lsls	r2, r3, #2
 8002b34:	441a      	add	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	4a93      	ldr	r2, [pc, #588]	; (8002d90 <UART_SetConfig+0x32c>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2264      	movs	r2, #100	; 0x64
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	1aeb      	subs	r3, r5, r3
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	3332      	adds	r3, #50	; 0x32
 8002b54:	4a8e      	ldr	r2, [pc, #568]	; (8002d90 <UART_SetConfig+0x32c>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b62:	441c      	add	r4, r3
 8002b64:	f7ff f8e4 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	009a      	lsls	r2, r3, #2
 8002b72:	441a      	add	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b7e:	f7ff f8d7 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	009a      	lsls	r2, r3, #2
 8002b8c:	441a      	add	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	4a7d      	ldr	r2, [pc, #500]	; (8002d90 <UART_SetConfig+0x32c>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	2264      	movs	r2, #100	; 0x64
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	1aeb      	subs	r3, r5, r3
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	3332      	adds	r3, #50	; 0x32
 8002bac:	4a78      	ldr	r2, [pc, #480]	; (8002d90 <UART_SetConfig+0x32c>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	f003 0207 	and.w	r2, r3, #7
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4422      	add	r2, r4
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	e154      	b.n	8002e6c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bc2:	f7ff f8a1 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	009a      	lsls	r2, r3, #2
 8002bd0:	441a      	add	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	4a6c      	ldr	r2, [pc, #432]	; (8002d90 <UART_SetConfig+0x32c>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	011c      	lsls	r4, r3, #4
 8002be6:	f7ff f88f 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8002bea:	4602      	mov	r2, r0
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009a      	lsls	r2, r3, #2
 8002bf4:	441a      	add	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c00:	f7ff f882 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009a      	lsls	r2, r3, #2
 8002c0e:	441a      	add	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1a:	4a5d      	ldr	r2, [pc, #372]	; (8002d90 <UART_SetConfig+0x32c>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	2264      	movs	r2, #100	; 0x64
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	1aeb      	subs	r3, r5, r3
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	3332      	adds	r3, #50	; 0x32
 8002c2e:	4a58      	ldr	r2, [pc, #352]	; (8002d90 <UART_SetConfig+0x32c>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c3c:	441c      	add	r4, r3
 8002c3e:	f7ff f863 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8002c42:	4602      	mov	r2, r0
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	009a      	lsls	r2, r3, #2
 8002c4c:	441a      	add	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c58:	f7ff f856 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	009a      	lsls	r2, r3, #2
 8002c66:	441a      	add	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	4a47      	ldr	r2, [pc, #284]	; (8002d90 <UART_SetConfig+0x32c>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	2264      	movs	r2, #100	; 0x64
 8002c7c:	fb02 f303 	mul.w	r3, r2, r3
 8002c80:	1aeb      	subs	r3, r5, r3
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	3332      	adds	r3, #50	; 0x32
 8002c86:	4a42      	ldr	r2, [pc, #264]	; (8002d90 <UART_SetConfig+0x32c>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	f003 0207 	and.w	r2, r3, #7
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4422      	add	r2, r4
 8002c98:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002c9a:	e0e7      	b.n	8002e6c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a39      	ldr	r2, [pc, #228]	; (8002d88 <UART_SetConfig+0x324>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d004      	beq.n	8002cb0 <UART_SetConfig+0x24c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a38      	ldr	r2, [pc, #224]	; (8002d8c <UART_SetConfig+0x328>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d171      	bne.n	8002d94 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002cb0:	f7ff f83e 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	009a      	lsls	r2, r3, #2
 8002cbe:	441a      	add	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	4a31      	ldr	r2, [pc, #196]	; (8002d90 <UART_SetConfig+0x32c>)
 8002ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	011c      	lsls	r4, r3, #4
 8002cd4:	f7ff f82c 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	009a      	lsls	r2, r3, #2
 8002ce2:	441a      	add	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	fbb2 f5f3 	udiv	r5, r2, r3
 8002cee:	f7ff f81f 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009a      	lsls	r2, r3, #2
 8002cfc:	441a      	add	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d08:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <UART_SetConfig+0x32c>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2264      	movs	r2, #100	; 0x64
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	1aeb      	subs	r3, r5, r3
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	3332      	adds	r3, #50	; 0x32
 8002d1c:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <UART_SetConfig+0x32c>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d28:	441c      	add	r4, r3
 8002d2a:	f7ff f801 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	009a      	lsls	r2, r3, #2
 8002d38:	441a      	add	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d44:	f7fe fff4 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	009a      	lsls	r2, r3, #2
 8002d52:	441a      	add	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <UART_SetConfig+0x32c>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	2264      	movs	r2, #100	; 0x64
 8002d68:	fb02 f303 	mul.w	r3, r2, r3
 8002d6c:	1aeb      	subs	r3, r5, r3
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	3332      	adds	r3, #50	; 0x32
 8002d72:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <UART_SetConfig+0x32c>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	f003 020f 	and.w	r2, r3, #15
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4422      	add	r2, r4
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	e071      	b.n	8002e6c <UART_SetConfig+0x408>
 8002d88:	40011000 	.word	0x40011000
 8002d8c:	40011400 	.word	0x40011400
 8002d90:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d94:	f7fe ffb8 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	009a      	lsls	r2, r3, #2
 8002da2:	441a      	add	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	4a31      	ldr	r2, [pc, #196]	; (8002e74 <UART_SetConfig+0x410>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	011c      	lsls	r4, r3, #4
 8002db8:	f7fe ffa6 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009a      	lsls	r2, r3, #2
 8002dc6:	441a      	add	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	fbb2 f5f3 	udiv	r5, r2, r3
 8002dd2:	f7fe ff99 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	009a      	lsls	r2, r3, #2
 8002de0:	441a      	add	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <UART_SetConfig+0x410>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	2264      	movs	r2, #100	; 0x64
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	1aeb      	subs	r3, r5, r3
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	3332      	adds	r3, #50	; 0x32
 8002e00:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <UART_SetConfig+0x410>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0c:	441c      	add	r4, r3
 8002e0e:	f7fe ff7b 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	009a      	lsls	r2, r3, #2
 8002e1c:	441a      	add	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e28:	f7fe ff6e 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	009a      	lsls	r2, r3, #2
 8002e36:	441a      	add	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e42:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <UART_SetConfig+0x410>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	2264      	movs	r2, #100	; 0x64
 8002e4c:	fb02 f303 	mul.w	r3, r2, r3
 8002e50:	1aeb      	subs	r3, r5, r3
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	3332      	adds	r3, #50	; 0x32
 8002e56:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <UART_SetConfig+0x410>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	f003 020f 	and.w	r2, r3, #15
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4422      	add	r2, r4
 8002e68:	609a      	str	r2, [r3, #8]
}
 8002e6a:	e7ff      	b.n	8002e6c <UART_SetConfig+0x408>
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bdb0      	pop	{r4, r5, r7, pc}
 8002e74:	51eb851f 	.word	0x51eb851f

08002e78 <Error_handler>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;
extern TIM_OC_InitTypeDef oc;

void Error_handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
	while(1);
 8002e7c:	e7fe      	b.n	8002e7c <Error_handler+0x4>
	...

08002e80 <GPIO_Init>:
}


void GPIO_Init()
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08c      	sub	sp, #48	; 0x30
 8002e84:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	4b53      	ldr	r3, [pc, #332]	; (8002fd8 <GPIO_Init+0x158>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a52      	ldr	r2, [pc, #328]	; (8002fd8 <GPIO_Init+0x158>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <GPIO_Init+0x158>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	4b4c      	ldr	r3, [pc, #304]	; (8002fd8 <GPIO_Init+0x158>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	4a4b      	ldr	r2, [pc, #300]	; (8002fd8 <GPIO_Init+0x158>)
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb2:	4b49      	ldr	r3, [pc, #292]	; (8002fd8 <GPIO_Init+0x158>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_USART2_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	4b45      	ldr	r3, [pc, #276]	; (8002fd8 <GPIO_Init+0x158>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	4a44      	ldr	r2, [pc, #272]	; (8002fd8 <GPIO_Init+0x158>)
 8002ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ece:	4b42      	ldr	r3, [pc, #264]	; (8002fd8 <GPIO_Init+0x158>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b3e      	ldr	r3, [pc, #248]	; (8002fd8 <GPIO_Init+0x158>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a3d      	ldr	r2, [pc, #244]	; (8002fd8 <GPIO_Init+0x158>)
 8002ee4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eea:	4b3b      	ldr	r3, [pc, #236]	; (8002fd8 <GPIO_Init+0x158>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <GPIO_Init+0x158>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a36      	ldr	r2, [pc, #216]	; (8002fd8 <GPIO_Init+0x158>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b34      	ldr	r3, [pc, #208]	; (8002fd8 <GPIO_Init+0x158>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_TIM4_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <GPIO_Init+0x158>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4a2f      	ldr	r2, [pc, #188]	; (8002fd8 <GPIO_Init+0x158>)
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
 8002f22:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <GPIO_Init+0x158>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]

	 gpio.Pin = GPIO_PIN_2;
 8002f2e:	4b2b      	ldr	r3, [pc, #172]	; (8002fdc <GPIO_Init+0x15c>)
 8002f30:	2204      	movs	r2, #4
 8002f32:	601a      	str	r2, [r3, #0]
	 gpio.Mode =GPIO_MODE_AF_PP;
 8002f34:	4b29      	ldr	r3, [pc, #164]	; (8002fdc <GPIO_Init+0x15c>)
 8002f36:	2202      	movs	r2, #2
 8002f38:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_PULLUP;
 8002f3a:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <GPIO_Init+0x15c>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8002f40:	4b26      	ldr	r3, [pc, #152]	; (8002fdc <GPIO_Init+0x15c>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
	 gpio.Alternate =  GPIO_AF7_USART2; //TX
 8002f46:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <GPIO_Init+0x15c>)
 8002f48:	2207      	movs	r2, #7
 8002f4a:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOA,&gpio);
 8002f4c:	4923      	ldr	r1, [pc, #140]	; (8002fdc <GPIO_Init+0x15c>)
 8002f4e:	4824      	ldr	r0, [pc, #144]	; (8002fe0 <GPIO_Init+0x160>)
 8002f50:	f7fd fce8 	bl	8000924 <HAL_GPIO_Init>

	 gpio.Pin = GPIO_PIN_3; //RX
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <GPIO_Init+0x15c>)
 8002f56:	2208      	movs	r2, #8
 8002f58:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_OD;
 8002f5a:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <GPIO_Init+0x15c>)
 8002f5c:	2212      	movs	r2, #18
 8002f5e:	605a      	str	r2, [r3, #4]
	 HAL_GPIO_Init(GPIOA,&gpio);
 8002f60:	491e      	ldr	r1, [pc, #120]	; (8002fdc <GPIO_Init+0x15c>)
 8002f62:	481f      	ldr	r0, [pc, #124]	; (8002fe0 <GPIO_Init+0x160>)
 8002f64:	f7fd fcde 	bl	8000924 <HAL_GPIO_Init>

	 gpio.Pin = GPIO_PIN_8 |GPIO_PIN_9;
 8002f68:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <GPIO_Init+0x15c>)
 8002f6a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002f6e:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_OD;
 8002f70:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <GPIO_Init+0x15c>)
 8002f72:	2212      	movs	r2, #18
 8002f74:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_NOPULL;
 8002f76:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <GPIO_Init+0x15c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7c:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <GPIO_Init+0x15c>)
 8002f7e:	2202      	movs	r2, #2
 8002f80:	60da      	str	r2, [r3, #12]
	 gpio.Alternate = GPIO_AF4_I2C1;
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <GPIO_Init+0x15c>)
 8002f84:	2204      	movs	r2, #4
 8002f86:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOB, &gpio);
 8002f88:	4914      	ldr	r1, [pc, #80]	; (8002fdc <GPIO_Init+0x15c>)
 8002f8a:	4816      	ldr	r0, [pc, #88]	; (8002fe4 <GPIO_Init+0x164>)
 8002f8c:	f7fd fcca 	bl	8000924 <HAL_GPIO_Init>

	 	 //TIM2
	 gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8002f90:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <GPIO_Init+0x15c>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	605a      	str	r2, [r3, #4]
	 gpio.Pin = GPIO_PIN_5;
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <GPIO_Init+0x15c>)
 8002f98:	2220      	movs	r2, #32
 8002f9a:	601a      	str	r2, [r3, #0]
	 gpio.Pull = GPIO_NOPULL;
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <GPIO_Init+0x15c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <GPIO_Init+0x15c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	60da      	str	r2, [r3, #12]
	 HAL_GPIO_Init(GPIOA, &gpio);
 8002fa8:	490c      	ldr	r1, [pc, #48]	; (8002fdc <GPIO_Init+0x15c>)
 8002faa:	480d      	ldr	r0, [pc, #52]	; (8002fe0 <GPIO_Init+0x160>)
 8002fac:	f7fd fcba 	bl	8000924 <HAL_GPIO_Init>

	 	 //TIM4
	 GPIO_InitTypeDef gpio;
	 gpio.Mode = GPIO_MODE_AF_PP;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	623b      	str	r3, [r7, #32]
	 gpio.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002fb4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002fb8:	61fb      	str	r3, [r7, #28]
	 gpio.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
	 HAL_GPIO_Init(GPIOB, &gpio);
 8002fc2:	f107 031c 	add.w	r3, r7, #28
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4806      	ldr	r0, [pc, #24]	; (8002fe4 <GPIO_Init+0x164>)
 8002fca:	f7fd fcab 	bl	8000924 <HAL_GPIO_Init>

}
 8002fce:	bf00      	nop
 8002fd0:	3730      	adds	r7, #48	; 0x30
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	20000634 	.word	0x20000634
 8002fe0:	40020000 	.word	0x40020000
 8002fe4:	40020400 	.word	0x40020400

08002fe8 <UART2_Init>:

void UART2_Init()
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fec:	2026      	movs	r0, #38	; 0x26
 8002fee:	f7fd fc54 	bl	800089a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	210f      	movs	r1, #15
 8002ff6:	2026      	movs	r0, #38	; 0x26
 8002ff8:	f7fd fc33 	bl	8000862 <HAL_NVIC_SetPriority>

	uart2.Instance = USART2;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <UART2_Init+0x54>)
 8002ffe:	4a10      	ldr	r2, [pc, #64]	; (8003040 <UART2_Init+0x58>)
 8003000:	601a      	str	r2, [r3, #0]
	uart2.Init.BaudRate = 115200;
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <UART2_Init+0x54>)
 8003004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003008:	605a      	str	r2, [r3, #4]
	uart2.Init.WordLength = UART_WORDLENGTH_8B;
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <UART2_Init+0x54>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
	uart2.Init.StopBits = UART_STOPBITS_1;
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <UART2_Init+0x54>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
	uart2.Init.Parity = UART_PARITY_NONE;
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <UART2_Init+0x54>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
	uart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <UART2_Init+0x54>)
 800301e:	2200      	movs	r2, #0
 8003020:	619a      	str	r2, [r3, #24]
	uart2.Init.Mode = UART_MODE_TX_RX;
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <UART2_Init+0x54>)
 8003024:	220c      	movs	r2, #12
 8003026:	615a      	str	r2, [r3, #20]
	 if ( HAL_UART_Init(&uart2) != HAL_OK )
 8003028:	4804      	ldr	r0, [pc, #16]	; (800303c <UART2_Init+0x54>)
 800302a:	f7ff fbe0 	bl	80027ee <HAL_UART_Init>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <UART2_Init+0x50>
	 {
	 	Error_handler();
 8003034:	f7ff ff20 	bl	8002e78 <Error_handler>
	 }
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200005b4 	.word	0x200005b4
 8003040:	40004400 	.word	0x40004400

08003044 <TIM2_IRQHandler>:
	HAL_I2C_Init(&hi2c1);
}


void TIM2_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8003048:	4802      	ldr	r0, [pc, #8]	; (8003054 <TIM2_IRQHandler+0x10>)
 800304a:	f7fe ff51 	bl	8001ef0 <HAL_TIM_IRQHandler>
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200005f4 	.word	0x200005f4

08003058 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET)
 8003060:	2120      	movs	r1, #32
 8003062:	480a      	ldr	r0, [pc, #40]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003064:	f7fd fdf8 	bl	8000c58 <HAL_GPIO_ReadPin>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <HAL_TIM_PeriodElapsedCallback+0x22>
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800306e:	2201      	movs	r2, #1
 8003070:	2120      	movs	r1, #32
 8003072:	4806      	ldr	r0, [pc, #24]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003074:	f7fd fe08 	bl	8000c88 <HAL_GPIO_WritePin>
 else
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}
 8003078:	e004      	b.n	8003084 <HAL_TIM_PeriodElapsedCallback+0x2c>
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800307a:	2200      	movs	r2, #0
 800307c:	2120      	movs	r1, #32
 800307e:	4803      	ldr	r0, [pc, #12]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003080:	f7fd fe02 	bl	8000c88 <HAL_GPIO_WritePin>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40020000 	.word	0x40020000

08003090 <TIM2_Init>:

void TIM2_Init()
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0

	htim2.Instance = TIM2;
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <TIM2_Init+0x4c>)
 8003096:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800309a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8000-1;
 800309c:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <TIM2_Init+0x4c>)
 800309e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80030a2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a4:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <TIM2_Init+0x4c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <TIM2_Init+0x4c>)
 80030ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030b0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <TIM2_Init+0x4c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0;
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <TIM2_Init+0x4c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	615a      	str	r2, [r3, #20]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <TIM2_Init+0x4c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 80030c4:	4805      	ldr	r0, [pc, #20]	; (80030dc <TIM2_Init+0x4c>)
 80030c6:	f7fe fe47 	bl	8001d58 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 80030ca:	4804      	ldr	r0, [pc, #16]	; (80030dc <TIM2_Init+0x4c>)
 80030cc:	f7fe fe79 	bl	8001dc2 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030d0:	201c      	movs	r0, #28
 80030d2:	f7fd fbe2 	bl	800089a <HAL_NVIC_EnableIRQ>
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200005f4 	.word	0x200005f4

080030e0 <TIM4_Init>:

void TIM4_Init()
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
	 htim4.Instance = TIM4;
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <TIM4_Init+0x7c>)
 80030e6:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <TIM4_Init+0x80>)
 80030e8:	601a      	str	r2, [r3, #0]
	 htim4.Init.Period = 1000 - 1;
 80030ea:	4b1c      	ldr	r3, [pc, #112]	; (800315c <TIM4_Init+0x7c>)
 80030ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030f0:	60da      	str	r2, [r3, #12]
	 htim4.Init.Prescaler = 8000 - 1;
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <TIM4_Init+0x7c>)
 80030f4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80030f8:	605a      	str	r2, [r3, #4]
	 htim4.Init.ClockDivision = 0;
 80030fa:	4b18      	ldr	r3, [pc, #96]	; (800315c <TIM4_Init+0x7c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	611a      	str	r2, [r3, #16]
	 htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003100:	4b16      	ldr	r3, [pc, #88]	; (800315c <TIM4_Init+0x7c>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
	 htim4.Init.RepetitionCounter = 0;
 8003106:	4b15      	ldr	r3, [pc, #84]	; (800315c <TIM4_Init+0x7c>)
 8003108:	2200      	movs	r2, #0
 800310a:	615a      	str	r2, [r3, #20]
	 htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <TIM4_Init+0x7c>)
 800310e:	2280      	movs	r2, #128	; 0x80
 8003110:	619a      	str	r2, [r3, #24]
	 HAL_TIM_PWM_Init(&htim4);
 8003112:	4812      	ldr	r0, [pc, #72]	; (800315c <TIM4_Init+0x7c>)
 8003114:	f7fe fe79 	bl	8001e0a <HAL_TIM_PWM_Init>

	 oc.OCMode = TIM_OCMODE_PWM1;
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <TIM4_Init+0x84>)
 800311a:	2260      	movs	r2, #96	; 0x60
 800311c:	601a      	str	r2, [r3, #0]
	 oc.Pulse = 100;
 800311e:	4b11      	ldr	r3, [pc, #68]	; (8003164 <TIM4_Init+0x84>)
 8003120:	2264      	movs	r2, #100	; 0x64
 8003122:	605a      	str	r2, [r3, #4]
	 oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <TIM4_Init+0x84>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
	 oc.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800312a:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <TIM4_Init+0x84>)
 800312c:	2208      	movs	r2, #8
 800312e:	60da      	str	r2, [r3, #12]
	 oc.OCFastMode = TIM_OCFAST_ENABLE;
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <TIM4_Init+0x84>)
 8003132:	2204      	movs	r2, #4
 8003134:	611a      	str	r2, [r3, #16]
	 oc.OCIdleState = TIM_OCIDLESTATE_SET;
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <TIM4_Init+0x84>)
 8003138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800313c:	615a      	str	r2, [r3, #20]
	 oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <TIM4_Init+0x84>)
 8003140:	2200      	movs	r2, #0
 8003142:	619a      	str	r2, [r3, #24]
	 HAL_TIM_PWM_ConfigChannel(&htim4, &oc, TIM_CHANNEL_1);
 8003144:	2200      	movs	r2, #0
 8003146:	4907      	ldr	r1, [pc, #28]	; (8003164 <TIM4_Init+0x84>)
 8003148:	4804      	ldr	r0, [pc, #16]	; (800315c <TIM4_Init+0x7c>)
 800314a:	f7fe ffd9 	bl	8002100 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800314e:	2100      	movs	r1, #0
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <TIM4_Init+0x7c>)
 8003152:	f7fe fe8f 	bl	8001e74 <HAL_TIM_PWM_Start>
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000504 	.word	0x20000504
 8003160:	40000800 	.word	0x40000800
 8003164:	20000598 	.word	0x20000598

08003168 <main>:
*/

#include "main.h"

int main(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b09a      	sub	sp, #104	; 0x68
 800316c:	af00      	add	r7, sp, #0
	char msg[100];

	HAL_Init();
 800316e:	f7fd fa07 	bl	8000580 <HAL_Init>
	SystemConfigClk();
 8003172:	f000 f89f 	bl	80032b4 <SystemConfigClk>
	GPIO_Init();
 8003176:	f7ff fe83 	bl	8002e80 <GPIO_Init>
    UART2_Init();
 800317a:	f7ff ff35 	bl	8002fe8 <UART2_Init>
    TIM2_Init();
 800317e:	f7ff ff87 	bl	8003090 <TIM2_Init>
    TIM4_Init();
 8003182:	f7ff ffad 	bl	80030e0 <TIM4_Init>
    SSD1306_Init();
 8003186:	f000 f8f3 	bl	8003370 <SSD1306_Init>

    memset(msg,0,sizeof(msg));
 800318a:	1d3b      	adds	r3, r7, #4
 800318c:	2264      	movs	r2, #100	; 0x64
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fc4b 	bl	8003a2c <memset>
	sprintf(msg,"SYSCLK : %ldHz\r\n",HAL_RCC_GetSysClockFreq());
 8003196:	f7fe fcd3 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 800319a:	4602      	mov	r2, r0
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	493d      	ldr	r1, [pc, #244]	; (8003294 <main+0x12c>)
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fc4b 	bl	8003a3c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd f811 	bl	80001d0 <strlen>
 80031ae:	4603      	mov	r3, r0
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	1d39      	adds	r1, r7, #4
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	4837      	ldr	r0, [pc, #220]	; (8003298 <main+0x130>)
 80031ba:	f7ff fb6f 	bl	800289c <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	2264      	movs	r2, #100	; 0x64
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fc31 	bl	8003a2c <memset>
	sprintf(msg,"HCLK   : %ldHz\r\n",HAL_RCC_GetHCLKFreq());
 80031ca:	f7fe fd91 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 80031ce:	4602      	mov	r2, r0
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	4932      	ldr	r1, [pc, #200]	; (800329c <main+0x134>)
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fc31 	bl	8003a3c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80031da:	1d3b      	adds	r3, r7, #4
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fc fff7 	bl	80001d0 <strlen>
 80031e2:	4603      	mov	r3, r0
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	1d39      	adds	r1, r7, #4
 80031e8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ec:	482a      	ldr	r0, [pc, #168]	; (8003298 <main+0x130>)
 80031ee:	f7ff fb55 	bl	800289c <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	2264      	movs	r2, #100	; 0x64
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fc17 	bl	8003a2c <memset>
	sprintf(msg,"PCLK1  : %ldHz\r\n",HAL_RCC_GetPCLK1Freq());
 80031fe:	f7fe fd83 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8003202:	4602      	mov	r2, r0
 8003204:	1d3b      	adds	r3, r7, #4
 8003206:	4926      	ldr	r1, [pc, #152]	; (80032a0 <main+0x138>)
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fc17 	bl	8003a3c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800320e:	1d3b      	adds	r3, r7, #4
 8003210:	4618      	mov	r0, r3
 8003212:	f7fc ffdd 	bl	80001d0 <strlen>
 8003216:	4603      	mov	r3, r0
 8003218:	b29a      	uxth	r2, r3
 800321a:	1d39      	adds	r1, r7, #4
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
 8003220:	481d      	ldr	r0, [pc, #116]	; (8003298 <main+0x130>)
 8003222:	f7ff fb3b 	bl	800289c <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 8003226:	1d3b      	adds	r3, r7, #4
 8003228:	2264      	movs	r2, #100	; 0x64
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fbfd 	bl	8003a2c <memset>
	sprintf(msg,"PCLK2  : %ldHz\r\n\n",HAL_RCC_GetPCLK2Freq());
 8003232:	f7fe fd7d 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8003236:	4602      	mov	r2, r0
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	491a      	ldr	r1, [pc, #104]	; (80032a4 <main+0x13c>)
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fbfd 	bl	8003a3c <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	4618      	mov	r0, r3
 8003246:	f7fc ffc3 	bl	80001d0 <strlen>
 800324a:	4603      	mov	r3, r0
 800324c:	b29a      	uxth	r2, r3
 800324e:	1d39      	adds	r1, r7, #4
 8003250:	f04f 33ff 	mov.w	r3, #4294967295
 8003254:	4810      	ldr	r0, [pc, #64]	; (8003298 <main+0x130>)
 8003256:	f7ff fb21 	bl	800289c <HAL_UART_Transmit>

	while(1){

		SSD1306_GotoXY(10,27);
 800325a:	211b      	movs	r1, #27
 800325c:	200a      	movs	r0, #10
 800325e:	f000 f9f1 	bl	8003644 <SSD1306_GotoXY>
		SSD1306_Puts("Hello!", &Font_7x10, 1);
 8003262:	2201      	movs	r2, #1
 8003264:	4910      	ldr	r1, [pc, #64]	; (80032a8 <main+0x140>)
 8003266:	4811      	ldr	r0, [pc, #68]	; (80032ac <main+0x144>)
 8003268:	f000 fa82 	bl	8003770 <SSD1306_Puts>
		SSD1306_GotoXY(10,52);
 800326c:	2134      	movs	r1, #52	; 0x34
 800326e:	200a      	movs	r0, #10
 8003270:	f000 f9e8 	bl	8003644 <SSD1306_GotoXY>
		SSD1306_Puts("Test.", &Font_7x10, 1);
 8003274:	2201      	movs	r2, #1
 8003276:	490c      	ldr	r1, [pc, #48]	; (80032a8 <main+0x140>)
 8003278:	480d      	ldr	r0, [pc, #52]	; (80032b0 <main+0x148>)
 800327a:	f000 fa79 	bl	8003770 <SSD1306_Puts>
		SSD1306_UpdateScreen(); //display
 800327e:	f000 f93b 	bl	80034f8 <SSD1306_UpdateScreen>
		SSD1306_Fill(0x01);
 8003282:	2001      	movs	r0, #1
 8003284:	f000 f966 	bl	8003554 <SSD1306_Fill>
		HAL_Delay(1000);
 8003288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800328c:	f7fd f9ec 	bl	8000668 <HAL_Delay>
		SSD1306_GotoXY(10,27);
 8003290:	e7e3      	b.n	800325a <main+0xf2>
 8003292:	bf00      	nop
 8003294:	08006a5c 	.word	0x08006a5c
 8003298:	200005b4 	.word	0x200005b4
 800329c:	08006a70 	.word	0x08006a70
 80032a0:	08006a84 	.word	0x08006a84
 80032a4:	08006a98 	.word	0x08006a98
 80032a8:	20000008 	.word	0x20000008
 80032ac:	08006aac 	.word	0x08006aac
 80032b0:	08006ab4 	.word	0x08006ab4

080032b4 <SystemConfigClk>:

	return 0;
}

void SystemConfigClk()
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
	memset(&osc_init,0,sizeof(osc_init));
 80032b8:	2230      	movs	r2, #48	; 0x30
 80032ba:	2100      	movs	r1, #0
 80032bc:	4828      	ldr	r0, [pc, #160]	; (8003360 <SystemConfigClk+0xac>)
 80032be:	f000 fbb5 	bl	8003a2c <memset>
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032c2:	4b27      	ldr	r3, [pc, #156]	; (8003360 <SystemConfigClk+0xac>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
    osc_init.HSEState = RCC_HSE_BYPASS;
 80032c8:	4b25      	ldr	r3, [pc, #148]	; (8003360 <SystemConfigClk+0xac>)
 80032ca:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80032ce:	605a      	str	r2, [r3, #4]

    //osc_init.HSEState = RCC_HSE_ON;
    if ( HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80032d0:	4823      	ldr	r0, [pc, #140]	; (8003360 <SystemConfigClk+0xac>)
 80032d2:	f7fe f911 	bl	80014f8 <HAL_RCC_OscConfig>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <SystemConfigClk+0x2c>
    {
    	Error_handler();
 80032dc:	f7ff fdcc 	bl	8002e78 <Error_handler>
    }

    osc_init.PLL.PLLState = RCC_PLL_ON;
 80032e0:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <SystemConfigClk+0xac>)
 80032e2:	2202      	movs	r2, #2
 80032e4:	619a      	str	r2, [r3, #24]
    osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032e6:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <SystemConfigClk+0xac>)
 80032e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80032ec:	61da      	str	r2, [r3, #28]

    // SYS_CLOCK PLL
	osc_init.PLL.PLLM = 8;
 80032ee:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <SystemConfigClk+0xac>)
 80032f0:	2208      	movs	r2, #8
 80032f2:	621a      	str	r2, [r3, #32]
	osc_init.PLL.PLLN = 50;
 80032f4:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <SystemConfigClk+0xac>)
 80032f6:	2232      	movs	r2, #50	; 0x32
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24
	osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80032fa:	4b19      	ldr	r3, [pc, #100]	; (8003360 <SystemConfigClk+0xac>)
 80032fc:	2202      	movs	r2, #2
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28
	osc_init.PLL.PLLQ = 2;
 8003300:	4b17      	ldr	r3, [pc, #92]	; (8003360 <SystemConfigClk+0xac>)
 8003302:	2202      	movs	r2, #2
 8003304:	62da      	str	r2, [r3, #44]	; 0x2c

    clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8003306:	4b17      	ldr	r3, [pc, #92]	; (8003364 <SystemConfigClk+0xb0>)
 8003308:	220f      	movs	r2, #15
 800330a:	601a      	str	r2, [r3, #0]
    					RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800330c:	4b15      	ldr	r3, [pc, #84]	; (8003364 <SystemConfigClk+0xb0>)
 800330e:	2201      	movs	r2, #1
 8003310:	605a      	str	r2, [r3, #4]
    //clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  // NOT WORKING
    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <SystemConfigClk+0xb0>)
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	609a      	str	r2, [r3, #8]
    clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <SystemConfigClk+0xb0>)
 800331a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800331e:	60da      	str	r2, [r3, #12]
    clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8003320:	4b10      	ldr	r3, [pc, #64]	; (8003364 <SystemConfigClk+0xb0>)
 8003322:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003326:	611a      	str	r2, [r3, #16]

    if( HAL_RCC_ClockConfig(&clk_init, FLASH_ACR_LATENCY_0WS) != HAL_OK)
 8003328:	2100      	movs	r1, #0
 800332a:	480e      	ldr	r0, [pc, #56]	; (8003364 <SystemConfigClk+0xb0>)
 800332c:	f7fe fb26 	bl	800197c <HAL_RCC_ClockConfig>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <SystemConfigClk+0x86>
    {
    	Error_handler();
 8003336:	f7ff fd9f 	bl	8002e78 <Error_handler>
    }

    __HAL_RCC_HSI_DISABLE();
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <SystemConfigClk+0xb4>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

     HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003340:	f7fe fcd6 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b09      	ldr	r3, [pc, #36]	; (800336c <SystemConfigClk+0xb8>)
 8003348:	fba3 2302 	umull	r2, r3, r3, r2
 800334c:	099b      	lsrs	r3, r3, #6
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd fab1 	bl	80008b6 <HAL_SYSTICK_Config>

     HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003354:	2004      	movs	r0, #4
 8003356:	f7fd fabb 	bl	80008d0 <HAL_SYSTICK_CLKSourceConfig>

}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200000a4 	.word	0x200000a4
 8003364:	200000d4 	.word	0x200000d4
 8003368:	42470000 	.word	0x42470000
 800336c:	10624dd3 	.word	0x10624dd3

08003370 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003376:	f000 fa21 	bl	80037bc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800337a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800337e:	2201      	movs	r2, #1
 8003380:	2178      	movs	r1, #120	; 0x78
 8003382:	485b      	ldr	r0, [pc, #364]	; (80034f0 <SSD1306_Init+0x180>)
 8003384:	f7fd fd98 	bl	8000eb8 <HAL_I2C_IsDeviceReady>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800338e:	2300      	movs	r3, #0
 8003390:	e0a9      	b.n	80034e6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8003392:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003396:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003398:	e002      	b.n	80033a0 <SSD1306_Init+0x30>
		p--;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3b01      	subs	r3, #1
 800339e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f9      	bne.n	800339a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80033a6:	22ae      	movs	r2, #174	; 0xae
 80033a8:	2100      	movs	r1, #0
 80033aa:	2078      	movs	r0, #120	; 0x78
 80033ac:	f000 fa62 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80033b0:	2220      	movs	r2, #32
 80033b2:	2100      	movs	r1, #0
 80033b4:	2078      	movs	r0, #120	; 0x78
 80033b6:	f000 fa5d 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80033ba:	2210      	movs	r2, #16
 80033bc:	2100      	movs	r1, #0
 80033be:	2078      	movs	r0, #120	; 0x78
 80033c0:	f000 fa58 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80033c4:	22b0      	movs	r2, #176	; 0xb0
 80033c6:	2100      	movs	r1, #0
 80033c8:	2078      	movs	r0, #120	; 0x78
 80033ca:	f000 fa53 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80033ce:	22c8      	movs	r2, #200	; 0xc8
 80033d0:	2100      	movs	r1, #0
 80033d2:	2078      	movs	r0, #120	; 0x78
 80033d4:	f000 fa4e 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80033d8:	2200      	movs	r2, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	2078      	movs	r0, #120	; 0x78
 80033de:	f000 fa49 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80033e2:	2210      	movs	r2, #16
 80033e4:	2100      	movs	r1, #0
 80033e6:	2078      	movs	r0, #120	; 0x78
 80033e8:	f000 fa44 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80033ec:	2240      	movs	r2, #64	; 0x40
 80033ee:	2100      	movs	r1, #0
 80033f0:	2078      	movs	r0, #120	; 0x78
 80033f2:	f000 fa3f 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80033f6:	2281      	movs	r2, #129	; 0x81
 80033f8:	2100      	movs	r1, #0
 80033fa:	2078      	movs	r0, #120	; 0x78
 80033fc:	f000 fa3a 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003400:	22ff      	movs	r2, #255	; 0xff
 8003402:	2100      	movs	r1, #0
 8003404:	2078      	movs	r0, #120	; 0x78
 8003406:	f000 fa35 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800340a:	22a1      	movs	r2, #161	; 0xa1
 800340c:	2100      	movs	r1, #0
 800340e:	2078      	movs	r0, #120	; 0x78
 8003410:	f000 fa30 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003414:	22a6      	movs	r2, #166	; 0xa6
 8003416:	2100      	movs	r1, #0
 8003418:	2078      	movs	r0, #120	; 0x78
 800341a:	f000 fa2b 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800341e:	22a8      	movs	r2, #168	; 0xa8
 8003420:	2100      	movs	r1, #0
 8003422:	2078      	movs	r0, #120	; 0x78
 8003424:	f000 fa26 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003428:	223f      	movs	r2, #63	; 0x3f
 800342a:	2100      	movs	r1, #0
 800342c:	2078      	movs	r0, #120	; 0x78
 800342e:	f000 fa21 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003432:	22a4      	movs	r2, #164	; 0xa4
 8003434:	2100      	movs	r1, #0
 8003436:	2078      	movs	r0, #120	; 0x78
 8003438:	f000 fa1c 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800343c:	22d3      	movs	r2, #211	; 0xd3
 800343e:	2100      	movs	r1, #0
 8003440:	2078      	movs	r0, #120	; 0x78
 8003442:	f000 fa17 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003446:	2200      	movs	r2, #0
 8003448:	2100      	movs	r1, #0
 800344a:	2078      	movs	r0, #120	; 0x78
 800344c:	f000 fa12 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003450:	22d5      	movs	r2, #213	; 0xd5
 8003452:	2100      	movs	r1, #0
 8003454:	2078      	movs	r0, #120	; 0x78
 8003456:	f000 fa0d 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800345a:	22f0      	movs	r2, #240	; 0xf0
 800345c:	2100      	movs	r1, #0
 800345e:	2078      	movs	r0, #120	; 0x78
 8003460:	f000 fa08 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003464:	22d9      	movs	r2, #217	; 0xd9
 8003466:	2100      	movs	r1, #0
 8003468:	2078      	movs	r0, #120	; 0x78
 800346a:	f000 fa03 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800346e:	2222      	movs	r2, #34	; 0x22
 8003470:	2100      	movs	r1, #0
 8003472:	2078      	movs	r0, #120	; 0x78
 8003474:	f000 f9fe 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003478:	22da      	movs	r2, #218	; 0xda
 800347a:	2100      	movs	r1, #0
 800347c:	2078      	movs	r0, #120	; 0x78
 800347e:	f000 f9f9 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003482:	2212      	movs	r2, #18
 8003484:	2100      	movs	r1, #0
 8003486:	2078      	movs	r0, #120	; 0x78
 8003488:	f000 f9f4 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800348c:	22db      	movs	r2, #219	; 0xdb
 800348e:	2100      	movs	r1, #0
 8003490:	2078      	movs	r0, #120	; 0x78
 8003492:	f000 f9ef 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003496:	2220      	movs	r2, #32
 8003498:	2100      	movs	r1, #0
 800349a:	2078      	movs	r0, #120	; 0x78
 800349c:	f000 f9ea 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80034a0:	228d      	movs	r2, #141	; 0x8d
 80034a2:	2100      	movs	r1, #0
 80034a4:	2078      	movs	r0, #120	; 0x78
 80034a6:	f000 f9e5 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80034aa:	2214      	movs	r2, #20
 80034ac:	2100      	movs	r1, #0
 80034ae:	2078      	movs	r0, #120	; 0x78
 80034b0:	f000 f9e0 	bl	8003874 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80034b4:	22af      	movs	r2, #175	; 0xaf
 80034b6:	2100      	movs	r1, #0
 80034b8:	2078      	movs	r0, #120	; 0x78
 80034ba:	f000 f9db 	bl	8003874 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80034be:	222e      	movs	r2, #46	; 0x2e
 80034c0:	2100      	movs	r1, #0
 80034c2:	2078      	movs	r0, #120	; 0x78
 80034c4:	f000 f9d6 	bl	8003874 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f000 f843 	bl	8003554 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80034ce:	f000 f813 	bl	80034f8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <SSD1306_Init+0x184>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <SSD1306_Init+0x184>)
 80034da:	2200      	movs	r2, #0
 80034dc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <SSD1306_Init+0x184>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80034e4:	2301      	movs	r3, #1
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000544 	.word	0x20000544
 80034f4:	200004e8 	.word	0x200004e8

080034f8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80034fe:	2300      	movs	r3, #0
 8003500:	71fb      	strb	r3, [r7, #7]
 8003502:	e01d      	b.n	8003540 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	3b50      	subs	r3, #80	; 0x50
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	2100      	movs	r1, #0
 800350e:	2078      	movs	r0, #120	; 0x78
 8003510:	f000 f9b0 	bl	8003874 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003514:	2200      	movs	r2, #0
 8003516:	2100      	movs	r1, #0
 8003518:	2078      	movs	r0, #120	; 0x78
 800351a:	f000 f9ab 	bl	8003874 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800351e:	2210      	movs	r2, #16
 8003520:	2100      	movs	r1, #0
 8003522:	2078      	movs	r0, #120	; 0x78
 8003524:	f000 f9a6 	bl	8003874 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	01db      	lsls	r3, r3, #7
 800352c:	4a08      	ldr	r2, [pc, #32]	; (8003550 <SSD1306_UpdateScreen+0x58>)
 800352e:	441a      	add	r2, r3
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	2140      	movs	r1, #64	; 0x40
 8003534:	2078      	movs	r0, #120	; 0x78
 8003536:	f000 f955 	bl	80037e4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	3301      	adds	r3, #1
 800353e:	71fb      	strb	r3, [r7, #7]
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	2b07      	cmp	r3, #7
 8003544:	d9de      	bls.n	8003504 <SSD1306_UpdateScreen+0xc>
	}
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200000e8 	.word	0x200000e8

08003554 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <SSD1306_Fill+0x14>
 8003564:	2300      	movs	r3, #0
 8003566:	e000      	b.n	800356a <SSD1306_Fill+0x16>
 8003568:	23ff      	movs	r3, #255	; 0xff
 800356a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800356e:	4619      	mov	r1, r3
 8003570:	4803      	ldr	r0, [pc, #12]	; (8003580 <SSD1306_Fill+0x2c>)
 8003572:	f000 fa5b 	bl	8003a2c <memset>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200000e8 	.word	0x200000e8

08003584 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	80fb      	strh	r3, [r7, #6]
 800358e:	460b      	mov	r3, r1
 8003590:	80bb      	strh	r3, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	70fb      	strb	r3, [r7, #3]
	if (
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	2b7f      	cmp	r3, #127	; 0x7f
 800359a:	d848      	bhi.n	800362e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800359c:	88bb      	ldrh	r3, [r7, #4]
 800359e:	2b3f      	cmp	r3, #63	; 0x3f
 80035a0:	d845      	bhi.n	800362e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <SSD1306_DrawPixel+0xb8>)
 80035a4:	791b      	ldrb	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d006      	beq.n	80035b8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d11a      	bne.n	80035f4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80035be:	88fa      	ldrh	r2, [r7, #6]
 80035c0:	88bb      	ldrh	r3, [r7, #4]
 80035c2:	08db      	lsrs	r3, r3, #3
 80035c4:	b298      	uxth	r0, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	01db      	lsls	r3, r3, #7
 80035ca:	4413      	add	r3, r2
 80035cc:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <SSD1306_DrawPixel+0xbc>)
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	b25a      	sxtb	r2, r3
 80035d2:	88bb      	ldrh	r3, [r7, #4]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	b25b      	sxtb	r3, r3
 80035e0:	4313      	orrs	r3, r2
 80035e2:	b259      	sxtb	r1, r3
 80035e4:	88fa      	ldrh	r2, [r7, #6]
 80035e6:	4603      	mov	r3, r0
 80035e8:	01db      	lsls	r3, r3, #7
 80035ea:	4413      	add	r3, r2
 80035ec:	b2c9      	uxtb	r1, r1
 80035ee:	4a14      	ldr	r2, [pc, #80]	; (8003640 <SSD1306_DrawPixel+0xbc>)
 80035f0:	54d1      	strb	r1, [r2, r3]
 80035f2:	e01d      	b.n	8003630 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	88bb      	ldrh	r3, [r7, #4]
 80035f8:	08db      	lsrs	r3, r3, #3
 80035fa:	b298      	uxth	r0, r3
 80035fc:	4603      	mov	r3, r0
 80035fe:	01db      	lsls	r3, r3, #7
 8003600:	4413      	add	r3, r2
 8003602:	4a0f      	ldr	r2, [pc, #60]	; (8003640 <SSD1306_DrawPixel+0xbc>)
 8003604:	5cd3      	ldrb	r3, [r2, r3]
 8003606:	b25a      	sxtb	r2, r3
 8003608:	88bb      	ldrh	r3, [r7, #4]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	2101      	movs	r1, #1
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	b25b      	sxtb	r3, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	b25b      	sxtb	r3, r3
 800361a:	4013      	ands	r3, r2
 800361c:	b259      	sxtb	r1, r3
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	4603      	mov	r3, r0
 8003622:	01db      	lsls	r3, r3, #7
 8003624:	4413      	add	r3, r2
 8003626:	b2c9      	uxtb	r1, r1
 8003628:	4a05      	ldr	r2, [pc, #20]	; (8003640 <SSD1306_DrawPixel+0xbc>)
 800362a:	54d1      	strb	r1, [r2, r3]
 800362c:	e000      	b.n	8003630 <SSD1306_DrawPixel+0xac>
		return;
 800362e:	bf00      	nop
	}
}
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	200004e8 	.word	0x200004e8
 8003640:	200000e8 	.word	0x200000e8

08003644 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	460a      	mov	r2, r1
 800364e:	80fb      	strh	r3, [r7, #6]
 8003650:	4613      	mov	r3, r2
 8003652:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003654:	4a05      	ldr	r2, [pc, #20]	; (800366c <SSD1306_GotoXY+0x28>)
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800365a:	4a04      	ldr	r2, [pc, #16]	; (800366c <SSD1306_GotoXY+0x28>)
 800365c:	88bb      	ldrh	r3, [r7, #4]
 800365e:	8053      	strh	r3, [r2, #2]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	200004e8 	.word	0x200004e8

08003670 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	71fb      	strb	r3, [r7, #7]
 800367c:	4613      	mov	r3, r2
 800367e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003680:	4b3a      	ldr	r3, [pc, #232]	; (800376c <SSD1306_Putc+0xfc>)
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	4413      	add	r3, r2
	if (
 800368c:	2b7f      	cmp	r3, #127	; 0x7f
 800368e:	dc07      	bgt.n	80036a0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003690:	4b36      	ldr	r3, [pc, #216]	; (800376c <SSD1306_Putc+0xfc>)
 8003692:	885b      	ldrh	r3, [r3, #2]
 8003694:	461a      	mov	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	785b      	ldrb	r3, [r3, #1]
 800369a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800369c:	2b3f      	cmp	r3, #63	; 0x3f
 800369e:	dd01      	ble.n	80036a4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e05e      	b.n	8003762 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	e04b      	b.n	8003742 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	3b20      	subs	r3, #32
 80036b2:	6839      	ldr	r1, [r7, #0]
 80036b4:	7849      	ldrb	r1, [r1, #1]
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4619      	mov	r1, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	440b      	add	r3, r1
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	e030      	b.n	8003730 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d010      	beq.n	8003700 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80036de:	4b23      	ldr	r3, [pc, #140]	; (800376c <SSD1306_Putc+0xfc>)
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	b298      	uxth	r0, r3
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <SSD1306_Putc+0xfc>)
 80036ec:	885a      	ldrh	r2, [r3, #2]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	79ba      	ldrb	r2, [r7, #6]
 80036f8:	4619      	mov	r1, r3
 80036fa:	f7ff ff43 	bl	8003584 <SSD1306_DrawPixel>
 80036fe:	e014      	b.n	800372a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003700:	4b1a      	ldr	r3, [pc, #104]	; (800376c <SSD1306_Putc+0xfc>)
 8003702:	881a      	ldrh	r2, [r3, #0]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	b29b      	uxth	r3, r3
 8003708:	4413      	add	r3, r2
 800370a:	b298      	uxth	r0, r3
 800370c:	4b17      	ldr	r3, [pc, #92]	; (800376c <SSD1306_Putc+0xfc>)
 800370e:	885a      	ldrh	r2, [r3, #2]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	b29b      	uxth	r3, r3
 8003714:	4413      	add	r3, r2
 8003716:	b299      	uxth	r1, r3
 8003718:	79bb      	ldrb	r3, [r7, #6]
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	f7ff ff2d 	bl	8003584 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	3301      	adds	r3, #1
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4293      	cmp	r3, r2
 800373a:	d3c8      	bcc.n	80036ce <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3301      	adds	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	785b      	ldrb	r3, [r3, #1]
 8003746:	461a      	mov	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	4293      	cmp	r3, r2
 800374c:	d3ad      	bcc.n	80036aa <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <SSD1306_Putc+0xfc>)
 8003750:	881a      	ldrh	r2, [r3, #0]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	4413      	add	r3, r2
 800375a:	b29a      	uxth	r2, r3
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <SSD1306_Putc+0xfc>)
 800375e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8003760:	79fb      	ldrb	r3, [r7, #7]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	200004e8 	.word	0x200004e8

08003770 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	4613      	mov	r3, r2
 800377c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800377e:	e012      	b.n	80037a6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	79fa      	ldrb	r2, [r7, #7]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff ff71 	bl	8003670 <SSD1306_Putc>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d002      	beq.n	80037a0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	e008      	b.n	80037b2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	3301      	adds	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e8      	bne.n	8003780 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	781b      	ldrb	r3, [r3, #0]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <ssd1306_I2C_Init+0x24>)
 80037c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80037c6:	e002      	b.n	80037ce <ssd1306_I2C_Init+0x12>
		p--;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f9      	bne.n	80037c8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	0003d090 	.word	0x0003d090

080037e4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b0c7      	sub	sp, #284	; 0x11c
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	4604      	mov	r4, r0
 80037ec:	4608      	mov	r0, r1
 80037ee:	4639      	mov	r1, r7
 80037f0:	600a      	str	r2, [r1, #0]
 80037f2:	4619      	mov	r1, r3
 80037f4:	1dfb      	adds	r3, r7, #7
 80037f6:	4622      	mov	r2, r4
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	1dbb      	adds	r3, r7, #6
 80037fc:	4602      	mov	r2, r0
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	1d3b      	adds	r3, r7, #4
 8003802:	460a      	mov	r2, r1
 8003804:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003806:	f107 030c 	add.w	r3, r7, #12
 800380a:	1dba      	adds	r2, r7, #6
 800380c:	7812      	ldrb	r2, [r2, #0]
 800380e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003810:	2300      	movs	r3, #0
 8003812:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003816:	e010      	b.n	800383a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8003818:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800381c:	463a      	mov	r2, r7
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	441a      	add	r2, r3
 8003822:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003826:	3301      	adds	r3, #1
 8003828:	7811      	ldrb	r1, [r2, #0]
 800382a:	f107 020c 	add.w	r2, r7, #12
 800382e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003830:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003834:	3301      	adds	r3, #1
 8003836:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800383a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800383e:	b29b      	uxth	r3, r3
 8003840:	1d3a      	adds	r2, r7, #4
 8003842:	8812      	ldrh	r2, [r2, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d8e7      	bhi.n	8003818 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003848:	1dfb      	adds	r3, r7, #7
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b299      	uxth	r1, r3
 800384e:	1d3b      	adds	r3, r7, #4
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	b298      	uxth	r0, r3
 8003856:	f107 020c 	add.w	r2, r7, #12
 800385a:	230a      	movs	r3, #10
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	4603      	mov	r3, r0
 8003860:	4803      	ldr	r0, [pc, #12]	; (8003870 <ssd1306_I2C_WriteMulti+0x8c>)
 8003862:	f7fd fa2b 	bl	8000cbc <HAL_I2C_Master_Transmit>
}
 8003866:	bf00      	nop
 8003868:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800386c:	46bd      	mov	sp, r7
 800386e:	bd90      	pop	{r4, r7, pc}
 8003870:	20000544 	.word	0x20000544

08003874 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af02      	add	r7, sp, #8
 800387a:	4603      	mov	r3, r0
 800387c:	71fb      	strb	r3, [r7, #7]
 800387e:	460b      	mov	r3, r1
 8003880:	71bb      	strb	r3, [r7, #6]
 8003882:	4613      	mov	r3, r2
 8003884:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003886:	79bb      	ldrb	r3, [r7, #6]
 8003888:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800388a:	797b      	ldrb	r3, [r7, #5]
 800388c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	b299      	uxth	r1, r3
 8003892:	f107 020c 	add.w	r2, r7, #12
 8003896:	230a      	movs	r3, #10
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	2302      	movs	r3, #2
 800389c:	4803      	ldr	r0, [pc, #12]	; (80038ac <ssd1306_I2C_Write+0x38>)
 800389e:	f7fd fa0d 	bl	8000cbc <HAL_I2C_Master_Transmit>
}
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000544 	.word	0x20000544

080038b0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80038b4:	f7fc feb8 	bl	8000628 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80038b8:	f7fd f826 	bl	8000908 <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 80038bc:	bf00      	nop
 80038be:	bd80      	pop	{r7, pc}

080038c0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <_sbrk+0x50>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <_sbrk+0x16>
		heap_end = &end;
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <_sbrk+0x50>)
 80038d2:	4a10      	ldr	r2, [pc, #64]	; (8003914 <_sbrk+0x54>)
 80038d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80038d6:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <_sbrk+0x50>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <_sbrk+0x50>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	466a      	mov	r2, sp
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d907      	bls.n	80038fa <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80038ea:	f000 f875 	bl	80039d8 <__errno>
 80038ee:	4602      	mov	r2, r0
 80038f0:	230c      	movs	r3, #12
 80038f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295
 80038f8:	e006      	b.n	8003908 <_sbrk+0x48>
	}

	heap_end += incr;
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <_sbrk+0x50>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	4a03      	ldr	r2, [pc, #12]	; (8003910 <_sbrk+0x50>)
 8003904:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003906:	68fb      	ldr	r3, [r7, #12]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200004f4 	.word	0x200004f4
 8003914:	20000650 	.word	0x20000650

08003918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800391c:	4b16      	ldr	r3, [pc, #88]	; (8003978 <SystemInit+0x60>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	4a15      	ldr	r2, [pc, #84]	; (8003978 <SystemInit+0x60>)
 8003924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800392c:	4b13      	ldr	r3, [pc, #76]	; (800397c <SystemInit+0x64>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a12      	ldr	r2, [pc, #72]	; (800397c <SystemInit+0x64>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003938:	4b10      	ldr	r3, [pc, #64]	; (800397c <SystemInit+0x64>)
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800393e:	4b0f      	ldr	r3, [pc, #60]	; (800397c <SystemInit+0x64>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a0e      	ldr	r2, [pc, #56]	; (800397c <SystemInit+0x64>)
 8003944:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <SystemInit+0x64>)
 8003950:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <SystemInit+0x68>)
 8003952:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <SystemInit+0x64>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a08      	ldr	r2, [pc, #32]	; (800397c <SystemInit+0x64>)
 800395a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <SystemInit+0x64>)
 8003962:	2200      	movs	r2, #0
 8003964:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003966:	4b04      	ldr	r3, [pc, #16]	; (8003978 <SystemInit+0x60>)
 8003968:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800396c:	609a      	str	r2, [r3, #8]
#endif
}
 800396e:	bf00      	nop
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000ed00 	.word	0xe000ed00
 800397c:	40023800 	.word	0x40023800
 8003980:	24003010 	.word	0x24003010

08003984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003988:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800398a:	e003      	b.n	8003994 <LoopCopyDataInit>

0800398c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800398e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003990:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003992:	3104      	adds	r1, #4

08003994 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003994:	480b      	ldr	r0, [pc, #44]	; (80039c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003996:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003998:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800399a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800399c:	d3f6      	bcc.n	800398c <CopyDataInit>
  ldr  r2, =_sbss
 800399e:	4a0b      	ldr	r2, [pc, #44]	; (80039cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80039a0:	e002      	b.n	80039a8 <LoopFillZerobss>

080039a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80039a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80039a4:	f842 3b04 	str.w	r3, [r2], #4

080039a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80039aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80039ac:	d3f9      	bcc.n	80039a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039ae:	f7ff ffb3 	bl	8003918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039b2:	f000 f817 	bl	80039e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039b6:	f7ff fbd7 	bl	8003168 <main>
  bx  lr    
 80039ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80039bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80039c0:	08006b30 	.word	0x08006b30
  ldr  r0, =_sdata
 80039c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80039c8:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80039cc:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80039d0:	2000064c 	.word	0x2000064c

080039d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039d4:	e7fe      	b.n	80039d4 <ADC_IRQHandler>
	...

080039d8 <__errno>:
 80039d8:	4b01      	ldr	r3, [pc, #4]	; (80039e0 <__errno+0x8>)
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20000024 	.word	0x20000024

080039e4 <__libc_init_array>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	4e0d      	ldr	r6, [pc, #52]	; (8003a1c <__libc_init_array+0x38>)
 80039e8:	4c0d      	ldr	r4, [pc, #52]	; (8003a20 <__libc_init_array+0x3c>)
 80039ea:	1ba4      	subs	r4, r4, r6
 80039ec:	10a4      	asrs	r4, r4, #2
 80039ee:	2500      	movs	r5, #0
 80039f0:	42a5      	cmp	r5, r4
 80039f2:	d109      	bne.n	8003a08 <__libc_init_array+0x24>
 80039f4:	4e0b      	ldr	r6, [pc, #44]	; (8003a24 <__libc_init_array+0x40>)
 80039f6:	4c0c      	ldr	r4, [pc, #48]	; (8003a28 <__libc_init_array+0x44>)
 80039f8:	f003 f886 	bl	8006b08 <_init>
 80039fc:	1ba4      	subs	r4, r4, r6
 80039fe:	10a4      	asrs	r4, r4, #2
 8003a00:	2500      	movs	r5, #0
 8003a02:	42a5      	cmp	r5, r4
 8003a04:	d105      	bne.n	8003a12 <__libc_init_array+0x2e>
 8003a06:	bd70      	pop	{r4, r5, r6, pc}
 8003a08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a0c:	4798      	blx	r3
 8003a0e:	3501      	adds	r5, #1
 8003a10:	e7ee      	b.n	80039f0 <__libc_init_array+0xc>
 8003a12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a16:	4798      	blx	r3
 8003a18:	3501      	adds	r5, #1
 8003a1a:	e7f2      	b.n	8003a02 <__libc_init_array+0x1e>
 8003a1c:	08006b28 	.word	0x08006b28
 8003a20:	08006b28 	.word	0x08006b28
 8003a24:	08006b28 	.word	0x08006b28
 8003a28:	08006b2c 	.word	0x08006b2c

08003a2c <memset>:
 8003a2c:	4402      	add	r2, r0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d100      	bne.n	8003a36 <memset+0xa>
 8003a34:	4770      	bx	lr
 8003a36:	f803 1b01 	strb.w	r1, [r3], #1
 8003a3a:	e7f9      	b.n	8003a30 <memset+0x4>

08003a3c <siprintf>:
 8003a3c:	b40e      	push	{r1, r2, r3}
 8003a3e:	b500      	push	{lr}
 8003a40:	b09c      	sub	sp, #112	; 0x70
 8003a42:	ab1d      	add	r3, sp, #116	; 0x74
 8003a44:	9002      	str	r0, [sp, #8]
 8003a46:	9006      	str	r0, [sp, #24]
 8003a48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a4c:	4809      	ldr	r0, [pc, #36]	; (8003a74 <siprintf+0x38>)
 8003a4e:	9107      	str	r1, [sp, #28]
 8003a50:	9104      	str	r1, [sp, #16]
 8003a52:	4909      	ldr	r1, [pc, #36]	; (8003a78 <siprintf+0x3c>)
 8003a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a58:	9105      	str	r1, [sp, #20]
 8003a5a:	6800      	ldr	r0, [r0, #0]
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	a902      	add	r1, sp, #8
 8003a60:	f000 f866 	bl	8003b30 <_svfiprintf_r>
 8003a64:	9b02      	ldr	r3, [sp, #8]
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]
 8003a6a:	b01c      	add	sp, #112	; 0x70
 8003a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a70:	b003      	add	sp, #12
 8003a72:	4770      	bx	lr
 8003a74:	20000024 	.word	0x20000024
 8003a78:	ffff0208 	.word	0xffff0208

08003a7c <__ssputs_r>:
 8003a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a80:	688e      	ldr	r6, [r1, #8]
 8003a82:	429e      	cmp	r6, r3
 8003a84:	4682      	mov	sl, r0
 8003a86:	460c      	mov	r4, r1
 8003a88:	4690      	mov	r8, r2
 8003a8a:	4699      	mov	r9, r3
 8003a8c:	d837      	bhi.n	8003afe <__ssputs_r+0x82>
 8003a8e:	898a      	ldrh	r2, [r1, #12]
 8003a90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a94:	d031      	beq.n	8003afa <__ssputs_r+0x7e>
 8003a96:	6825      	ldr	r5, [r4, #0]
 8003a98:	6909      	ldr	r1, [r1, #16]
 8003a9a:	1a6f      	subs	r7, r5, r1
 8003a9c:	6965      	ldr	r5, [r4, #20]
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aa4:	fb95 f5f3 	sdiv	r5, r5, r3
 8003aa8:	f109 0301 	add.w	r3, r9, #1
 8003aac:	443b      	add	r3, r7
 8003aae:	429d      	cmp	r5, r3
 8003ab0:	bf38      	it	cc
 8003ab2:	461d      	movcc	r5, r3
 8003ab4:	0553      	lsls	r3, r2, #21
 8003ab6:	d530      	bpl.n	8003b1a <__ssputs_r+0x9e>
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f000 fb2b 	bl	8004114 <_malloc_r>
 8003abe:	4606      	mov	r6, r0
 8003ac0:	b950      	cbnz	r0, 8003ad8 <__ssputs_r+0x5c>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	f8ca 3000 	str.w	r3, [sl]
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ace:	81a3      	strh	r3, [r4, #12]
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad8:	463a      	mov	r2, r7
 8003ada:	6921      	ldr	r1, [r4, #16]
 8003adc:	f000 faa8 	bl	8004030 <memcpy>
 8003ae0:	89a3      	ldrh	r3, [r4, #12]
 8003ae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aea:	81a3      	strh	r3, [r4, #12]
 8003aec:	6126      	str	r6, [r4, #16]
 8003aee:	6165      	str	r5, [r4, #20]
 8003af0:	443e      	add	r6, r7
 8003af2:	1bed      	subs	r5, r5, r7
 8003af4:	6026      	str	r6, [r4, #0]
 8003af6:	60a5      	str	r5, [r4, #8]
 8003af8:	464e      	mov	r6, r9
 8003afa:	454e      	cmp	r6, r9
 8003afc:	d900      	bls.n	8003b00 <__ssputs_r+0x84>
 8003afe:	464e      	mov	r6, r9
 8003b00:	4632      	mov	r2, r6
 8003b02:	4641      	mov	r1, r8
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	f000 fa9e 	bl	8004046 <memmove>
 8003b0a:	68a3      	ldr	r3, [r4, #8]
 8003b0c:	1b9b      	subs	r3, r3, r6
 8003b0e:	60a3      	str	r3, [r4, #8]
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	441e      	add	r6, r3
 8003b14:	6026      	str	r6, [r4, #0]
 8003b16:	2000      	movs	r0, #0
 8003b18:	e7dc      	b.n	8003ad4 <__ssputs_r+0x58>
 8003b1a:	462a      	mov	r2, r5
 8003b1c:	f000 fb54 	bl	80041c8 <_realloc_r>
 8003b20:	4606      	mov	r6, r0
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d1e2      	bne.n	8003aec <__ssputs_r+0x70>
 8003b26:	6921      	ldr	r1, [r4, #16]
 8003b28:	4650      	mov	r0, sl
 8003b2a:	f000 faa5 	bl	8004078 <_free_r>
 8003b2e:	e7c8      	b.n	8003ac2 <__ssputs_r+0x46>

08003b30 <_svfiprintf_r>:
 8003b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b34:	461d      	mov	r5, r3
 8003b36:	898b      	ldrh	r3, [r1, #12]
 8003b38:	061f      	lsls	r7, r3, #24
 8003b3a:	b09d      	sub	sp, #116	; 0x74
 8003b3c:	4680      	mov	r8, r0
 8003b3e:	460c      	mov	r4, r1
 8003b40:	4616      	mov	r6, r2
 8003b42:	d50f      	bpl.n	8003b64 <_svfiprintf_r+0x34>
 8003b44:	690b      	ldr	r3, [r1, #16]
 8003b46:	b96b      	cbnz	r3, 8003b64 <_svfiprintf_r+0x34>
 8003b48:	2140      	movs	r1, #64	; 0x40
 8003b4a:	f000 fae3 	bl	8004114 <_malloc_r>
 8003b4e:	6020      	str	r0, [r4, #0]
 8003b50:	6120      	str	r0, [r4, #16]
 8003b52:	b928      	cbnz	r0, 8003b60 <_svfiprintf_r+0x30>
 8003b54:	230c      	movs	r3, #12
 8003b56:	f8c8 3000 	str.w	r3, [r8]
 8003b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5e:	e0c8      	b.n	8003cf2 <_svfiprintf_r+0x1c2>
 8003b60:	2340      	movs	r3, #64	; 0x40
 8003b62:	6163      	str	r3, [r4, #20]
 8003b64:	2300      	movs	r3, #0
 8003b66:	9309      	str	r3, [sp, #36]	; 0x24
 8003b68:	2320      	movs	r3, #32
 8003b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b6e:	2330      	movs	r3, #48	; 0x30
 8003b70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b74:	9503      	str	r5, [sp, #12]
 8003b76:	f04f 0b01 	mov.w	fp, #1
 8003b7a:	4637      	mov	r7, r6
 8003b7c:	463d      	mov	r5, r7
 8003b7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b82:	b10b      	cbz	r3, 8003b88 <_svfiprintf_r+0x58>
 8003b84:	2b25      	cmp	r3, #37	; 0x25
 8003b86:	d13e      	bne.n	8003c06 <_svfiprintf_r+0xd6>
 8003b88:	ebb7 0a06 	subs.w	sl, r7, r6
 8003b8c:	d00b      	beq.n	8003ba6 <_svfiprintf_r+0x76>
 8003b8e:	4653      	mov	r3, sl
 8003b90:	4632      	mov	r2, r6
 8003b92:	4621      	mov	r1, r4
 8003b94:	4640      	mov	r0, r8
 8003b96:	f7ff ff71 	bl	8003a7c <__ssputs_r>
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	f000 80a4 	beq.w	8003ce8 <_svfiprintf_r+0x1b8>
 8003ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ba2:	4453      	add	r3, sl
 8003ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ba6:	783b      	ldrb	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 809d 	beq.w	8003ce8 <_svfiprintf_r+0x1b8>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bb8:	9304      	str	r3, [sp, #16]
 8003bba:	9307      	str	r3, [sp, #28]
 8003bbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bc0:	931a      	str	r3, [sp, #104]	; 0x68
 8003bc2:	462f      	mov	r7, r5
 8003bc4:	2205      	movs	r2, #5
 8003bc6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003bca:	4850      	ldr	r0, [pc, #320]	; (8003d0c <_svfiprintf_r+0x1dc>)
 8003bcc:	f7fc fb08 	bl	80001e0 <memchr>
 8003bd0:	9b04      	ldr	r3, [sp, #16]
 8003bd2:	b9d0      	cbnz	r0, 8003c0a <_svfiprintf_r+0xda>
 8003bd4:	06d9      	lsls	r1, r3, #27
 8003bd6:	bf44      	itt	mi
 8003bd8:	2220      	movmi	r2, #32
 8003bda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003bde:	071a      	lsls	r2, r3, #28
 8003be0:	bf44      	itt	mi
 8003be2:	222b      	movmi	r2, #43	; 0x2b
 8003be4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003be8:	782a      	ldrb	r2, [r5, #0]
 8003bea:	2a2a      	cmp	r2, #42	; 0x2a
 8003bec:	d015      	beq.n	8003c1a <_svfiprintf_r+0xea>
 8003bee:	9a07      	ldr	r2, [sp, #28]
 8003bf0:	462f      	mov	r7, r5
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	250a      	movs	r5, #10
 8003bf6:	4639      	mov	r1, r7
 8003bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bfc:	3b30      	subs	r3, #48	; 0x30
 8003bfe:	2b09      	cmp	r3, #9
 8003c00:	d94d      	bls.n	8003c9e <_svfiprintf_r+0x16e>
 8003c02:	b1b8      	cbz	r0, 8003c34 <_svfiprintf_r+0x104>
 8003c04:	e00f      	b.n	8003c26 <_svfiprintf_r+0xf6>
 8003c06:	462f      	mov	r7, r5
 8003c08:	e7b8      	b.n	8003b7c <_svfiprintf_r+0x4c>
 8003c0a:	4a40      	ldr	r2, [pc, #256]	; (8003d0c <_svfiprintf_r+0x1dc>)
 8003c0c:	1a80      	subs	r0, r0, r2
 8003c0e:	fa0b f000 	lsl.w	r0, fp, r0
 8003c12:	4318      	orrs	r0, r3
 8003c14:	9004      	str	r0, [sp, #16]
 8003c16:	463d      	mov	r5, r7
 8003c18:	e7d3      	b.n	8003bc2 <_svfiprintf_r+0x92>
 8003c1a:	9a03      	ldr	r2, [sp, #12]
 8003c1c:	1d11      	adds	r1, r2, #4
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	9103      	str	r1, [sp, #12]
 8003c22:	2a00      	cmp	r2, #0
 8003c24:	db01      	blt.n	8003c2a <_svfiprintf_r+0xfa>
 8003c26:	9207      	str	r2, [sp, #28]
 8003c28:	e004      	b.n	8003c34 <_svfiprintf_r+0x104>
 8003c2a:	4252      	negs	r2, r2
 8003c2c:	f043 0302 	orr.w	r3, r3, #2
 8003c30:	9207      	str	r2, [sp, #28]
 8003c32:	9304      	str	r3, [sp, #16]
 8003c34:	783b      	ldrb	r3, [r7, #0]
 8003c36:	2b2e      	cmp	r3, #46	; 0x2e
 8003c38:	d10c      	bne.n	8003c54 <_svfiprintf_r+0x124>
 8003c3a:	787b      	ldrb	r3, [r7, #1]
 8003c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c3e:	d133      	bne.n	8003ca8 <_svfiprintf_r+0x178>
 8003c40:	9b03      	ldr	r3, [sp, #12]
 8003c42:	1d1a      	adds	r2, r3, #4
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	9203      	str	r2, [sp, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bfb8      	it	lt
 8003c4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c50:	3702      	adds	r7, #2
 8003c52:	9305      	str	r3, [sp, #20]
 8003c54:	4d2e      	ldr	r5, [pc, #184]	; (8003d10 <_svfiprintf_r+0x1e0>)
 8003c56:	7839      	ldrb	r1, [r7, #0]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f7fc fac0 	bl	80001e0 <memchr>
 8003c60:	b138      	cbz	r0, 8003c72 <_svfiprintf_r+0x142>
 8003c62:	2340      	movs	r3, #64	; 0x40
 8003c64:	1b40      	subs	r0, r0, r5
 8003c66:	fa03 f000 	lsl.w	r0, r3, r0
 8003c6a:	9b04      	ldr	r3, [sp, #16]
 8003c6c:	4303      	orrs	r3, r0
 8003c6e:	3701      	adds	r7, #1
 8003c70:	9304      	str	r3, [sp, #16]
 8003c72:	7839      	ldrb	r1, [r7, #0]
 8003c74:	4827      	ldr	r0, [pc, #156]	; (8003d14 <_svfiprintf_r+0x1e4>)
 8003c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c7a:	2206      	movs	r2, #6
 8003c7c:	1c7e      	adds	r6, r7, #1
 8003c7e:	f7fc faaf 	bl	80001e0 <memchr>
 8003c82:	2800      	cmp	r0, #0
 8003c84:	d038      	beq.n	8003cf8 <_svfiprintf_r+0x1c8>
 8003c86:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <_svfiprintf_r+0x1e8>)
 8003c88:	bb13      	cbnz	r3, 8003cd0 <_svfiprintf_r+0x1a0>
 8003c8a:	9b03      	ldr	r3, [sp, #12]
 8003c8c:	3307      	adds	r3, #7
 8003c8e:	f023 0307 	bic.w	r3, r3, #7
 8003c92:	3308      	adds	r3, #8
 8003c94:	9303      	str	r3, [sp, #12]
 8003c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c98:	444b      	add	r3, r9
 8003c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c9c:	e76d      	b.n	8003b7a <_svfiprintf_r+0x4a>
 8003c9e:	fb05 3202 	mla	r2, r5, r2, r3
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	460f      	mov	r7, r1
 8003ca6:	e7a6      	b.n	8003bf6 <_svfiprintf_r+0xc6>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	3701      	adds	r7, #1
 8003cac:	9305      	str	r3, [sp, #20]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	250a      	movs	r5, #10
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cb8:	3a30      	subs	r2, #48	; 0x30
 8003cba:	2a09      	cmp	r2, #9
 8003cbc:	d903      	bls.n	8003cc6 <_svfiprintf_r+0x196>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0c8      	beq.n	8003c54 <_svfiprintf_r+0x124>
 8003cc2:	9105      	str	r1, [sp, #20]
 8003cc4:	e7c6      	b.n	8003c54 <_svfiprintf_r+0x124>
 8003cc6:	fb05 2101 	mla	r1, r5, r1, r2
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4607      	mov	r7, r0
 8003cce:	e7f0      	b.n	8003cb2 <_svfiprintf_r+0x182>
 8003cd0:	ab03      	add	r3, sp, #12
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <_svfiprintf_r+0x1ec>)
 8003cd8:	a904      	add	r1, sp, #16
 8003cda:	4640      	mov	r0, r8
 8003cdc:	f3af 8000 	nop.w
 8003ce0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ce4:	4681      	mov	r9, r0
 8003ce6:	d1d6      	bne.n	8003c96 <_svfiprintf_r+0x166>
 8003ce8:	89a3      	ldrh	r3, [r4, #12]
 8003cea:	065b      	lsls	r3, r3, #25
 8003cec:	f53f af35 	bmi.w	8003b5a <_svfiprintf_r+0x2a>
 8003cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cf2:	b01d      	add	sp, #116	; 0x74
 8003cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf8:	ab03      	add	r3, sp, #12
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <_svfiprintf_r+0x1ec>)
 8003d00:	a904      	add	r1, sp, #16
 8003d02:	4640      	mov	r0, r8
 8003d04:	f000 f882 	bl	8003e0c <_printf_i>
 8003d08:	e7ea      	b.n	8003ce0 <_svfiprintf_r+0x1b0>
 8003d0a:	bf00      	nop
 8003d0c:	08006ad4 	.word	0x08006ad4
 8003d10:	08006ada 	.word	0x08006ada
 8003d14:	08006ade 	.word	0x08006ade
 8003d18:	00000000 	.word	0x00000000
 8003d1c:	08003a7d 	.word	0x08003a7d

08003d20 <_printf_common>:
 8003d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d24:	4691      	mov	r9, r2
 8003d26:	461f      	mov	r7, r3
 8003d28:	688a      	ldr	r2, [r1, #8]
 8003d2a:	690b      	ldr	r3, [r1, #16]
 8003d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d30:	4293      	cmp	r3, r2
 8003d32:	bfb8      	it	lt
 8003d34:	4613      	movlt	r3, r2
 8003d36:	f8c9 3000 	str.w	r3, [r9]
 8003d3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d3e:	4606      	mov	r6, r0
 8003d40:	460c      	mov	r4, r1
 8003d42:	b112      	cbz	r2, 8003d4a <_printf_common+0x2a>
 8003d44:	3301      	adds	r3, #1
 8003d46:	f8c9 3000 	str.w	r3, [r9]
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	0699      	lsls	r1, r3, #26
 8003d4e:	bf42      	ittt	mi
 8003d50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003d54:	3302      	addmi	r3, #2
 8003d56:	f8c9 3000 	strmi.w	r3, [r9]
 8003d5a:	6825      	ldr	r5, [r4, #0]
 8003d5c:	f015 0506 	ands.w	r5, r5, #6
 8003d60:	d107      	bne.n	8003d72 <_printf_common+0x52>
 8003d62:	f104 0a19 	add.w	sl, r4, #25
 8003d66:	68e3      	ldr	r3, [r4, #12]
 8003d68:	f8d9 2000 	ldr.w	r2, [r9]
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	42ab      	cmp	r3, r5
 8003d70:	dc28      	bgt.n	8003dc4 <_printf_common+0xa4>
 8003d72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003d76:	6822      	ldr	r2, [r4, #0]
 8003d78:	3300      	adds	r3, #0
 8003d7a:	bf18      	it	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	0692      	lsls	r2, r2, #26
 8003d80:	d42d      	bmi.n	8003dde <_printf_common+0xbe>
 8003d82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d86:	4639      	mov	r1, r7
 8003d88:	4630      	mov	r0, r6
 8003d8a:	47c0      	blx	r8
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	d020      	beq.n	8003dd2 <_printf_common+0xb2>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	68e5      	ldr	r5, [r4, #12]
 8003d94:	f8d9 2000 	ldr.w	r2, [r9]
 8003d98:	f003 0306 	and.w	r3, r3, #6
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	bf08      	it	eq
 8003da0:	1aad      	subeq	r5, r5, r2
 8003da2:	68a3      	ldr	r3, [r4, #8]
 8003da4:	6922      	ldr	r2, [r4, #16]
 8003da6:	bf0c      	ite	eq
 8003da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dac:	2500      	movne	r5, #0
 8003dae:	4293      	cmp	r3, r2
 8003db0:	bfc4      	itt	gt
 8003db2:	1a9b      	subgt	r3, r3, r2
 8003db4:	18ed      	addgt	r5, r5, r3
 8003db6:	f04f 0900 	mov.w	r9, #0
 8003dba:	341a      	adds	r4, #26
 8003dbc:	454d      	cmp	r5, r9
 8003dbe:	d11a      	bne.n	8003df6 <_printf_common+0xd6>
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	e008      	b.n	8003dd6 <_printf_common+0xb6>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	4652      	mov	r2, sl
 8003dc8:	4639      	mov	r1, r7
 8003dca:	4630      	mov	r0, r6
 8003dcc:	47c0      	blx	r8
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d103      	bne.n	8003dda <_printf_common+0xba>
 8003dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dda:	3501      	adds	r5, #1
 8003ddc:	e7c3      	b.n	8003d66 <_printf_common+0x46>
 8003dde:	18e1      	adds	r1, r4, r3
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	2030      	movs	r0, #48	; 0x30
 8003de4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003de8:	4422      	add	r2, r4
 8003dea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003df2:	3302      	adds	r3, #2
 8003df4:	e7c5      	b.n	8003d82 <_printf_common+0x62>
 8003df6:	2301      	movs	r3, #1
 8003df8:	4622      	mov	r2, r4
 8003dfa:	4639      	mov	r1, r7
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	47c0      	blx	r8
 8003e00:	3001      	adds	r0, #1
 8003e02:	d0e6      	beq.n	8003dd2 <_printf_common+0xb2>
 8003e04:	f109 0901 	add.w	r9, r9, #1
 8003e08:	e7d8      	b.n	8003dbc <_printf_common+0x9c>
	...

08003e0c <_printf_i>:
 8003e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e14:	460c      	mov	r4, r1
 8003e16:	7e09      	ldrb	r1, [r1, #24]
 8003e18:	b085      	sub	sp, #20
 8003e1a:	296e      	cmp	r1, #110	; 0x6e
 8003e1c:	4617      	mov	r7, r2
 8003e1e:	4606      	mov	r6, r0
 8003e20:	4698      	mov	r8, r3
 8003e22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e24:	f000 80b3 	beq.w	8003f8e <_printf_i+0x182>
 8003e28:	d822      	bhi.n	8003e70 <_printf_i+0x64>
 8003e2a:	2963      	cmp	r1, #99	; 0x63
 8003e2c:	d036      	beq.n	8003e9c <_printf_i+0x90>
 8003e2e:	d80a      	bhi.n	8003e46 <_printf_i+0x3a>
 8003e30:	2900      	cmp	r1, #0
 8003e32:	f000 80b9 	beq.w	8003fa8 <_printf_i+0x19c>
 8003e36:	2958      	cmp	r1, #88	; 0x58
 8003e38:	f000 8083 	beq.w	8003f42 <_printf_i+0x136>
 8003e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003e44:	e032      	b.n	8003eac <_printf_i+0xa0>
 8003e46:	2964      	cmp	r1, #100	; 0x64
 8003e48:	d001      	beq.n	8003e4e <_printf_i+0x42>
 8003e4a:	2969      	cmp	r1, #105	; 0x69
 8003e4c:	d1f6      	bne.n	8003e3c <_printf_i+0x30>
 8003e4e:	6820      	ldr	r0, [r4, #0]
 8003e50:	6813      	ldr	r3, [r2, #0]
 8003e52:	0605      	lsls	r5, r0, #24
 8003e54:	f103 0104 	add.w	r1, r3, #4
 8003e58:	d52a      	bpl.n	8003eb0 <_printf_i+0xa4>
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6011      	str	r1, [r2, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	da03      	bge.n	8003e6a <_printf_i+0x5e>
 8003e62:	222d      	movs	r2, #45	; 0x2d
 8003e64:	425b      	negs	r3, r3
 8003e66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003e6a:	486f      	ldr	r0, [pc, #444]	; (8004028 <_printf_i+0x21c>)
 8003e6c:	220a      	movs	r2, #10
 8003e6e:	e039      	b.n	8003ee4 <_printf_i+0xd8>
 8003e70:	2973      	cmp	r1, #115	; 0x73
 8003e72:	f000 809d 	beq.w	8003fb0 <_printf_i+0x1a4>
 8003e76:	d808      	bhi.n	8003e8a <_printf_i+0x7e>
 8003e78:	296f      	cmp	r1, #111	; 0x6f
 8003e7a:	d020      	beq.n	8003ebe <_printf_i+0xb2>
 8003e7c:	2970      	cmp	r1, #112	; 0x70
 8003e7e:	d1dd      	bne.n	8003e3c <_printf_i+0x30>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	f043 0320 	orr.w	r3, r3, #32
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	e003      	b.n	8003e92 <_printf_i+0x86>
 8003e8a:	2975      	cmp	r1, #117	; 0x75
 8003e8c:	d017      	beq.n	8003ebe <_printf_i+0xb2>
 8003e8e:	2978      	cmp	r1, #120	; 0x78
 8003e90:	d1d4      	bne.n	8003e3c <_printf_i+0x30>
 8003e92:	2378      	movs	r3, #120	; 0x78
 8003e94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e98:	4864      	ldr	r0, [pc, #400]	; (800402c <_printf_i+0x220>)
 8003e9a:	e055      	b.n	8003f48 <_printf_i+0x13c>
 8003e9c:	6813      	ldr	r3, [r2, #0]
 8003e9e:	1d19      	adds	r1, r3, #4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6011      	str	r1, [r2, #0]
 8003ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003eac:	2301      	movs	r3, #1
 8003eae:	e08c      	b.n	8003fca <_printf_i+0x1be>
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6011      	str	r1, [r2, #0]
 8003eb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003eb8:	bf18      	it	ne
 8003eba:	b21b      	sxthne	r3, r3
 8003ebc:	e7cf      	b.n	8003e5e <_printf_i+0x52>
 8003ebe:	6813      	ldr	r3, [r2, #0]
 8003ec0:	6825      	ldr	r5, [r4, #0]
 8003ec2:	1d18      	adds	r0, r3, #4
 8003ec4:	6010      	str	r0, [r2, #0]
 8003ec6:	0628      	lsls	r0, r5, #24
 8003ec8:	d501      	bpl.n	8003ece <_printf_i+0xc2>
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	e002      	b.n	8003ed4 <_printf_i+0xc8>
 8003ece:	0668      	lsls	r0, r5, #25
 8003ed0:	d5fb      	bpl.n	8003eca <_printf_i+0xbe>
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	4854      	ldr	r0, [pc, #336]	; (8004028 <_printf_i+0x21c>)
 8003ed6:	296f      	cmp	r1, #111	; 0x6f
 8003ed8:	bf14      	ite	ne
 8003eda:	220a      	movne	r2, #10
 8003edc:	2208      	moveq	r2, #8
 8003ede:	2100      	movs	r1, #0
 8003ee0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ee4:	6865      	ldr	r5, [r4, #4]
 8003ee6:	60a5      	str	r5, [r4, #8]
 8003ee8:	2d00      	cmp	r5, #0
 8003eea:	f2c0 8095 	blt.w	8004018 <_printf_i+0x20c>
 8003eee:	6821      	ldr	r1, [r4, #0]
 8003ef0:	f021 0104 	bic.w	r1, r1, #4
 8003ef4:	6021      	str	r1, [r4, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d13d      	bne.n	8003f76 <_printf_i+0x16a>
 8003efa:	2d00      	cmp	r5, #0
 8003efc:	f040 808e 	bne.w	800401c <_printf_i+0x210>
 8003f00:	4665      	mov	r5, ip
 8003f02:	2a08      	cmp	r2, #8
 8003f04:	d10b      	bne.n	8003f1e <_printf_i+0x112>
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	07db      	lsls	r3, r3, #31
 8003f0a:	d508      	bpl.n	8003f1e <_printf_i+0x112>
 8003f0c:	6923      	ldr	r3, [r4, #16]
 8003f0e:	6862      	ldr	r2, [r4, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	bfde      	ittt	le
 8003f14:	2330      	movle	r3, #48	; 0x30
 8003f16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f1e:	ebac 0305 	sub.w	r3, ip, r5
 8003f22:	6123      	str	r3, [r4, #16]
 8003f24:	f8cd 8000 	str.w	r8, [sp]
 8003f28:	463b      	mov	r3, r7
 8003f2a:	aa03      	add	r2, sp, #12
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f7ff fef6 	bl	8003d20 <_printf_common>
 8003f34:	3001      	adds	r0, #1
 8003f36:	d14d      	bne.n	8003fd4 <_printf_i+0x1c8>
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3c:	b005      	add	sp, #20
 8003f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f42:	4839      	ldr	r0, [pc, #228]	; (8004028 <_printf_i+0x21c>)
 8003f44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003f48:	6813      	ldr	r3, [r2, #0]
 8003f4a:	6821      	ldr	r1, [r4, #0]
 8003f4c:	1d1d      	adds	r5, r3, #4
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6015      	str	r5, [r2, #0]
 8003f52:	060a      	lsls	r2, r1, #24
 8003f54:	d50b      	bpl.n	8003f6e <_printf_i+0x162>
 8003f56:	07ca      	lsls	r2, r1, #31
 8003f58:	bf44      	itt	mi
 8003f5a:	f041 0120 	orrmi.w	r1, r1, #32
 8003f5e:	6021      	strmi	r1, [r4, #0]
 8003f60:	b91b      	cbnz	r3, 8003f6a <_printf_i+0x15e>
 8003f62:	6822      	ldr	r2, [r4, #0]
 8003f64:	f022 0220 	bic.w	r2, r2, #32
 8003f68:	6022      	str	r2, [r4, #0]
 8003f6a:	2210      	movs	r2, #16
 8003f6c:	e7b7      	b.n	8003ede <_printf_i+0xd2>
 8003f6e:	064d      	lsls	r5, r1, #25
 8003f70:	bf48      	it	mi
 8003f72:	b29b      	uxthmi	r3, r3
 8003f74:	e7ef      	b.n	8003f56 <_printf_i+0x14a>
 8003f76:	4665      	mov	r5, ip
 8003f78:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f7c:	fb02 3311 	mls	r3, r2, r1, r3
 8003f80:	5cc3      	ldrb	r3, [r0, r3]
 8003f82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003f86:	460b      	mov	r3, r1
 8003f88:	2900      	cmp	r1, #0
 8003f8a:	d1f5      	bne.n	8003f78 <_printf_i+0x16c>
 8003f8c:	e7b9      	b.n	8003f02 <_printf_i+0xf6>
 8003f8e:	6813      	ldr	r3, [r2, #0]
 8003f90:	6825      	ldr	r5, [r4, #0]
 8003f92:	6961      	ldr	r1, [r4, #20]
 8003f94:	1d18      	adds	r0, r3, #4
 8003f96:	6010      	str	r0, [r2, #0]
 8003f98:	0628      	lsls	r0, r5, #24
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	d501      	bpl.n	8003fa2 <_printf_i+0x196>
 8003f9e:	6019      	str	r1, [r3, #0]
 8003fa0:	e002      	b.n	8003fa8 <_printf_i+0x19c>
 8003fa2:	066a      	lsls	r2, r5, #25
 8003fa4:	d5fb      	bpl.n	8003f9e <_printf_i+0x192>
 8003fa6:	8019      	strh	r1, [r3, #0]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6123      	str	r3, [r4, #16]
 8003fac:	4665      	mov	r5, ip
 8003fae:	e7b9      	b.n	8003f24 <_printf_i+0x118>
 8003fb0:	6813      	ldr	r3, [r2, #0]
 8003fb2:	1d19      	adds	r1, r3, #4
 8003fb4:	6011      	str	r1, [r2, #0]
 8003fb6:	681d      	ldr	r5, [r3, #0]
 8003fb8:	6862      	ldr	r2, [r4, #4]
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f7fc f90f 	bl	80001e0 <memchr>
 8003fc2:	b108      	cbz	r0, 8003fc8 <_printf_i+0x1bc>
 8003fc4:	1b40      	subs	r0, r0, r5
 8003fc6:	6060      	str	r0, [r4, #4]
 8003fc8:	6863      	ldr	r3, [r4, #4]
 8003fca:	6123      	str	r3, [r4, #16]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fd2:	e7a7      	b.n	8003f24 <_printf_i+0x118>
 8003fd4:	6923      	ldr	r3, [r4, #16]
 8003fd6:	462a      	mov	r2, r5
 8003fd8:	4639      	mov	r1, r7
 8003fda:	4630      	mov	r0, r6
 8003fdc:	47c0      	blx	r8
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d0aa      	beq.n	8003f38 <_printf_i+0x12c>
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	079b      	lsls	r3, r3, #30
 8003fe6:	d413      	bmi.n	8004010 <_printf_i+0x204>
 8003fe8:	68e0      	ldr	r0, [r4, #12]
 8003fea:	9b03      	ldr	r3, [sp, #12]
 8003fec:	4298      	cmp	r0, r3
 8003fee:	bfb8      	it	lt
 8003ff0:	4618      	movlt	r0, r3
 8003ff2:	e7a3      	b.n	8003f3c <_printf_i+0x130>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	464a      	mov	r2, r9
 8003ff8:	4639      	mov	r1, r7
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	47c0      	blx	r8
 8003ffe:	3001      	adds	r0, #1
 8004000:	d09a      	beq.n	8003f38 <_printf_i+0x12c>
 8004002:	3501      	adds	r5, #1
 8004004:	68e3      	ldr	r3, [r4, #12]
 8004006:	9a03      	ldr	r2, [sp, #12]
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	42ab      	cmp	r3, r5
 800400c:	dcf2      	bgt.n	8003ff4 <_printf_i+0x1e8>
 800400e:	e7eb      	b.n	8003fe8 <_printf_i+0x1dc>
 8004010:	2500      	movs	r5, #0
 8004012:	f104 0919 	add.w	r9, r4, #25
 8004016:	e7f5      	b.n	8004004 <_printf_i+0x1f8>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1ac      	bne.n	8003f76 <_printf_i+0x16a>
 800401c:	7803      	ldrb	r3, [r0, #0]
 800401e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004022:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004026:	e76c      	b.n	8003f02 <_printf_i+0xf6>
 8004028:	08006ae5 	.word	0x08006ae5
 800402c:	08006af6 	.word	0x08006af6

08004030 <memcpy>:
 8004030:	b510      	push	{r4, lr}
 8004032:	1e43      	subs	r3, r0, #1
 8004034:	440a      	add	r2, r1
 8004036:	4291      	cmp	r1, r2
 8004038:	d100      	bne.n	800403c <memcpy+0xc>
 800403a:	bd10      	pop	{r4, pc}
 800403c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004040:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004044:	e7f7      	b.n	8004036 <memcpy+0x6>

08004046 <memmove>:
 8004046:	4288      	cmp	r0, r1
 8004048:	b510      	push	{r4, lr}
 800404a:	eb01 0302 	add.w	r3, r1, r2
 800404e:	d807      	bhi.n	8004060 <memmove+0x1a>
 8004050:	1e42      	subs	r2, r0, #1
 8004052:	4299      	cmp	r1, r3
 8004054:	d00a      	beq.n	800406c <memmove+0x26>
 8004056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800405a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800405e:	e7f8      	b.n	8004052 <memmove+0xc>
 8004060:	4283      	cmp	r3, r0
 8004062:	d9f5      	bls.n	8004050 <memmove+0xa>
 8004064:	1881      	adds	r1, r0, r2
 8004066:	1ad2      	subs	r2, r2, r3
 8004068:	42d3      	cmn	r3, r2
 800406a:	d100      	bne.n	800406e <memmove+0x28>
 800406c:	bd10      	pop	{r4, pc}
 800406e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004072:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004076:	e7f7      	b.n	8004068 <memmove+0x22>

08004078 <_free_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4605      	mov	r5, r0
 800407c:	2900      	cmp	r1, #0
 800407e:	d045      	beq.n	800410c <_free_r+0x94>
 8004080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004084:	1f0c      	subs	r4, r1, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	bfb8      	it	lt
 800408a:	18e4      	addlt	r4, r4, r3
 800408c:	f000 f8d2 	bl	8004234 <__malloc_lock>
 8004090:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <_free_r+0x98>)
 8004092:	6813      	ldr	r3, [r2, #0]
 8004094:	4610      	mov	r0, r2
 8004096:	b933      	cbnz	r3, 80040a6 <_free_r+0x2e>
 8004098:	6063      	str	r3, [r4, #4]
 800409a:	6014      	str	r4, [r2, #0]
 800409c:	4628      	mov	r0, r5
 800409e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040a2:	f000 b8c8 	b.w	8004236 <__malloc_unlock>
 80040a6:	42a3      	cmp	r3, r4
 80040a8:	d90c      	bls.n	80040c4 <_free_r+0x4c>
 80040aa:	6821      	ldr	r1, [r4, #0]
 80040ac:	1862      	adds	r2, r4, r1
 80040ae:	4293      	cmp	r3, r2
 80040b0:	bf04      	itt	eq
 80040b2:	681a      	ldreq	r2, [r3, #0]
 80040b4:	685b      	ldreq	r3, [r3, #4]
 80040b6:	6063      	str	r3, [r4, #4]
 80040b8:	bf04      	itt	eq
 80040ba:	1852      	addeq	r2, r2, r1
 80040bc:	6022      	streq	r2, [r4, #0]
 80040be:	6004      	str	r4, [r0, #0]
 80040c0:	e7ec      	b.n	800409c <_free_r+0x24>
 80040c2:	4613      	mov	r3, r2
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	b10a      	cbz	r2, 80040cc <_free_r+0x54>
 80040c8:	42a2      	cmp	r2, r4
 80040ca:	d9fa      	bls.n	80040c2 <_free_r+0x4a>
 80040cc:	6819      	ldr	r1, [r3, #0]
 80040ce:	1858      	adds	r0, r3, r1
 80040d0:	42a0      	cmp	r0, r4
 80040d2:	d10b      	bne.n	80040ec <_free_r+0x74>
 80040d4:	6820      	ldr	r0, [r4, #0]
 80040d6:	4401      	add	r1, r0
 80040d8:	1858      	adds	r0, r3, r1
 80040da:	4282      	cmp	r2, r0
 80040dc:	6019      	str	r1, [r3, #0]
 80040de:	d1dd      	bne.n	800409c <_free_r+0x24>
 80040e0:	6810      	ldr	r0, [r2, #0]
 80040e2:	6852      	ldr	r2, [r2, #4]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	4401      	add	r1, r0
 80040e8:	6019      	str	r1, [r3, #0]
 80040ea:	e7d7      	b.n	800409c <_free_r+0x24>
 80040ec:	d902      	bls.n	80040f4 <_free_r+0x7c>
 80040ee:	230c      	movs	r3, #12
 80040f0:	602b      	str	r3, [r5, #0]
 80040f2:	e7d3      	b.n	800409c <_free_r+0x24>
 80040f4:	6820      	ldr	r0, [r4, #0]
 80040f6:	1821      	adds	r1, r4, r0
 80040f8:	428a      	cmp	r2, r1
 80040fa:	bf04      	itt	eq
 80040fc:	6811      	ldreq	r1, [r2, #0]
 80040fe:	6852      	ldreq	r2, [r2, #4]
 8004100:	6062      	str	r2, [r4, #4]
 8004102:	bf04      	itt	eq
 8004104:	1809      	addeq	r1, r1, r0
 8004106:	6021      	streq	r1, [r4, #0]
 8004108:	605c      	str	r4, [r3, #4]
 800410a:	e7c7      	b.n	800409c <_free_r+0x24>
 800410c:	bd38      	pop	{r3, r4, r5, pc}
 800410e:	bf00      	nop
 8004110:	200004f8 	.word	0x200004f8

08004114 <_malloc_r>:
 8004114:	b570      	push	{r4, r5, r6, lr}
 8004116:	1ccd      	adds	r5, r1, #3
 8004118:	f025 0503 	bic.w	r5, r5, #3
 800411c:	3508      	adds	r5, #8
 800411e:	2d0c      	cmp	r5, #12
 8004120:	bf38      	it	cc
 8004122:	250c      	movcc	r5, #12
 8004124:	2d00      	cmp	r5, #0
 8004126:	4606      	mov	r6, r0
 8004128:	db01      	blt.n	800412e <_malloc_r+0x1a>
 800412a:	42a9      	cmp	r1, r5
 800412c:	d903      	bls.n	8004136 <_malloc_r+0x22>
 800412e:	230c      	movs	r3, #12
 8004130:	6033      	str	r3, [r6, #0]
 8004132:	2000      	movs	r0, #0
 8004134:	bd70      	pop	{r4, r5, r6, pc}
 8004136:	f000 f87d 	bl	8004234 <__malloc_lock>
 800413a:	4a21      	ldr	r2, [pc, #132]	; (80041c0 <_malloc_r+0xac>)
 800413c:	6814      	ldr	r4, [r2, #0]
 800413e:	4621      	mov	r1, r4
 8004140:	b991      	cbnz	r1, 8004168 <_malloc_r+0x54>
 8004142:	4c20      	ldr	r4, [pc, #128]	; (80041c4 <_malloc_r+0xb0>)
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	b91b      	cbnz	r3, 8004150 <_malloc_r+0x3c>
 8004148:	4630      	mov	r0, r6
 800414a:	f000 f863 	bl	8004214 <_sbrk_r>
 800414e:	6020      	str	r0, [r4, #0]
 8004150:	4629      	mov	r1, r5
 8004152:	4630      	mov	r0, r6
 8004154:	f000 f85e 	bl	8004214 <_sbrk_r>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d124      	bne.n	80041a6 <_malloc_r+0x92>
 800415c:	230c      	movs	r3, #12
 800415e:	6033      	str	r3, [r6, #0]
 8004160:	4630      	mov	r0, r6
 8004162:	f000 f868 	bl	8004236 <__malloc_unlock>
 8004166:	e7e4      	b.n	8004132 <_malloc_r+0x1e>
 8004168:	680b      	ldr	r3, [r1, #0]
 800416a:	1b5b      	subs	r3, r3, r5
 800416c:	d418      	bmi.n	80041a0 <_malloc_r+0x8c>
 800416e:	2b0b      	cmp	r3, #11
 8004170:	d90f      	bls.n	8004192 <_malloc_r+0x7e>
 8004172:	600b      	str	r3, [r1, #0]
 8004174:	50cd      	str	r5, [r1, r3]
 8004176:	18cc      	adds	r4, r1, r3
 8004178:	4630      	mov	r0, r6
 800417a:	f000 f85c 	bl	8004236 <__malloc_unlock>
 800417e:	f104 000b 	add.w	r0, r4, #11
 8004182:	1d23      	adds	r3, r4, #4
 8004184:	f020 0007 	bic.w	r0, r0, #7
 8004188:	1ac3      	subs	r3, r0, r3
 800418a:	d0d3      	beq.n	8004134 <_malloc_r+0x20>
 800418c:	425a      	negs	r2, r3
 800418e:	50e2      	str	r2, [r4, r3]
 8004190:	e7d0      	b.n	8004134 <_malloc_r+0x20>
 8004192:	428c      	cmp	r4, r1
 8004194:	684b      	ldr	r3, [r1, #4]
 8004196:	bf16      	itet	ne
 8004198:	6063      	strne	r3, [r4, #4]
 800419a:	6013      	streq	r3, [r2, #0]
 800419c:	460c      	movne	r4, r1
 800419e:	e7eb      	b.n	8004178 <_malloc_r+0x64>
 80041a0:	460c      	mov	r4, r1
 80041a2:	6849      	ldr	r1, [r1, #4]
 80041a4:	e7cc      	b.n	8004140 <_malloc_r+0x2c>
 80041a6:	1cc4      	adds	r4, r0, #3
 80041a8:	f024 0403 	bic.w	r4, r4, #3
 80041ac:	42a0      	cmp	r0, r4
 80041ae:	d005      	beq.n	80041bc <_malloc_r+0xa8>
 80041b0:	1a21      	subs	r1, r4, r0
 80041b2:	4630      	mov	r0, r6
 80041b4:	f000 f82e 	bl	8004214 <_sbrk_r>
 80041b8:	3001      	adds	r0, #1
 80041ba:	d0cf      	beq.n	800415c <_malloc_r+0x48>
 80041bc:	6025      	str	r5, [r4, #0]
 80041be:	e7db      	b.n	8004178 <_malloc_r+0x64>
 80041c0:	200004f8 	.word	0x200004f8
 80041c4:	200004fc 	.word	0x200004fc

080041c8 <_realloc_r>:
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ca:	4607      	mov	r7, r0
 80041cc:	4614      	mov	r4, r2
 80041ce:	460e      	mov	r6, r1
 80041d0:	b921      	cbnz	r1, 80041dc <_realloc_r+0x14>
 80041d2:	4611      	mov	r1, r2
 80041d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80041d8:	f7ff bf9c 	b.w	8004114 <_malloc_r>
 80041dc:	b922      	cbnz	r2, 80041e8 <_realloc_r+0x20>
 80041de:	f7ff ff4b 	bl	8004078 <_free_r>
 80041e2:	4625      	mov	r5, r4
 80041e4:	4628      	mov	r0, r5
 80041e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041e8:	f000 f826 	bl	8004238 <_malloc_usable_size_r>
 80041ec:	42a0      	cmp	r0, r4
 80041ee:	d20f      	bcs.n	8004210 <_realloc_r+0x48>
 80041f0:	4621      	mov	r1, r4
 80041f2:	4638      	mov	r0, r7
 80041f4:	f7ff ff8e 	bl	8004114 <_malloc_r>
 80041f8:	4605      	mov	r5, r0
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d0f2      	beq.n	80041e4 <_realloc_r+0x1c>
 80041fe:	4631      	mov	r1, r6
 8004200:	4622      	mov	r2, r4
 8004202:	f7ff ff15 	bl	8004030 <memcpy>
 8004206:	4631      	mov	r1, r6
 8004208:	4638      	mov	r0, r7
 800420a:	f7ff ff35 	bl	8004078 <_free_r>
 800420e:	e7e9      	b.n	80041e4 <_realloc_r+0x1c>
 8004210:	4635      	mov	r5, r6
 8004212:	e7e7      	b.n	80041e4 <_realloc_r+0x1c>

08004214 <_sbrk_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4c06      	ldr	r4, [pc, #24]	; (8004230 <_sbrk_r+0x1c>)
 8004218:	2300      	movs	r3, #0
 800421a:	4605      	mov	r5, r0
 800421c:	4608      	mov	r0, r1
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	f7ff fb4e 	bl	80038c0 <_sbrk>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_sbrk_r+0x1a>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	b103      	cbz	r3, 800422e <_sbrk_r+0x1a>
 800422c:	602b      	str	r3, [r5, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	20000648 	.word	0x20000648

08004234 <__malloc_lock>:
 8004234:	4770      	bx	lr

08004236 <__malloc_unlock>:
 8004236:	4770      	bx	lr

08004238 <_malloc_usable_size_r>:
 8004238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800423c:	1f18      	subs	r0, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	bfbc      	itt	lt
 8004242:	580b      	ldrlt	r3, [r1, r0]
 8004244:	18c0      	addlt	r0, r0, r3
 8004246:	4770      	bx	lr

08004248 <Font7x10>:
	...
 800425c:	1000 1000 1000 1000 1000 1000 0000 1000     ................
 800426c:	0000 0000 2800 2800 2800 0000 0000 0000     .....(.(.(......
	...
 8004284:	2400 2400 7c00 2400 4800 7c00 4800 4800     .$.$.|.$.H.|.H.H
 8004294:	0000 0000 3800 5400 5000 3800 1400 5400     .....8.T.P.8...T
 80042a4:	5400 3800 1000 0000 2000 5400 5800 3000     .T.8..... .T.X.0
 80042b4:	2800 5400 1400 0800 0000 0000 1000 2800     .(.T...........(
 80042c4:	2800 1000 3400 4800 4800 3400 0000 0000     .(...4.H.H.4....
 80042d4:	1000 1000 1000 0000 0000 0000 0000 0000     ................
 80042e4:	0000 0000 0800 1000 2000 2000 2000 2000     ......... . . . 
 80042f4:	2000 2000 1000 0800 2000 1000 0800 0800     . . ..... ......
 8004304:	0800 0800 0800 0800 1000 2000 1000 3800     ........... ...8
 8004314:	1000 2800 0000 0000 0000 0000 0000 0000     ...(............
 8004324:	0000 0000 1000 1000 7c00 1000 1000 0000     .........|......
	...
 8004344:	0000 1000 1000 1000 0000 0000 0000 0000     ................
 8004354:	0000 3800 0000 0000 0000 0000 0000 0000     ...8............
	...
 800436c:	0000 1000 0000 0000 0800 0800 1000 1000     ................
 800437c:	1000 1000 2000 2000 0000 0000 3800 4400     ..... . .....8.D
 800438c:	4400 5400 4400 4400 4400 3800 0000 0000     .D.T.D.D.D.8....
 800439c:	1000 3000 5000 1000 1000 1000 1000 1000     ...0.P..........
 80043ac:	0000 0000 3800 4400 4400 0400 0800 1000     .....8.D.D......
 80043bc:	2000 7c00 0000 0000 3800 4400 0400 1800     . .|.....8.D....
 80043cc:	0400 0400 4400 3800 0000 0000 0800 1800     .....D.8........
 80043dc:	2800 2800 4800 7c00 0800 0800 0000 0000     .(.(.H.|........
 80043ec:	7c00 4000 4000 7800 0400 0400 4400 3800     .|.@.@.x.....D.8
 80043fc:	0000 0000 3800 4400 4000 7800 4400 4400     .....8.D.@.x.D.D
 800440c:	4400 3800 0000 0000 7c00 0400 0800 1000     .D.8.....|......
 800441c:	1000 2000 2000 2000 0000 0000 3800 4400     ... . . .....8.D
 800442c:	4400 3800 4400 4400 4400 3800 0000 0000     .D.8.D.D.D.8....
 800443c:	3800 4400 4400 4400 3c00 0400 4400 3800     .8.D.D.D.<...D.8
	...
 8004454:	1000 0000 0000 0000 0000 1000 0000 0000     ................
 8004464:	0000 0000 0000 1000 0000 0000 0000 1000     ................
 8004474:	1000 1000 0000 0000 0c00 3000 4000 3000     ...........0.@.0
 8004484:	0c00 0000 0000 0000 0000 0000 0000 7c00     ...............|
 8004494:	0000 7c00 0000 0000 0000 0000 0000 0000     ...|............
 80044a4:	6000 1800 0400 1800 6000 0000 0000 0000     .`.......`......
 80044b4:	3800 4400 0400 0800 1000 1000 0000 1000     .8.D............
 80044c4:	0000 0000 3800 4400 4c00 5400 5c00 4000     .....8.D.L.T.\.@
 80044d4:	4000 3800 0000 0000 1000 2800 2800 2800     .@.8.......(.(.(
 80044e4:	2800 7c00 4400 4400 0000 0000 7800 4400     .(.|.D.D.....x.D
 80044f4:	4400 7800 4400 4400 4400 7800 0000 0000     .D.x.D.D.D.x....
 8004504:	3800 4400 4000 4000 4000 4000 4400 3800     .8.D.@.@.@.@.D.8
 8004514:	0000 0000 7000 4800 4400 4400 4400 4400     .....p.H.D.D.D.D
 8004524:	4800 7000 0000 0000 7c00 4000 4000 7c00     .H.p.....|.@.@.|
 8004534:	4000 4000 4000 7c00 0000 0000 7c00 4000     .@.@.@.|.....|.@
 8004544:	4000 7800 4000 4000 4000 4000 0000 0000     .@.x.@.@.@.@....
 8004554:	3800 4400 4000 4000 5c00 4400 4400 3800     .8.D.@.@.\.D.D.8
 8004564:	0000 0000 4400 4400 4400 7c00 4400 4400     .....D.D.D.|.D.D
 8004574:	4400 4400 0000 0000 3800 1000 1000 1000     .D.D.....8......
 8004584:	1000 1000 1000 3800 0000 0000 0400 0400     .......8........
 8004594:	0400 0400 0400 0400 4400 3800 0000 0000     .........D.8....
 80045a4:	4400 4800 5000 6000 5000 4800 4800 4400     .D.H.P.`.P.H.H.D
 80045b4:	0000 0000 4000 4000 4000 4000 4000 4000     .....@.@.@.@.@.@
 80045c4:	4000 7c00 0000 0000 4400 6c00 6c00 5400     .@.|.....D.l.l.T
 80045d4:	4400 4400 4400 4400 0000 0000 4400 6400     .D.D.D.D.....D.d
 80045e4:	6400 5400 5400 4c00 4c00 4400 0000 0000     .d.T.T.L.L.D....
 80045f4:	3800 4400 4400 4400 4400 4400 4400 3800     .8.D.D.D.D.D.D.8
 8004604:	0000 0000 7800 4400 4400 4400 7800 4000     .....x.D.D.D.x.@
 8004614:	4000 4000 0000 0000 3800 4400 4400 4400     .@.@.....8.D.D.D
 8004624:	4400 4400 5400 3800 0400 0000 7800 4400     .D.D.T.8.....x.D
 8004634:	4400 4400 7800 4800 4800 4400 0000 0000     .D.D.x.H.H.D....
 8004644:	3800 4400 4000 3000 0800 0400 4400 3800     .8.D.@.0.....D.8
 8004654:	0000 0000 7c00 1000 1000 1000 1000 1000     .....|..........
 8004664:	1000 1000 0000 0000 4400 4400 4400 4400     .........D.D.D.D
 8004674:	4400 4400 4400 3800 0000 0000 4400 4400     .D.D.D.8.....D.D
 8004684:	4400 2800 2800 2800 1000 1000 0000 0000     .D.(.(.(........
 8004694:	4400 4400 5400 5400 5400 6c00 2800 2800     .D.D.T.T.T.l.(.(
 80046a4:	0000 0000 4400 2800 2800 1000 1000 2800     .....D.(.(.....(
 80046b4:	2800 4400 0000 0000 4400 4400 2800 2800     .(.D.....D.D.(.(
 80046c4:	1000 1000 1000 1000 0000 0000 7c00 0400     .............|..
 80046d4:	0800 1000 1000 2000 4000 7c00 0000 0000     ....... .@.|....
 80046e4:	1800 1000 1000 1000 1000 1000 1000 1000     ................
 80046f4:	1000 1800 2000 2000 1000 1000 1000 1000     ..... . ........
 8004704:	0800 0800 0000 0000 3000 1000 1000 1000     .........0......
 8004714:	1000 1000 1000 1000 1000 3000 1000 2800     ...........0...(
 8004724:	2800 4400 0000 0000 0000 0000 0000 0000     .(.D............
	...
 8004744:	0000 fe00 2000 1000 0000 0000 0000 0000     ..... ..........
	...
 8004760:	3800 4400 3c00 4400 4c00 3400 0000 0000     .8.D.<.D.L.4....
 8004770:	4000 4000 5800 6400 4400 4400 6400 5800     .@.@.X.d.D.D.d.X
	...
 8004788:	3800 4400 4000 4000 4400 3800 0000 0000     .8.D.@.@.D.8....
 8004798:	0400 0400 3400 4c00 4400 4400 4c00 3400     .....4.L.D.D.L.4
	...
 80047b0:	3800 4400 7c00 4000 4400 3800 0000 0000     .8.D.|.@.D.8....
 80047c0:	0c00 1000 7c00 1000 1000 1000 1000 1000     .....|..........
	...
 80047d8:	3400 4c00 4400 4400 4c00 3400 0400 7800     .4.L.D.D.L.4...x
 80047e8:	4000 4000 5800 6400 4400 4400 4400 4400     .@.@.X.d.D.D.D.D
 80047f8:	0000 0000 1000 0000 7000 1000 1000 1000     .........p......
 8004808:	1000 1000 0000 0000 1000 0000 7000 1000     .............p..
 8004818:	1000 1000 1000 1000 1000 e000 4000 4000     .............@.@
 8004828:	4800 5000 6000 5000 4800 4400 0000 0000     .H.P.`.P.H.D....
 8004838:	7000 1000 1000 1000 1000 1000 1000 1000     .p..............
	...
 8004850:	7800 5400 5400 5400 5400 5400 0000 0000     .x.T.T.T.T.T....
 8004860:	0000 0000 5800 6400 4400 4400 4400 4400     .....X.d.D.D.D.D
	...
 8004878:	3800 4400 4400 4400 4400 3800 0000 0000     .8.D.D.D.D.8....
 8004888:	0000 0000 5800 6400 4400 4400 6400 5800     .....X.d.D.D.d.X
 8004898:	4000 4000 0000 0000 3400 4c00 4400 4400     .@.@.....4.L.D.D
 80048a8:	4c00 3400 0400 0400 0000 0000 5800 6400     .L.4.........X.d
 80048b8:	4000 4000 4000 4000 0000 0000 0000 0000     .@.@.@.@........
 80048c8:	3800 4400 3000 0800 4400 3800 0000 0000     .8.D.0...D.8....
 80048d8:	2000 2000 7800 2000 2000 2000 2000 1800     . . .x. . . . ..
	...
 80048f0:	4400 4400 4400 4400 4c00 3400 0000 0000     .D.D.D.D.L.4....
 8004900:	0000 0000 4400 4400 2800 2800 2800 1000     .....D.D.(.(.(..
	...
 8004918:	5400 5400 5400 6c00 2800 2800 0000 0000     .T.T.T.l.(.(....
 8004928:	0000 0000 4400 2800 1000 1000 2800 4400     .....D.(.....(.D
	...
 8004940:	4400 4400 2800 2800 1000 1000 1000 6000     .D.D.(.(.......`
 8004950:	0000 0000 7c00 0800 1000 2000 4000 7c00     .....|..... .@.|
 8004960:	0000 0000 1800 1000 1000 1000 2000 2000     ............. . 
 8004970:	1000 1000 1000 1800 1000 1000 1000 1000     ................
 8004980:	1000 1000 1000 1000 1000 1000 3000 1000     .............0..
 8004990:	1000 1000 0800 0800 1000 1000 1000 3000     ...............0
 80049a0:	0000 0000 0000 7400 4c00 0000 0000 0000     .......t.L......
 80049b0:	0000 0000                                   ....

080049b4 <Font11x18>:
	...
 80049d8:	0000 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
 80049e8:	0c00 0c00 0c00 0c00 0000 0c00 0c00 0000     ................
 80049f8:	0000 0000 0000 1b00 1b00 1b00 1b00 1b00     ................
	...
 8004a20:	0000 1980 1980 1980 1980 7fc0 7fc0 1980     ................
 8004a30:	3300 7fc0 7fc0 3300 3300 3300 3300 0000     .3.....3.3.3.3..
 8004a40:	0000 0000 0000 1e00 3f00 7580 6580 7400     .........?.u.e.t
 8004a50:	3c00 1e00 0700 0580 6580 6580 7580 3f00     .<.......e.e.u.?
 8004a60:	1e00 0400 0400 0000 0000 7000 d800 d840     ...........p..@.
 8004a70:	d8c0 d980 7300 0600 0c00 1b80 36c0 66c0     .....s.......6.f
 8004a80:	46c0 06c0 0380 0000 0000 0000 0000 1e00     .F..............
 8004a90:	3f00 3300 3300 3300 1e00 0c00 3cc0 66c0     .?.3.3.3.....<.f
 8004aa0:	6380 6180 6380 3ec0 1c80 0000 0000 0000     .c.a.c.>........
 8004ab0:	0000 0c00 0c00 0c00 0c00 0c00 0000 0000     ................
	...
 8004ad4:	0080 0100 0300 0600 0600 0400 0c00 0c00     ................
 8004ae4:	0c00 0c00 0c00 0c00 0400 0600 0600 0300     ................
 8004af4:	0100 0080 2000 1000 1800 0c00 0c00 0400     ..... ..........
 8004b04:	0600 0600 0600 0600 0600 0600 0400 0c00     ................
 8004b14:	0c00 1800 1000 2000 0000 0c00 2d00 3f00     ....... .....-.?
 8004b24:	1e00 3300 0000 0000 0000 0000 0000 0000     ...3............
	...
 8004b44:	0000 0c00 0c00 0c00 0c00 ffc0 ffc0 0c00     ................
 8004b54:	0c00 0c00 0c00 0000 0000 0000 0000 0000     ................
	...
 8004b7c:	0000 0c00 0c00 0400 0400 0800 0000 0000     ................
	...
 8004b98:	0000 1e00 1e00 0000 0000 0000 0000 0000     ................
	...
 8004bc4:	0000 0c00 0c00 0000 0000 0000 0000 0300     ................
 8004bd4:	0300 0300 0600 0600 0600 0600 0c00 0c00     ................
 8004be4:	0c00 0c00 1800 1800 1800 0000 0000 0000     ................
 8004bf4:	0000 1e00 3f00 3300 6180 6180 6180 6d80     .....?.3.a.a.a.m
 8004c04:	6d80 6180 6180 6180 3300 3f00 1e00 0000     .m.a.a.a.3.?....
 8004c14:	0000 0000 0000 0600 0e00 1e00 3600 2600     .............6.&
 8004c24:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 8004c34:	0600 0000 0000 0000 0000 1e00 3f00 7380     .............?.s
 8004c44:	6180 6180 0180 0300 0600 0c00 1800 3000     .a.a...........0
 8004c54:	6000 7f80 7f80 0000 0000 0000 0000 1c00     .`..............
 8004c64:	3e00 6300 6300 0300 0e00 0e00 0300 0180     .>.c.c..........
 8004c74:	0180 6180 7380 3f00 1e00 0000 0000 0000     ...a.s.?........
 8004c84:	0000 0600 0e00 0e00 1e00 1e00 1600 3600     ...............6
 8004c94:	3600 6600 7f80 7f80 0600 0600 0600 0000     .6.f............
 8004ca4:	0000 0000 0000 7f00 7f00 6000 6000 6000     ...........`.`.`
 8004cb4:	6e00 7f00 6380 0180 0180 6180 7380 3f00     .n...c.....a.s.?
 8004cc4:	1e00 0000 0000 0000 0000 1e00 3f00 3380     .............?.3
 8004cd4:	6180 6000 6e00 7f00 7380 6180 6180 6180     .a.`.n...s.a.a.a
 8004ce4:	3380 3f00 1e00 0000 0000 0000 0000 7f80     .3.?............
 8004cf4:	7f80 0180 0300 0300 0600 0600 0c00 0c00     ................
 8004d04:	0c00 0800 1800 1800 1800 0000 0000 0000     ................
 8004d14:	0000 1e00 3f00 6380 6180 6180 2100 1e00     .....?.c.a.a.!..
 8004d24:	3f00 6180 6180 6180 6180 3f00 1e00 0000     .?.a.a.a.a.?....
 8004d34:	0000 0000 0000 1e00 3f00 7300 6180 6180     .........?.s.a.a
 8004d44:	6180 7380 3f80 1d80 0180 6180 7300 3f00     .a.s.?.....a.s.?
 8004d54:	1e00 0000 0000 0000 0000 0000 0000 0000     ................
 8004d64:	0000 0c00 0c00 0000 0000 0000 0000 0000     ................
 8004d74:	0000 0c00 0c00 0000 0000 0000 0000 0000     ................
	...
 8004d8c:	0c00 0c00 0000 0000 0000 0000 0000 0c00     ................
 8004d9c:	0c00 0400 0400 0800 0000 0000 0000 0000     ................
 8004dac:	0080 0380 0e00 3800 6000 3800 0e00 0380     .......8.`.8....
 8004dbc:	0080 0000 0000 0000 0000 0000 0000 0000     ................
 8004dcc:	0000 0000 0000 7f80 7f80 0000 0000 7f80     ................
 8004ddc:	7f80 0000 0000 0000 0000 0000 0000 0000     ................
	...
 8004df4:	4000 7000 1c00 0700 0180 0700 1c00 7000     .@.p...........p
 8004e04:	4000 0000 0000 0000 0000 0000 0000 1f00     .@..............
 8004e14:	3f80 71c0 60c0 00c0 01c0 0380 0700 0e00     .?.q.`..........
 8004e24:	0c00 0c00 0000 0c00 0c00 0000 0000 0000     ................
 8004e34:	0000 1e00 3f00 3180 7180 6380 6f80 6d80     .....?.1.q.c.o.m
 8004e44:	6d80 6f80 6780 6000 3200 3e00 1c00 0000     .m.o.g.`.2.>....
 8004e54:	0000 0000 0000 0e00 0e00 1b00 1b00 1b00     ................
 8004e64:	1b00 3180 3180 3f80 3f80 3180 60c0 60c0     ...1.1.?.?.1.`.`
 8004e74:	60c0 0000 0000 0000 0000 7c00 7e00 6300     .`.........|.~.c
 8004e84:	6300 6300 6300 7e00 7e00 6300 6180 6180     .c.c.c.~.~.c.a.a
 8004e94:	6380 7f00 7e00 0000 0000 0000 0000 1e00     .c...~..........
 8004ea4:	3f00 3180 6180 6000 6000 6000 6000 6000     .?.1.a.`.`.`.`.`
 8004eb4:	6000 6180 3180 3f00 1e00 0000 0000 0000     .`.a.1.?........
 8004ec4:	0000 7c00 7f00 6300 6380 6180 6180 6180     ...|...c.c.a.a.a
 8004ed4:	6180 6180 6180 6300 6300 7e00 7c00 0000     .a.a.a.c.c.~.|..
 8004ee4:	0000 0000 0000 7f80 7f80 6000 6000 6000     ...........`.`.`
 8004ef4:	6000 7f00 7f00 6000 6000 6000 6000 7f80     .`.....`.`.`.`..
 8004f04:	7f80 0000 0000 0000 0000 7f80 7f80 6000     ...............`
 8004f14:	6000 6000 6000 7f00 7f00 6000 6000 6000     .`.`.`.....`.`.`
 8004f24:	6000 6000 6000 0000 0000 0000 0000 1e00     .`.`.`..........
 8004f34:	3f00 3180 6180 6000 6000 6000 6380 6380     .?.1.a.`.`.`.c.c
 8004f44:	6180 6180 3180 3f80 1e00 0000 0000 0000     .a.a.1.?........
 8004f54:	0000 6180 6180 6180 6180 6180 6180 7f80     ...a.a.a.a.a.a..
 8004f64:	7f80 6180 6180 6180 6180 6180 6180 0000     ...a.a.a.a.a.a..
 8004f74:	0000 0000 0000 3f00 3f00 0c00 0c00 0c00     .......?.?......
 8004f84:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 3f00     ...............?
 8004f94:	3f00 0000 0000 0000 0000 0180 0180 0180     .?..............
 8004fa4:	0180 0180 0180 0180 0180 0180 6180 6180     .............a.a
 8004fb4:	7380 3f00 1e00 0000 0000 0000 0000 60c0     .s.?...........`
 8004fc4:	6180 6300 6600 6600 6c00 7800 7c00 6600     .a.c.f.f.l.x.|.f
 8004fd4:	6600 6300 6180 6180 60c0 0000 0000 0000     .f.c.a.a.`......
 8004fe4:	0000 6000 6000 6000 6000 6000 6000 6000     ...`.`.`.`.`.`.`
 8004ff4:	6000 6000 6000 6000 6000 7f80 7f80 0000     .`.`.`.`.`......
 8005004:	0000 0000 0000 71c0 71c0 7bc0 7ac0 6ac0     .......q.q.{.z.j
 8005014:	6ac0 6ec0 64c0 60c0 60c0 60c0 60c0 60c0     .j.n.d.`.`.`.`.`
 8005024:	60c0 0000 0000 0000 0000 7180 7180 7980     .`.........q.q.y
 8005034:	7980 7980 6d80 6d80 6d80 6580 6780 6780     .y.y.m.m.m.e.g.g
 8005044:	6780 6380 6380 0000 0000 0000 0000 1e00     .g.c.c..........
 8005054:	3f00 3300 6180 6180 6180 6180 6180 6180     .?.3.a.a.a.a.a.a
 8005064:	6180 6180 3300 3f00 1e00 0000 0000 0000     .a.a.3.?........
 8005074:	0000 7e00 7f00 6380 6180 6180 6180 6380     ...~...c.a.a.a.c
 8005084:	7f00 7e00 6000 6000 6000 6000 6000 0000     ...~.`.`.`.`.`..
 8005094:	0000 0000 0000 1e00 3f00 3300 6180 6180     .........?.3.a.a
 80050a4:	6180 6180 6180 6180 6580 6780 3300 3f80     .a.a.a.a.e.g.3.?
 80050b4:	1e40 0000 0000 0000 0000 7e00 7f00 6380     @..........~...c
 80050c4:	6180 6180 6380 7f00 7e00 6600 6300 6300     .a.a.c...~.f.c.c
 80050d4:	6180 6180 60c0 0000 0000 0000 0000 0e00     .a.a.`..........
 80050e4:	1f00 3180 3180 3000 3800 1e00 0700 0380     ...1.1.0.8......
 80050f4:	6180 6180 3180 3f00 1e00 0000 0000 0000     .a.a.1.?........
 8005104:	0000 ffc0 ffc0 0c00 0c00 0c00 0c00 0c00     ................
 8005114:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0000     ................
 8005124:	0000 0000 0000 6180 6180 6180 6180 6180     .......a.a.a.a.a
 8005134:	6180 6180 6180 6180 6180 6180 7380 3f00     .a.a.a.a.a.a.s.?
 8005144:	1e00 0000 0000 0000 0000 60c0 60c0 60c0     ...........`.`.`
 8005154:	3180 3180 3180 1b00 1b00 1b00 1b00 0e00     .1.1.1..........
 8005164:	0e00 0e00 0400 0000 0000 0000 0000 c0c0     ................
 8005174:	c0c0 c0c0 c0c0 c0c0 ccc0 4c80 4c80 5e80     ...........L.L.^
 8005184:	5280 5280 7380 6180 6180 0000 0000 0000     .R.R.s.a.a......
 8005194:	0000 c0c0 6080 6180 3300 3b00 1e00 0c00     .....`.a.3.;....
 80051a4:	0c00 1e00 1f00 3b00 7180 6180 c0c0 0000     .......;.q.a....
 80051b4:	0000 0000 0000 c0c0 6180 6180 3300 3300     .........a.a.3.3
 80051c4:	1e00 1e00 0c00 0c00 0c00 0c00 0c00 0c00     ................
 80051d4:	0c00 0000 0000 0000 0000 3f80 3f80 0180     ...........?.?..
 80051e4:	0300 0300 0600 0c00 0c00 1800 1800 3000     ...............0
 80051f4:	6000 7f80 7f80 0000 0000 0000 0f00 0f00     .`..............
 8005204:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
 8005214:	0c00 0c00 0c00 0c00 0c00 0c00 0f00 0f00     ................
 8005224:	0000 1800 1800 1800 0c00 0c00 0c00 0c00     ................
 8005234:	0600 0600 0600 0600 0300 0300 0300 0000     ................
 8005244:	0000 0000 1e00 1e00 0600 0600 0600 0600     ................
 8005254:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 8005264:	0600 0600 1e00 1e00 0000 0c00 0c00 1e00     ................
 8005274:	1200 3300 3300 6180 6180 0000 0000 0000     ...3.3.a.a......
	...
 80052b0:	ffe0 0000 0000 3800 1800 0c00 0000 0000     .......8........
	...
 80052e0:	0000 1f00 3f80 6180 0180 1f80 3f80 6180     .....?.a.....?.a
 80052f0:	6380 7f80 38c0 0000 0000 0000 0000 6000     .c...8.........`
 8005300:	6000 6000 6000 6e00 7f00 7380 6180 6180     .`.`.`.n...s.a.a
 8005310:	6180 6180 7380 7f00 6e00 0000 0000 0000     .a.a.s...n......
	...
 8005328:	0000 1e00 3f00 7380 6180 6000 6000 6180     .....?.s.a.`.`.a
 8005338:	7380 3f00 1e00 0000 0000 0000 0000 0180     .s.?............
 8005348:	0180 0180 0180 1d80 3f80 7380 6180 6180     .........?.s.a.a
 8005358:	6180 6180 7380 3f80 1d80 0000 0000 0000     .a.a.s.?........
	...
 8005370:	0000 1e00 3f00 7300 6180 7f80 7f80 6000     .....?.s.a.....`
 8005380:	7180 3f00 1e00 0000 0000 0000 0000 07c0     .q.?............
 8005390:	0fc0 0c00 0c00 7f80 7f80 0c00 0c00 0c00     ................
 80053a0:	0c00 0c00 0c00 0c00 0c00 0000 0000 0000     ................
	...
 80053b8:	1d80 3f80 7380 6180 6180 6180 6180 7380     ...?.s.a.a.a.a.s
 80053c8:	3f80 1d80 0180 6380 7f00 3e00 0000 6000     .?.....c...>...`
 80053d8:	6000 6000 6000 6f00 7f80 7180 6180 6180     .`.`.`.o...q.a.a
 80053e8:	6180 6180 6180 6180 6180 0000 0000 0000     .a.a.a.a.a......
 80053f8:	0000 0600 0600 0000 0000 3e00 3e00 0600     ...........>.>..
 8005408:	0600 0600 0600 0600 0600 0600 0600 0000     ................
 8005418:	0000 0000 0600 0600 0000 0000 3e00 3e00     .............>.>
 8005428:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 8005438:	0600 4600 7e00 3c00 0000 6000 6000 6000     ...F.~.<...`.`.`
 8005448:	6000 6180 6300 6600 6c00 7c00 7600 6300     .`.a.c.f.l.|.v.c
 8005458:	6300 6180 60c0 0000 0000 0000 0000 3e00     .c.a.`.........>
 8005468:	3e00 0600 0600 0600 0600 0600 0600 0600     .>..............
 8005478:	0600 0600 0600 0600 0600 0000 0000 0000     ................
	...
 8005490:	0000 dd80 ffc0 cec0 ccc0 ccc0 ccc0 ccc0     ................
 80054a0:	ccc0 ccc0 ccc0 0000 0000 0000 0000 0000     ................
 80054b0:	0000 0000 0000 6f00 7f80 7180 6180 6180     .......o...q.a.a
 80054c0:	6180 6180 6180 6180 6180 0000 0000 0000     .a.a.a.a.a......
	...
 80054d8:	0000 1e00 3f00 7380 6180 6180 6180 6180     .....?.s.a.a.a.a
 80054e8:	7380 3f00 1e00 0000 0000 0000 0000 0000     .s.?............
 80054f8:	0000 0000 6e00 7f00 7380 6180 6180 6180     .....n...s.a.a.a
 8005508:	6180 7380 7f00 6e00 6000 6000 6000 6000     .a.s...n.`.`.`.`
	...
 8005520:	1d80 3f80 7380 6180 6180 6180 6180 7380     ...?.s.a.a.a.a.s
 8005530:	3f80 1d80 0180 0180 0180 0180 0000 0000     .?..............
 8005540:	0000 0000 0000 6700 3f80 3900 3000 3000     .......g.?.9.0.0
 8005550:	3000 3000 3000 3000 3000 0000 0000 0000     .0.0.0.0.0......
	...
 8005568:	0000 1e00 3f80 6180 6000 7f00 3f80 0180     .....?.a.`...?..
 8005578:	6180 7f00 1e00 0000 0000 0000 0000 0000     .a..............
 8005588:	0800 1800 1800 7f00 7f00 1800 1800 1800     ................
 8005598:	1800 1800 1800 1f80 0f80 0000 0000 0000     ................
	...
 80055b0:	0000 6180 6180 6180 6180 6180 6180 6180     ...a.a.a.a.a.a.a
 80055c0:	6380 7f80 3d80 0000 0000 0000 0000 0000     .c...=..........
 80055d0:	0000 0000 0000 60c0 3180 3180 3180 1b00     .......`.1.1.1..
 80055e0:	1b00 1b00 0e00 0e00 0600 0000 0000 0000     ................
	...
 80055f8:	0000 dd80 dd80 dd80 5500 5500 5500 7700     .........U.U.U.w
 8005608:	7700 2200 2200 0000 0000 0000 0000 0000     .w."."..........
 8005618:	0000 0000 0000 6180 3300 3300 1e00 0c00     .......a.3.3....
 8005628:	0c00 1e00 3300 3300 6180 0000 0000 0000     .....3.3.a......
	...
 8005640:	6180 6180 3180 3300 3300 1b00 1b00 1b00     .a.a.1.3.3......
 8005650:	0e00 0e00 0e00 1c00 7c00 7000 0000 0000     .........|.p....
 8005660:	0000 0000 0000 7fc0 7fc0 0180 0300 0600     ................
 8005670:	0c00 1800 3000 7fc0 7fc0 0000 0000 0000     .....0..........
 8005680:	0380 0780 0600 0600 0600 0600 0600 0e00     ................
 8005690:	1c00 1c00 0e00 0600 0600 0600 0600 0600     ................
 80056a0:	0780 0380 0600 0600 0600 0600 0600 0600     ................
 80056b0:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 80056c0:	0600 0600 0600 0600 3800 3c00 0c00 0c00     .........8.<....
 80056d0:	0c00 0c00 0c00 0e00 0700 0700 0e00 0c00     ................
 80056e0:	0c00 0c00 0c00 0c00 3c00 3800 0000 0000     .........<.8....
	...
 80056f8:	0000 3880 7f80 4700 0000 0000 0000 0000     ...8...G........
	...

08005710 <Font16x26>:
	...
 8005744:	03e0 03e0 03e0 03e0 03e0 03e0 03e0 03e0     ................
 8005754:	03c0 03c0 01c0 01c0 01c0 01c0 01c0 0000     ................
 8005764:	0000 0000 03e0 03e0 03e0 0000 0000 0000     ................
 8005774:	0000 0000 1e3c 1e3c 1e3c 1e3c 1e3c 1e3c     ....<.<.<.<.<.<.
 8005784:	1e3c 0000 0000 0000 0000 0000 0000 0000     <...............
	...
 80057ac:	01ce 03ce 03de 039e 039c 079c 3fff 7fff     .............?..
 80057bc:	0738 0f38 0f78 0f78 0e78 ffff ffff 1ef0     8.8.x.x.x.......
 80057cc:	1cf0 1ce0 3ce0 3de0 39e0 0000 0000 0000     .....<.=.9......
 80057dc:	0000 0000 03fc 0ffe 1fee 1ee0 1ee0 1ee0     ................
 80057ec:	1ee0 1fe0 0fe0 07e0 03f0 01fc 01fe 01fe     ................
 80057fc:	01fe 01fe 01fe 01fe 3dfe 3ffc 0ff0 01e0     .........=.?....
 800580c:	01e0 0000 0000 0000 3e03 f707 e78f e78e     .........>......
 800581c:	e39e e3bc e7b8 e7f8 f7f0 3fe0 01c0 03ff     ...........?....
 800582c:	07ff 07f3 0ff3 1ef3 3cf3 38f3 78f3 f07f     .........<.8.x..
 800583c:	e03f 0000 0000 0000 0000 0000 07e0 0ff8     ?...............
 800584c:	0f78 1f78 1f78 1f78 0f78 0ff0 0fe0 1f80     x.x.x.x.x.......
 800585c:	7fc3 fbc3 f3e7 f1f7 f0f7 f0ff f07f f83e     ..............>.
 800586c:	7c7f 3fff 1fef 0000 0000 0000 0000 0000     .|.?............
 800587c:	03e0 03e0 03e0 03e0 03e0 03c0 01c0 0000     ................
	...
 80058b0:	003f 007c 01f0 01e0 03c0 07c0 0780 0780     ?.|.............
 80058c0:	0f80 0f00 0f00 0f00 0f00 0f00 0f00 0f80     ................
 80058d0:	0780 0780 07c0 03c0 01e0 01f0 007c 003f     ............|.?.
 80058e0:	000f 0000 7e00 1f00 07c0 03c0 01e0 01f0     .....~..........
 80058f0:	00f0 00f0 00f8 0078 0078 0078 0078 0078     ......x.x.x.x.x.
 8005900:	0078 00f8 00f0 00f0 01f0 01e0 03c0 07c0     x...............
 8005910:	1f00 7e00 7800 0000 03e0 03c0 01c0 39ce     ...~.x.........9
 8005920:	3fff 3f7f 0320 0370 07f8 0f78 1f3c 0638     .?.? .p...x.<.8.
	...
 8005958:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 ffff     ................
 8005968:	ffff 01c0 01c0 01c0 01c0 01c0 01c0 0000     ................
	...
 80059a0:	0000 03e0 03e0 03e0 03e0 01e0 01e0 01e0     ................
 80059b0:	01c0 0380 0000 0000 0000 0000 0000 0000     ................
	...
 80059c8:	0000 3ffe 3ffe 0000 0000 0000 0000 0000     ...?.?..........
	...
 8005a08:	0000 03e0 03e0 03e0 03e0 0000 0000 0000     ................
 8005a18:	0000 0000 000f 000f 001e 001e 003c 003c     ............<.<.
 8005a28:	0078 0078 00f0 00f0 01e0 01e0 03c0 03c0     x.x.............
 8005a38:	0780 0780 0f00 0f00 1e00 1e00 3c00 3c00     .............<.<
 8005a48:	7800 7800 f000 0000 07f0 0ff8 1f7c 3e3e     .x.x........|.>>
 8005a58:	3c1e 7c1f 7c1f 780f 780f 780f 780f 780f     .<.|.|.x.x.x.x.x
 8005a68:	780f 780f 7c1f 7c1f 3c1e 3e3e 1f7c 0ff8     .x.x.|.|.<>>|...
 8005a78:	07f0 0000 0000 0000 0000 0000 00f0 07f0     ................
 8005a88:	3ff0 3ff0 01f0 01f0 01f0 01f0 01f0 01f0     .?.?............
 8005a98:	01f0 01f0 01f0 01f0 01f0 01f0 01f0 01f0     ................
 8005aa8:	01f0 3fff 3fff 0000 0000 0000 0000 0000     ...?.?..........
 8005ab8:	0fe0 3ff8 3c7c 003c 003e 003e 003e 003c     ...?|<<.>.>.>.<.
 8005ac8:	003c 007c 00f8 01f0 03e0 07c0 0780 0f00     <.|.............
 8005ad8:	1e00 3e00 3c00 3ffe 3ffe 0000 0000 0000     ...>.<.?.?......
 8005ae8:	0000 0000 0ff0 1ff8 1c7c 003e 003e 003e     ........|.>.>.>.
 8005af8:	003c 003c 00f8 0ff0 0ff8 007c 003e 001e     <.<.......|.>...
 8005b08:	001e 001e 001e 003e 1c7c 1ff8 1fe0 0000     ......>.|.......
	...
 8005b20:	0078 00f8 00f8 01f8 03f8 07f8 07f8 0f78     x.............x.
 8005b30:	1e78 1e78 3c78 7878 7878 ffff ffff 0078     x.x.x<xxxx....x.
 8005b40:	0078 0078 0078 0078 0078 0000 0000 0000     x.x.x.x.x.......
 8005b50:	0000 0000 1ffc 1ffc 1ffc 1e00 1e00 1e00     ................
 8005b60:	1e00 1e00 1fe0 1ff8 00fc 007c 003e 003e     ..........|.>.>.
 8005b70:	001e 003e 003e 003c 1c7c 1ff8 1fe0 0000     ..>.>.<.|.......
	...
 8005b88:	01fc 07fe 0f8e 1f00 1e00 3e00 3c00 3c00     ...........>.<.<
 8005b98:	3df8 3ffc 7f3e 7e1f 3c0f 3c0f 3c0f 3c0f     .=.?>..~.<.<.<.<
 8005ba8:	3e0f 1e1f 1f3e 0ffc 03f0 0000 0000 0000     .>..>...........
 8005bb8:	0000 0000 3fff 3fff 3fff 000f 001e 001e     .....?.?.?......
 8005bc8:	003c 0038 0078 00f0 00f0 01e0 01e0 03c0     <.8.x...........
 8005bd8:	03c0 0780 0f80 0f80 0f00 1f00 1f00 0000     ................
	...
 8005bf0:	07f8 0ffc 1f3e 1e1e 3e1e 3e1e 1e1e 1f3c     ....>....>.>..<.
 8005c00:	0ff8 07f0 0ff8 1efc 3e3e 3c1f 7c1f 7c0f     ........>>.<.|.|
 8005c10:	7c0f 3c1f 3f3e 1ffc 07f0 0000 0000 0000     .|.<>?..........
 8005c20:	0000 0000 07f0 0ff8 1e7c 3c3e 3c1e 7c1f     ........|.><.<.|
 8005c30:	7c1f 7c1f 7c1f 3c1f 3e3f 1fff 07ef 001f     .|.|.|.<?>......
 8005c40:	001e 001e 003e 003c 38f8 3ff0 1fe0 0000     ....>.<..8.?....
	...
 8005c64:	03e0 03e0 03e0 03e0 0000 0000 0000 0000     ................
 8005c74:	0000 0000 0000 03e0 03e0 03e0 03e0 0000     ................
	...
 8005c98:	03e0 03e0 03e0 03e0 0000 0000 0000 0000     ................
 8005ca8:	0000 0000 0000 03e0 03e0 03e0 03e0 01e0     ................
 8005cb8:	01e0 01e0 03c0 0380 0000 0000 0000 0000     ................
 8005cc8:	0000 0000 0003 000f 003f 00fc 03f0 0fc0     ........?.......
 8005cd8:	3f00 fe00 3f00 0fc0 03f0 00fc 003f 000f     .?...?......?...
 8005ce8:	0003 0000 0000 0000 0000 0000 0000 0000     ................
	...
 8005d08:	ffff ffff 0000 0000 0000 ffff ffff 0000     ................
	...
 8005d34:	e000 f800 7e00 1f80 07e0 01f8 007e 001f     .....~......~...
 8005d44:	007e 01f8 07e0 1f80 7e00 f800 e000 0000     ~........~......
	...
 8005d5c:	1ff0 3ffc 383e 381f 381f 001e 001e 003c     ...?>8.8.8....<.
 8005d6c:	0078 00f0 01e0 03c0 03c0 07c0 07c0 0000     x...............
 8005d7c:	0000 0000 07c0 07c0 07c0 0000 0000 0000     ................
 8005d8c:	0000 0000 03f8 0ffe 1f1e 3e0f 3c7f 78ff     ...........>.<.x
 8005d9c:	79ef 73c7 f3c7 f38f f38f f38f f39f f39f     .y.s............
 8005dac:	73ff 7bff 79f7 3c00 1f1c 0ffc 03f8 0000     .s.{.y.<........
	...
 8005dc8:	0000 03e0 03e0 07f0 07f0 07f0 0f78 0f78     ............x.x.
 8005dd8:	0e7c 1e3c 1e3c 3c3e 3ffe 3fff 781f 780f     |.<.<.><.?.?.x.x
 8005de8:	f00f f007 f007 0000 0000 0000 0000 0000     ................
 8005df8:	0000 0000 0000 3ff8 3ffc 3c3e 3c1e 3c1e     .......?.?><.<.<
 8005e08:	3c1e 3c3e 3c7c 3ff0 3ff8 3c7e 3c1f 3c1f     .<><|<.?.?~<.<.<
 8005e18:	3c0f 3c0f 3c1f 3ffe 3ff8 0000 0000 0000     .<.<.<.?.?......
	...
 8005e30:	0000 01ff 07ff 1f87 3e00 3c00 7c00 7800     .........>.<.|.x
 8005e40:	7800 7800 7800 7800 7c00 7c00 3e00 3f00     .x.x.x.x.|.|.>.?
 8005e50:	1f83 07ff 01ff 0000 0000 0000 0000 0000     ................
 8005e60:	0000 0000 0000 7ff0 7ffc 787e 781f 781f     ..........~x.x.x
 8005e70:	780f 780f 780f 780f 780f 780f 780f 780f     .x.x.x.x.x.x.x.x
 8005e80:	781f 781e 787e 7ff8 7fe0 0000 0000 0000     .x.x~x..........
	...
 8005e98:	0000 3fff 3fff 3e00 3e00 3e00 3e00 3e00     ...?.?.>.>.>.>.>
 8005ea8:	3e00 3ffe 3ffe 3e00 3e00 3e00 3e00 3e00     .>.?.?.>.>.>.>.>
 8005eb8:	3e00 3fff 3fff 0000 0000 0000 0000 0000     .>.?.?..........
 8005ec8:	0000 0000 0000 1fff 1fff 1e00 1e00 1e00     ................
 8005ed8:	1e00 1e00 1e00 1fff 1fff 1e00 1e00 1e00     ................
 8005ee8:	1e00 1e00 1e00 1e00 1e00 0000 0000 0000     ................
	...
 8005f00:	0000 03fe 0fff 1f87 3e00 7c00 7c00 7800     .........>.|.|.x
 8005f10:	f800 f800 f87f f87f 780f 7c0f 7c0f 3e0f     .........x.|.|.>
 8005f20:	1f8f 0fff 03fe 0000 0000 0000 0000 0000     ................
 8005f30:	0000 0000 0000 7c1f 7c1f 7c1f 7c1f 7c1f     .......|.|.|.|.|
 8005f40:	7c1f 7c1f 7c1f 7fff 7fff 7c1f 7c1f 7c1f     .|.|.|.....|.|.|
 8005f50:	7c1f 7c1f 7c1f 7c1f 7c1f 0000 0000 0000     .|.|.|.|.|......
	...
 8005f68:	0000 3fff 3fff 03e0 03e0 03e0 03e0 03e0     ...?.?..........
 8005f78:	03e0 03e0 03e0 03e0 03e0 03e0 03e0 03e0     ................
 8005f88:	03e0 3fff 3fff 0000 0000 0000 0000 0000     ...?.?..........
 8005f98:	0000 0000 0000 1ffc 1ffc 007c 007c 007c     ..........|.|.|.
 8005fa8:	007c 007c 007c 007c 007c 007c 007c 007c     |.|.|.|.|.|.|.|.
 8005fb8:	0078 0078 38f8 3ff0 3fc0 0000 0000 0000     x.x..8.?.?......
	...
 8005fd0:	0000 3c1f 3c1e 3c3c 3c78 3cf0 3de0 3fe0     ...<.<<<x<.<.=.?
 8005fe0:	3fc0 3f80 3fc0 3fe0 3df0 3cf0 3c78 3c7c     .?.?.?.?.=.<x<|<
 8005ff0:	3c3e 3c1f 3c0f 0000 0000 0000 0000 0000     ><.<.<..........
 8006000:	0000 0000 0000 3e00 3e00 3e00 3e00 3e00     .......>.>.>.>.>
 8006010:	3e00 3e00 3e00 3e00 3e00 3e00 3e00 3e00     .>.>.>.>.>.>.>.>
 8006020:	3e00 3e00 3e00 3fff 3fff 0000 0000 0000     .>.>.>.?.?......
	...
 8006038:	0000 f81f fc1f fc1f fe3f fe3f fe3f ff7f     ........?.?.?...
 8006048:	ff77 ff77 f7f7 f7e7 f3e7 f3e7 f3c7 f007     w.w.............
 8006058:	f007 f007 f007 0000 0000 0000 0000 0000     ................
 8006068:	0000 0000 0000 7c0f 7c0f 7e0f 7f0f 7f0f     .......|.|.~....
 8006078:	7f8f 7f8f 7fcf 7bef 79ef 79ff 78ff 78ff     .......{.y.y.x.x
 8006088:	787f 783f 783f 781f 781f 0000 0000 0000     .x?x?x.x.x......
	...
 80060a0:	0000 07f0 1ffc 3e3e 7c1f 780f 780f f80f     ......>>.|.x.x..
 80060b0:	f80f f80f f80f f80f f80f 780f 780f 7c1f     ...........x.x.|
 80060c0:	3e3e 1ffc 07f0 0000 0000 0000 0000 0000     >>..............
 80060d0:	0000 0000 0000 3ffc 3fff 3e1f 3e0f 3e0f     .......?.?.>.>.>
 80060e0:	3e0f 3e0f 3e1f 3e3f 3ffc 3ff0 3e00 3e00     .>.>.>?>.?.?.>.>
 80060f0:	3e00 3e00 3e00 3e00 3e00 0000 0000 0000     .>.>.>.>.>......
	...
 8006108:	0000 07f0 1ffc 3e3e 7c1f 780f 780f f80f     ......>>.|.x.x..
 8006118:	f80f f80f f80f f80f f80f 780f 780f 7c1f     ...........x.x.|
 8006128:	3e3e 1ffc 07f8 007c 003f 000f 0003 0000     >>....|.?.......
 8006138:	0000 0000 0000 3ff0 3ffc 3c7e 3c3e 3c1e     .......?.?~<><.<
 8006148:	3c1e 3c3e 3c3c 3cfc 3ff0 3fe0 3df0 3cf8     .<><<<.<.?.?.=.<
 8006158:	3c7c 3c3e 3c1e 3c1f 3c0f 0000 0000 0000     |<><.<.<.<......
	...
 8006170:	0000 07fc 1ffe 3e0e 3c00 3c00 3c00 3e00     .......>.<.<.<.>
 8006180:	1fc0 0ff8 03fe 007f 001f 000f 000f 201f     ............... 
 8006190:	3c3e 3ffc 1ff0 0000 0000 0000 0000 0000     ><.?............
 80061a0:	0000 0000 0000 ffff ffff 03e0 03e0 03e0     ................
 80061b0:	03e0 03e0 03e0 03e0 03e0 03e0 03e0 03e0     ................
 80061c0:	03e0 03e0 03e0 03e0 03e0 0000 0000 0000     ................
	...
 80061d8:	0000 7c0f 7c0f 7c0f 7c0f 7c0f 7c0f 7c0f     ...|.|.|.|.|.|.|
 80061e8:	7c0f 7c0f 7c0f 7c0f 7c0f 7c0f 3c1e 3c1e     .|.|.|.|.|.|.<.<
 80061f8:	3e3e 1ffc 07f0 0000 0000 0000 0000 0000     >>..............
 8006208:	0000 0000 0000 f007 f007 f807 780f 7c0f     .............x.|
 8006218:	3c1e 3c1e 3e1e 1e3c 1f3c 1f78 0f78 0ff8     .<.<.><.<.x.x...
 8006228:	07f0 07f0 07f0 03e0 03e0 0000 0000 0000     ................
	...
 8006240:	0000 e003 f003 f003 f007 f3e7 f3e7 f3e7     ................
 8006250:	73e7 7bf7 7ff7 7fff 7f7f 7f7f 7f7e 3f7e     .s.{........~.~?
 8006260:	3e3e 3e3e 3e3e 0000 0000 0000 0000 0000     >>>>>>..........
 8006270:	0000 0000 0000 f807 7c0f 3e1e 3e3e 1f3c     .........|.>>><.
 8006280:	0ff8 07f0 07e0 03e0 03e0 07f0 0ff8 0f7c     ..............|.
 8006290:	1e7c 3c3e 781f 780f f00f 0000 0000 0000     |.><.x.x........
	...
 80062a8:	0000 f807 7807 7c0f 3c1e 3e1e 1f3c 0f78     .....x.|.<.><.x.
 80062b8:	0ff8 07f0 03e0 03e0 03e0 03e0 03e0 03e0     ................
 80062c8:	03e0 03e0 03e0 0000 0000 0000 0000 0000     ................
 80062d8:	0000 0000 0000 7fff 7fff 000f 001f 003e     ..............>.
 80062e8:	007c 00f8 00f0 01e0 03e0 07c0 0f80 0f00     |...............
 80062f8:	1e00 3e00 7c00 7fff 7fff 0000 0000 0000     ...>.|..........
 8006308:	0000 0000 07ff 0780 0780 0780 0780 0780     ................
 8006318:	0780 0780 0780 0780 0780 0780 0780 0780     ................
 8006328:	0780 0780 0780 0780 0780 0780 0780 0780     ................
 8006338:	0780 07ff 07ff 0000 7800 7800 3c00 3c00     .........x.x.<.<
 8006348:	1e00 1e00 0f00 0f00 0780 0780 03c0 03c0     ................
 8006358:	01e0 01e0 00f0 00f0 0078 0078 003c 003c     ........x.x.<.<.
 8006368:	001e 001e 000f 000f 0007 0000 7ff0 00f0     ................
 8006378:	00f0 00f0 00f0 00f0 00f0 00f0 00f0 00f0     ................
 8006388:	00f0 00f0 00f0 00f0 00f0 00f0 00f0 00f0     ................
 8006398:	00f0 00f0 00f0 00f0 00f0 7ff0 7ff0 0000     ................
 80063a8:	00c0 01c0 01c0 03e0 03e0 07f0 07f0 0778     ..............x.
 80063b8:	0f78 0f38 1e3c 1e3c 3c1e 3c1e 380f 780f     x.8.<.<..<.<.8.x
 80063c8:	7807 0000 0000 0000 0000 0000 0000 0000     .x..............
	...
 8006404:	0000 ffff ffff 0000 0000 0000 00f0 0000     ................
	...
 8006450:	0ff8 3ffc 3c7c 003e 003e 003e 07fe 1ffe     ...?|<>.>.>.....
 8006460:	3e3e 7c3e 783e 7c3e 7c7e 3fff 1fcf 0000     >>>|>x>|~|.?....
	...
 8006478:	3c00 3c00 3c00 3c00 3c00 3c00 3df8 3ffe     .<.<.<.<.<.<.=.?
 8006488:	3f3e 3e1f 3c0f 3c0f 3c0f 3c0f 3c0f 3c0f     >?.>.<.<.<.<.<.<
 8006498:	3c1f 3c1e 3f3e 3ffc 3bf0 0000 0000 0000     .<.<>?.?.;......
	...
 80064b8:	03fe 0fff 1f87 3e00 3e00 3c00 7c00 7c00     .......>.>.<.|.|
 80064c8:	7c00 3c00 3e00 3e00 1f87 0fff 03fe 0000     .|.<.>.>........
	...
 80064e0:	001f 001f 001f 001f 001f 001f 07ff 1fff     ................
 80064f0:	3e3f 3c1f 7c1f 7c1f 7c1f 781f 781f 7c1f     ?>.<.|.|.|.x.x.|
 8006500:	7c1f 3c3f 3e7f 1fff 0fdf 0000 0000 0000     .|?<.>..........
	...
 8006520:	03f8 0ffc 1f3e 3e1e 3c1f 7c1f 7fff 7fff     ....>..>.<.|....
 8006530:	7c00 7c00 3c00 3e00 1f07 0fff 03fe 0000     .|.|.<.>........
	...
 8006548:	01ff 03e1 03c0 07c0 07c0 07c0 7fff 7fff     ................
 8006558:	07c0 07c0 07c0 07c0 07c0 07c0 07c0 07c0     ................
 8006568:	07c0 07c0 07c0 07c0 07c0 0000 0000 0000     ................
	...
 8006588:	07ef 1fff 3e7f 3c1f 7c1f 7c1f 781f 781f     .....>.<.|.|.x.x
 8006598:	781f 7c1f 7c1f 3c3f 3e7f 1fff 0fdf 001e     .x.|.|?<.>......
 80065a8:	001e 001e 387c 3ff8 3c00 3c00 3c00 3c00     ....|8.?.<.<.<.<
 80065b8:	3c00 3c00 3dfc 3ffe 3f9e 3f1f 3e1f 3c1f     .<.<.=.?.?.?.>.<
 80065c8:	3c1f 3c1f 3c1f 3c1f 3c1f 3c1f 3c1f 3c1f     .<.<.<.<.<.<.<.<
 80065d8:	3c1f 0000 0000 0000 0000 0000 01f0 01f0     .<..............
	...
 80065f0:	7fe0 7fe0 01e0 01e0 01e0 01e0 01e0 01e0     ................
 8006600:	01e0 01e0 01e0 01e0 01e0 01e0 01e0 0000     ................
	...
 8006618:	00f8 00f8 0000 0000 0000 0000 3ff8 3ff8     .............?.?
 8006628:	00f8 00f8 00f8 00f8 00f8 00f8 00f8 00f8     ................
 8006638:	00f8 00f8 00f8 00f8 00f8 00f8 00f8 00f0     ................
 8006648:	71f0 7fe0 3c00 3c00 3c00 3c00 3c00 3c00     .q...<.<.<.<.<.<
 8006658:	3c1f 3c3e 3c7c 3cf8 3df0 3de0 3fc0 3fc0     .<><|<.<.=.=.?.?
 8006668:	3fe0 3df0 3cf8 3c7c 3c3e 3c1f 3c1f 0000     .?.=.<|<><.<.<..
	...
 8006680:	7ff0 01f0 01f0 01f0 01f0 01f0 01f0 01f0     ................
 8006690:	01f0 01f0 01f0 01f0 01f0 01f0 01f0 01f0     ................
 80066a0:	01f0 01f0 01f0 01f0 01f0 0000 0000 0000     ................
	...
 80066c0:	f79e ffff ffff ffff fbe7 f9e7 f1c7 f1c7     ................
 80066d0:	f1c7 f1c7 f1c7 f1c7 f1c7 f1c7 f1c7 0000     ................
	...
 80066f4:	3dfc 3ffe 3f9e 3f1f 3e1f 3c1f 3c1f 3c1f     .=.?.?.?.>.<.<.<
 8006704:	3c1f 3c1f 3c1f 3c1f 3c1f 3c1f 3c1f 0000     .<.<.<.<.<.<.<..
	...
 8006728:	07f0 1ffc 3e3e 3c1f 7c1f 780f 780f 780f     ....>>.<.|.x.x.x
 8006738:	780f 780f 7c1f 3c1f 3e3e 1ffc 07f0 0000     .x.x.|.<>>......
	...
 800675c:	3df8 3ffe 3f3e 3e1f 3c0f 3c0f 3c0f 3c0f     .=.?>?.>.<.<.<.<
 800676c:	3c0f 3c0f 3c1f 3e1e 3f3e 3ffc 3ff8 3c00     .<.<.<.>>?.?.?.<
 800677c:	3c00 3c00 3c00 3c00 0000 0000 0000 0000     .<.<.<.<........
 800678c:	0000 0000 07ee 1ffe 3e7e 3c1e 7c1e 781e     ........~>.<.|.x
 800679c:	781e 781e 781e 781e 7c1e 7c3e 3e7e 1ffe     .x.x.x.x.|>|~>..
 80067ac:	0fde 001e 001e 001e 001e 001e 0000 0000     ................
	...
 80067c4:	1f7f 1fff 1fe7 1fc7 1f87 1f00 1f00 1f00     ................
 80067d4:	1f00 1f00 1f00 1f00 1f00 1f00 1f00 0000     ................
	...
 80067f8:	07fc 1ffe 1e0e 3e00 3e00 3f00 1fe0 07fc     .......>.>.?....
 8006808:	00fe 003e 001e 001e 3c3e 3ffc 1ff0 0000     ..>.....><.?....
	...
 8006824:	0000 0780 0780 0780 7fff 7fff 0780 0780     ................
 8006834:	0780 0780 0780 0780 0780 0780 0780 0780     ................
 8006844:	07c0 03ff 01ff 0000 0000 0000 0000 0000     ................
	...
 8006860:	3c1e 3c1e 3c1e 3c1e 3c1e 3c1e 3c1e 3c1e     .<.<.<.<.<.<.<.<
 8006870:	3c1e 3c1e 3c3e 3c7e 3efe 1ffe 0fde 0000     .<.<><~<.>......
	...
 8006894:	f007 780f 780f 3c1e 3c1e 3e1e 1e3c 1e3c     ...x.x.<.<.><.<.
 80068a4:	0f78 0f78 0ff0 07f0 07f0 03e0 03e0 0000     x.x.............
	...
 80068c8:	f003 f1e3 f3e3 f3e7 f3f7 f3f7 7ff7 7f77     ..............w.
 80068d8:	7f7f 7f7f 7f7f 3e3e 3e3e 3e3e 3e3e 0000     ......>>>>>>>>..
	...
 80068fc:	7c0f 3e1e 3e3c 1f3c 0ff8 07f0 07f0 03e0     .|.><><.........
 800690c:	07f0 07f8 0ff8 1e7c 3e3e 3c1f 781f 0000     ......|.>>.<.x..
	...
 8006930:	f807 780f 7c0f 3c1e 3c1e 1e3c 1e3c 1f3c     ...x.|.<.<<.<.<.
 8006940:	0f78 0ff8 07f0 07f0 03e0 03e0 03c0 03c0     x...............
 8006950:	03c0 0780 0f80 7f00 0000 0000 0000 0000     ................
 8006960:	0000 0000 3fff 3fff 001f 003e 007c 00f8     .....?.?..>.|...
 8006970:	01f0 03e0 07c0 0f80 1f00 1e00 3c00 7fff     .............<..
 8006980:	7fff 0000 0000 0000 0000 0000 01fe 03e0     ................
 8006990:	03c0 03c0 03c0 03c0 01e0 01e0 01e0 01c0     ................
 80069a0:	03c0 3f80 3f80 03c0 01c0 01e0 01e0 01e0     ...?.?..........
 80069b0:	03c0 03c0 03c0 03c0 03e0 01fe 007e 0000     ............~...
 80069c0:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 01c0     ................
 80069d0:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 01c0     ................
 80069e0:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 01c0     ................
 80069f0:	01c0 0000 3fc0 03e0 01e0 01e0 01e0 01e0     .....?..........
 8006a00:	01c0 03c0 03c0 01c0 01e0 00fe 00fe 01e0     ................
 8006a10:	01c0 03c0 03c0 01c0 01e0 01e0 01e0 01e0     ................
 8006a20:	03e0 3fc0 3f00 0000 0000 0000 0000 0000     ...?.?..........
	...
 8006a3c:	0000 3f07 7fc7 73e7 f1ff f07e 0000 0000     ...?...s..~.....
	...
 8006a5c:	5953 4353 4b4c 3a20 2520 646c 7a48 0a0d     SYSCLK : %ldHz..
 8006a6c:	0000 0000 4348 4b4c 2020 3a20 2520 646c     ....HCLK   : %ld
 8006a7c:	7a48 0a0d 0000 0000 4350 4b4c 2031 3a20     Hz......PCLK1  :
 8006a8c:	2520 646c 7a48 0a0d 0000 0000 4350 4b4c      %ldHz......PCLK
 8006a9c:	2032 3a20 2520 646c 7a48 0a0d 000a 0000     2  : %ldHz......
 8006aac:	6548 6c6c 216f 0000 6554 7473 002e 0000     Hello!..Test....

08006abc <AHBPrescTable>:
	...
 8006ac4:	0201 0403 0706 0908                         ........

08006acc <APBPrescTable>:
 8006acc:	0000 0000 0201 0403 2d23 2b30 0020 6c68     ........#-0+ .hl
 8006adc:	004c 6665 4567 4746 3000 3231 3433 3635     L.efgEFG.0123456
 8006aec:	3837 4139 4342 4544 0046 3130 3332 3534     789ABCDEF.012345
 8006afc:	3736 3938 6261 6463 6665 0000               6789abcdef..

08006b08 <_init>:
 8006b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0a:	bf00      	nop
 8006b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0e:	bc08      	pop	{r3}
 8006b10:	469e      	mov	lr, r3
 8006b12:	4770      	bx	lr

08006b14 <_fini>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	bf00      	nop
 8006b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1a:	bc08      	pop	{r3}
 8006b1c:	469e      	mov	lr, r3
 8006b1e:	4770      	bx	lr
