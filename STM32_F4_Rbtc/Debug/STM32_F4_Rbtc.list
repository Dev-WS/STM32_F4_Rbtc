
STM32_F4_Rbtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  08006658  08006658  00016658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006660  08006660  00016660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08006668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000580  20000088  080066f0  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000608  08006c70  00020088  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f905  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f2d  00000000  00000000  0002f9bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ef8  00000000  00000000  000318f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e20  00000000  00000000  000327e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004333  00000000  00000000  00033608  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e589  00000000  00000000  0003793b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ed232  00000000  00000000  00045ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  001330f6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000431c  00000000  00000000  00133174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006640 	.word	0x08006640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08006640 	.word	0x08006640

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_Init+0x34>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_Init+0x34>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_Init+0x34>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_Init+0x34>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f955 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	200f      	movs	r0, #15
 80005a4:	f000 f810 	bl	80005c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f000 f806 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023c00 	.word	0x40023c00

080005b8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x54>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x58>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f965 	bl	80008b6 <HAL_SYSTICK_Config>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00e      	b.n	8000614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	d80a      	bhi.n	8000612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	2200      	movs	r2, #0
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f000 f92d 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <HAL_InitTick+0x5c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
 8000610:	e000      	b.n	8000614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000020 	.word	0x20000020
 8000620:	20000004 	.word	0x20000004
 8000624:	20000000 	.word	0x20000000

08000628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x20>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_IncTick+0x24>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_IncTick+0x24>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000004 	.word	0x20000004
 800064c:	200004bc 	.word	0x200004bc

08000650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_GetTick+0x14>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200004bc 	.word	0x200004bc

08000668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000670:	f7ff ffee 	bl	8000650 <HAL_GetTick>
 8000674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000680:	d005      	beq.n	800068e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_Delay+0x40>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4413      	add	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068e:	bf00      	nop
 8000690:	f7ff ffde 	bl	8000650 <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	429a      	cmp	r2, r3
 800069e:	d8f7      	bhi.n	8000690 <HAL_Delay+0x28>
  {
  }
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000004 	.word	0x20000004

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	60d3      	str	r3, [r2, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db0b      	blt.n	800073a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 021f 	and.w	r2, r3, #31
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <__NVIC_EnableIRQ+0x38>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff29 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff3e 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff8e 	bl	80007a0 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff31 	bl	8000710 <__NVIC_EnableIRQ>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffa2 	bl	8000808 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008d2:	f000 f802 	bl	80008da <HAL_SYSTICK_Callback>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
 8000902:	e16b      	b.n	8000bdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000904:	2201      	movs	r2, #1
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	429a      	cmp	r2, r3
 800091e:	f040 815a 	bne.w	8000bd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d003      	beq.n	8000932 <HAL_GPIO_Init+0x4a>
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b12      	cmp	r3, #18
 8000930:	d123      	bne.n	800097a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	08da      	lsrs	r2, r3, #3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3208      	adds	r2, #8
 800093a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	220f      	movs	r2, #15
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4013      	ands	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	691a      	ldr	r2, [r3, #16]
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	f003 0307 	and.w	r3, r3, #7
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	4313      	orrs	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	08da      	lsrs	r2, r3, #3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3208      	adds	r2, #8
 8000974:	69b9      	ldr	r1, [r7, #24]
 8000976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	2203      	movs	r2, #3
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	4013      	ands	r3, r2
 8000990:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 0203 	and.w	r2, r3, #3
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d00b      	beq.n	80009ce <HAL_GPIO_Init+0xe6>
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d007      	beq.n	80009ce <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009c2:	2b11      	cmp	r3, #17
 80009c4:	d003      	beq.n	80009ce <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d130      	bne.n	8000a30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4013      	ands	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	68da      	ldr	r2, [r3, #12]
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a04:	2201      	movs	r2, #1
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	091b      	lsrs	r3, r3, #4
 8000a1a:	f003 0201 	and.w	r2, r3, #1
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4013      	ands	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	689a      	ldr	r2, [r3, #8]
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f000 80b4 	beq.w	8000bd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b5f      	ldr	r3, [pc, #380]	; (8000bf0 <HAL_GPIO_Init+0x308>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a5e      	ldr	r2, [pc, #376]	; (8000bf0 <HAL_GPIO_Init+0x308>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b5c      	ldr	r3, [pc, #368]	; (8000bf0 <HAL_GPIO_Init+0x308>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a8a:	4a5a      	ldr	r2, [pc, #360]	; (8000bf4 <HAL_GPIO_Init+0x30c>)
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a51      	ldr	r2, [pc, #324]	; (8000bf8 <HAL_GPIO_Init+0x310>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d02b      	beq.n	8000b0e <HAL_GPIO_Init+0x226>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a50      	ldr	r2, [pc, #320]	; (8000bfc <HAL_GPIO_Init+0x314>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d025      	beq.n	8000b0a <HAL_GPIO_Init+0x222>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a4f      	ldr	r2, [pc, #316]	; (8000c00 <HAL_GPIO_Init+0x318>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d01f      	beq.n	8000b06 <HAL_GPIO_Init+0x21e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a4e      	ldr	r2, [pc, #312]	; (8000c04 <HAL_GPIO_Init+0x31c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d019      	beq.n	8000b02 <HAL_GPIO_Init+0x21a>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a4d      	ldr	r2, [pc, #308]	; (8000c08 <HAL_GPIO_Init+0x320>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d013      	beq.n	8000afe <HAL_GPIO_Init+0x216>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4c      	ldr	r2, [pc, #304]	; (8000c0c <HAL_GPIO_Init+0x324>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d00d      	beq.n	8000afa <HAL_GPIO_Init+0x212>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4b      	ldr	r2, [pc, #300]	; (8000c10 <HAL_GPIO_Init+0x328>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d007      	beq.n	8000af6 <HAL_GPIO_Init+0x20e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4a      	ldr	r2, [pc, #296]	; (8000c14 <HAL_GPIO_Init+0x32c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d101      	bne.n	8000af2 <HAL_GPIO_Init+0x20a>
 8000aee:	2307      	movs	r3, #7
 8000af0:	e00e      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000af2:	2308      	movs	r3, #8
 8000af4:	e00c      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000af6:	2306      	movs	r3, #6
 8000af8:	e00a      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000afa:	2305      	movs	r3, #5
 8000afc:	e008      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000afe:	2304      	movs	r3, #4
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000b02:	2303      	movs	r3, #3
 8000b04:	e004      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000b06:	2302      	movs	r3, #2
 8000b08:	e002      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x228>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	69fa      	ldr	r2, [r7, #28]
 8000b12:	f002 0203 	and.w	r2, r2, #3
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	4093      	lsls	r3, r2
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b20:	4934      	ldr	r1, [pc, #208]	; (8000bf4 <HAL_GPIO_Init+0x30c>)
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	3302      	adds	r3, #2
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b2e:	4b3a      	ldr	r3, [pc, #232]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b52:	4a31      	ldr	r2, [pc, #196]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b58:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	4013      	ands	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b7c:	4a26      	ldr	r2, [pc, #152]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bd0:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <HAL_GPIO_Init+0x330>)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	f67f ae90 	bls.w	8000904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000be4:	bf00      	nop
 8000be6:	3724      	adds	r7, #36	; 0x24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40013800 	.word	0x40013800
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020c00 	.word	0x40020c00
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40021400 	.word	0x40021400
 8000c10:	40021800 	.word	0x40021800
 8000c14:	40021c00 	.word	0x40021c00
 8000c18:	40013c00 	.word	0x40013c00

08000c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e001      	b.n	8000c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c5c:	787b      	ldrb	r3, [r7, #1]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c68:	e003      	b.n	8000c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	041a      	lsls	r2, r3, #16
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	619a      	str	r2, [r3, #24]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e10f      	b.n	8000eb2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d106      	bne.n	8000cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f912 	bl	8000ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2224      	movs	r2, #36	; 0x24
 8000cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f022 0201 	bic.w	r2, r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cc4:	f000 fe10 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 8000cc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	4a7b      	ldr	r2, [pc, #492]	; (8000ebc <HAL_I2C_Init+0x23c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d807      	bhi.n	8000ce4 <HAL_I2C_Init+0x64>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4a7a      	ldr	r2, [pc, #488]	; (8000ec0 <HAL_I2C_Init+0x240>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	bf94      	ite	ls
 8000cdc:	2301      	movls	r3, #1
 8000cde:	2300      	movhi	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	e006      	b.n	8000cf2 <HAL_I2C_Init+0x72>
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4a77      	ldr	r2, [pc, #476]	; (8000ec4 <HAL_I2C_Init+0x244>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	bf94      	ite	ls
 8000cec:	2301      	movls	r3, #1
 8000cee:	2300      	movhi	r3, #0
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e0db      	b.n	8000eb2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4a72      	ldr	r2, [pc, #456]	; (8000ec8 <HAL_I2C_Init+0x248>)
 8000cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000d02:	0c9b      	lsrs	r3, r3, #18
 8000d04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4a64      	ldr	r2, [pc, #400]	; (8000ebc <HAL_I2C_Init+0x23c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d802      	bhi.n	8000d34 <HAL_I2C_Init+0xb4>
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	3301      	adds	r3, #1
 8000d32:	e009      	b.n	8000d48 <HAL_I2C_Init+0xc8>
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d3a:	fb02 f303 	mul.w	r3, r2, r3
 8000d3e:	4a63      	ldr	r2, [pc, #396]	; (8000ecc <HAL_I2C_Init+0x24c>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	099b      	lsrs	r3, r3, #6
 8000d46:	3301      	adds	r3, #1
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	6812      	ldr	r2, [r2, #0]
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4956      	ldr	r1, [pc, #344]	; (8000ebc <HAL_I2C_Init+0x23c>)
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d80d      	bhi.n	8000d84 <HAL_I2C_Init+0x104>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	1e59      	subs	r1, r3, #1
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d76:	3301      	adds	r3, #1
 8000d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	bf38      	it	cc
 8000d80:	2304      	movcc	r3, #4
 8000d82:	e04f      	b.n	8000e24 <HAL_I2C_Init+0x1a4>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d111      	bne.n	8000db0 <HAL_I2C_Init+0x130>
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	1e58      	subs	r0, r3, #1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6859      	ldr	r1, [r3, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	440b      	add	r3, r1
 8000d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d9e:	3301      	adds	r3, #1
 8000da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	bf0c      	ite	eq
 8000da8:	2301      	moveq	r3, #1
 8000daa:	2300      	movne	r3, #0
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	e012      	b.n	8000dd6 <HAL_I2C_Init+0x156>
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	1e58      	subs	r0, r3, #1
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6859      	ldr	r1, [r3, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	0099      	lsls	r1, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	bf0c      	ite	eq
 8000dd0:	2301      	moveq	r3, #1
 8000dd2:	2300      	movne	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_I2C_Init+0x15e>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e022      	b.n	8000e24 <HAL_I2C_Init+0x1a4>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10e      	bne.n	8000e04 <HAL_I2C_Init+0x184>
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1e58      	subs	r0, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6859      	ldr	r1, [r3, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	440b      	add	r3, r1
 8000df4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000df8:	3301      	adds	r3, #1
 8000dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e02:	e00f      	b.n	8000e24 <HAL_I2C_Init+0x1a4>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	1e58      	subs	r0, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6859      	ldr	r1, [r3, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	0099      	lsls	r1, r3, #2
 8000e14:	440b      	add	r3, r1
 8000e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	6809      	ldr	r1, [r1, #0]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69da      	ldr	r2, [r3, #28]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6911      	ldr	r1, [r2, #16]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68d2      	ldr	r2, [r2, #12]
 8000e5e:	4311      	orrs	r1, r2
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6812      	ldr	r2, [r2, #0]
 8000e64:	430b      	orrs	r3, r1
 8000e66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0201 	orr.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	000186a0 	.word	0x000186a0
 8000ec0:	001e847f 	.word	0x001e847f
 8000ec4:	003d08ff 	.word	0x003d08ff
 8000ec8:	431bde83 	.word	0x431bde83
 8000ecc:	10624dd3 	.word	0x10624dd3

08000ed0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	817b      	strh	r3, [r7, #10]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff fbaa 	bl	8000650 <HAL_GetTick>
 8000efc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b20      	cmp	r3, #32
 8000f08:	f040 80e0 	bne.w	80010cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2319      	movs	r3, #25
 8000f12:	2201      	movs	r2, #1
 8000f14:	4970      	ldr	r1, [pc, #448]	; (80010d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f000 fa7a 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000f22:	2302      	movs	r3, #2
 8000f24:	e0d3      	b.n	80010ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d101      	bne.n	8000f34 <HAL_I2C_Master_Transmit+0x50>
 8000f30:	2302      	movs	r3, #2
 8000f32:	e0cc      	b.n	80010ce <HAL_I2C_Master_Transmit+0x1ea>
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d007      	beq.n	8000f5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f042 0201 	orr.w	r2, r2, #1
 8000f58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2221      	movs	r2, #33	; 0x21
 8000f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2210      	movs	r2, #16
 8000f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	893a      	ldrh	r2, [r7, #8]
 8000f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4a50      	ldr	r2, [pc, #320]	; (80010dc <HAL_I2C_Master_Transmit+0x1f8>)
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000f9c:	8979      	ldrh	r1, [r7, #10]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	6a3a      	ldr	r2, [r7, #32]
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 f9be 	bl	8001324 <I2C_MasterRequestWrite>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e08d      	b.n	80010ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000fc8:	e066      	b.n	8001098 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	6a39      	ldr	r1, [r7, #32]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 faf4 	bl	80015bc <I2C_WaitOnTXEFlagUntilTimeout>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d107      	bne.n	8000ff2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ff0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e06b      	b.n	80010ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	781a      	ldrb	r2, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001010:	b29b      	uxth	r3, r3
 8001012:	3b01      	subs	r3, #1
 8001014:	b29a      	uxth	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800101e:	3b01      	subs	r3, #1
 8001020:	b29a      	uxth	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	2b04      	cmp	r3, #4
 8001032:	d11b      	bne.n	800106c <HAL_I2C_Master_Transmit+0x188>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001038:	2b00      	cmp	r3, #0
 800103a:	d017      	beq.n	800106c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001056:	b29b      	uxth	r3, r3
 8001058:	3b01      	subs	r3, #1
 800105a:	b29a      	uxth	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001064:	3b01      	subs	r3, #1
 8001066:	b29a      	uxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	6a39      	ldr	r1, [r7, #32]
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 fae4 	bl	800163e <I2C_WaitOnBTFFlagUntilTimeout>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00d      	beq.n	8001098 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	2b04      	cmp	r3, #4
 8001082:	d107      	bne.n	8001094 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001092:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e01a      	b.n	80010ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800109c:	2b00      	cmp	r3, #0
 800109e:	d194      	bne.n	8000fca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2220      	movs	r2, #32
 80010b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e000      	b.n	80010ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80010cc:	2302      	movs	r3, #2
  }
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	00100002 	.word	0x00100002
 80010dc:	ffff0000 	.word	0xffff0000

080010e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	460b      	mov	r3, r1
 80010ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff faae 	bl	8000650 <HAL_GetTick>
 80010f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b20      	cmp	r3, #32
 8001104:	f040 8105 	bne.w	8001312 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2319      	movs	r3, #25
 800110e:	2201      	movs	r2, #1
 8001110:	4982      	ldr	r1, [pc, #520]	; (800131c <HAL_I2C_IsDeviceReady+0x23c>)
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f000 f97c 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800111e:	2302      	movs	r3, #2
 8001120:	e0f8      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001128:	2b01      	cmp	r3, #1
 800112a:	d101      	bne.n	8001130 <HAL_I2C_IsDeviceReady+0x50>
 800112c:	2302      	movs	r3, #2
 800112e:	e0f1      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b01      	cmp	r3, #1
 8001144:	d007      	beq.n	8001156 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 0201 	orr.w	r2, r2, #1
 8001154:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001164:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2224      	movs	r2, #36	; 0x24
 800116a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2200      	movs	r2, #0
 8001172:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4a6a      	ldr	r2, [pc, #424]	; (8001320 <HAL_I2C_IsDeviceReady+0x240>)
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001188:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2200      	movs	r2, #0
 8001192:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 f93a 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e0b6      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011a6:	897b      	ldrh	r3, [r7, #10]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80011b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fa4b 	bl	8000650 <HAL_GetTick>
 80011ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	bf0c      	ite	eq
 80011ca:	2301      	moveq	r3, #1
 80011cc:	2300      	movne	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e0:	bf0c      	ite	eq
 80011e2:	2301      	moveq	r3, #1
 80011e4:	2300      	movne	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80011ea:	e025      	b.n	8001238 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80011ec:	f7ff fa30 	bl	8000650 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d302      	bcc.n	8001202 <HAL_I2C_IsDeviceReady+0x122>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	22a0      	movs	r2, #160	; 0xa0
 8001206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b02      	cmp	r3, #2
 8001216:	bf0c      	ite	eq
 8001218:	2301      	moveq	r3, #1
 800121a:	2300      	movne	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2ba0      	cmp	r3, #160	; 0xa0
 8001242:	d005      	beq.n	8001250 <HAL_I2C_IsDeviceReady+0x170>
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_I2C_IsDeviceReady+0x170>
 800124a:	7dbb      	ldrb	r3, [r7, #22]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0cd      	beq.n	80011ec <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2220      	movs	r2, #32
 8001254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b02      	cmp	r3, #2
 8001264:	d129      	bne.n	80012ba <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001274:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2319      	movs	r3, #25
 8001292:	2201      	movs	r2, #1
 8001294:	4921      	ldr	r1, [pc, #132]	; (800131c <HAL_I2C_IsDeviceReady+0x23c>)
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f8ba 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e036      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2220      	movs	r2, #32
 80012aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e02c      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80012d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2319      	movs	r3, #25
 80012da:	2201      	movs	r2, #1
 80012dc:	490f      	ldr	r1, [pc, #60]	; (800131c <HAL_I2C_IsDeviceReady+0x23c>)
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f896 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e012      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	3301      	adds	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f4ff af3e 	bcc.w	800117a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2220      	movs	r2, #32
 8001302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8001312:	2302      	movs	r3, #2
  }
}
 8001314:	4618      	mov	r0, r3
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	00100002 	.word	0x00100002
 8001320:	ffff0000 	.word	0xffff0000

08001324 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af02      	add	r7, sp, #8
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	460b      	mov	r3, r1
 8001332:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	2b08      	cmp	r3, #8
 800133e:	d006      	beq.n	800134e <I2C_MasterRequestWrite+0x2a>
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d003      	beq.n	800134e <I2C_MasterRequestWrite+0x2a>
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800134c:	d108      	bne.n	8001360 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e00b      	b.n	8001378 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	2b12      	cmp	r3, #18
 8001366:	d107      	bne.n	8001378 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001376:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 f843 	bl	8001410 <I2C_WaitOnFlagUntilTimeout>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e035      	b.n	8001400 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800139c:	d108      	bne.n	80013b0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800139e:	897b      	ldrh	r3, [r7, #10]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	e01b      	b.n	80013e8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80013b0:	897b      	ldrh	r3, [r7, #10]
 80013b2:	11db      	asrs	r3, r3, #7
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	f003 0306 	and.w	r3, r3, #6
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f063 030f 	orn	r3, r3, #15
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	490e      	ldr	r1, [pc, #56]	; (8001408 <I2C_MasterRequestWrite+0xe4>)
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f875 	bl	80014be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e010      	b.n	8001400 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80013de:	897b      	ldrh	r3, [r7, #10]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4907      	ldr	r1, [pc, #28]	; (800140c <I2C_MasterRequestWrite+0xe8>)
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f865 	bl	80014be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	00010008 	.word	0x00010008
 800140c:	00010002 	.word	0x00010002

08001410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4613      	mov	r3, r2
 800141e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001420:	e025      	b.n	800146e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d021      	beq.n	800146e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800142a:	f7ff f911 	bl	8000650 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d302      	bcc.n	8001440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d116      	bne.n	800146e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2220      	movs	r2, #32
 800144a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f043 0220 	orr.w	r2, r3, #32
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e023      	b.n	80014b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	0c1b      	lsrs	r3, r3, #16
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d10d      	bne.n	8001494 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4013      	ands	r3, r2
 8001484:	b29b      	uxth	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	bf0c      	ite	eq
 800148a:	2301      	moveq	r3, #1
 800148c:	2300      	movne	r3, #0
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	e00c      	b.n	80014ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4013      	ands	r3, r2
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf0c      	ite	eq
 80014a6:	2301      	moveq	r3, #1
 80014a8:	2300      	movne	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d0b6      	beq.n	8001422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014cc:	e051      	b.n	8001572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014dc:	d123      	bne.n	8001526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f043 0204 	orr.w	r2, r3, #4
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e046      	b.n	80015b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d021      	beq.n	8001572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800152e:	f7ff f88f 	bl	8000650 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	d302      	bcc.n	8001544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d116      	bne.n	8001572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2220      	movs	r2, #32
 800154e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f043 0220 	orr.w	r2, r3, #32
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e020      	b.n	80015b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	0c1b      	lsrs	r3, r3, #16
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d10c      	bne.n	8001596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4013      	ands	r3, r2
 8001588:	b29b      	uxth	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf14      	ite	ne
 800158e:	2301      	movne	r3, #1
 8001590:	2300      	moveq	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	e00b      	b.n	80015ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	43da      	mvns	r2, r3
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4013      	ands	r3, r2
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf14      	ite	ne
 80015a8:	2301      	movne	r3, #1
 80015aa:	2300      	moveq	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d18d      	bne.n	80014ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015c8:	e02d      	b.n	8001626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f878 	bl	80016c0 <I2C_IsAcknowledgeFailed>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e02d      	b.n	8001636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d021      	beq.n	8001626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015e2:	f7ff f835 	bl	8000650 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d302      	bcc.n	80015f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d116      	bne.n	8001626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2220      	movs	r2, #32
 8001602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f043 0220 	orr.w	r2, r3, #32
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e007      	b.n	8001636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001630:	2b80      	cmp	r3, #128	; 0x80
 8001632:	d1ca      	bne.n	80015ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800164a:	e02d      	b.n	80016a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 f837 	bl	80016c0 <I2C_IsAcknowledgeFailed>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e02d      	b.n	80016b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001662:	d021      	beq.n	80016a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001664:	f7fe fff4 	bl	8000650 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	429a      	cmp	r2, r3
 8001672:	d302      	bcc.n	800167a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d116      	bne.n	80016a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2220      	movs	r2, #32
 8001684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f043 0220 	orr.w	r2, r3, #32
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e007      	b.n	80016b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d1ca      	bne.n	800164c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d6:	d11b      	bne.n	8001710 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2220      	movs	r2, #32
 80016ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f043 0204 	orr.w	r2, r3, #4
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001736:	4b63      	ldr	r3, [pc, #396]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b04      	cmp	r3, #4
 8001740:	d007      	beq.n	8001752 <HAL_RCC_GetSysClockFreq+0x32>
 8001742:	2b08      	cmp	r3, #8
 8001744:	d008      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x38>
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 80b4 	bne.w	80018b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800174c:	4b5e      	ldr	r3, [pc, #376]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800174e:	60bb      	str	r3, [r7, #8]
       break;
 8001750:	e0b3      	b.n	80018ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001752:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001754:	60bb      	str	r3, [r7, #8]
      break;
 8001756:	e0b0      	b.n	80018ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001758:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001760:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001762:	4b58      	ldr	r3, [pc, #352]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d04a      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176e:	4b55      	ldr	r3, [pc, #340]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	099b      	lsrs	r3, r3, #6
 8001774:	f04f 0400 	mov.w	r4, #0
 8001778:	f240 11ff 	movw	r1, #511	; 0x1ff
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	ea03 0501 	and.w	r5, r3, r1
 8001784:	ea04 0602 	and.w	r6, r4, r2
 8001788:	4629      	mov	r1, r5
 800178a:	4632      	mov	r2, r6
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	f04f 0400 	mov.w	r4, #0
 8001794:	0154      	lsls	r4, r2, #5
 8001796:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800179a:	014b      	lsls	r3, r1, #5
 800179c:	4619      	mov	r1, r3
 800179e:	4622      	mov	r2, r4
 80017a0:	1b49      	subs	r1, r1, r5
 80017a2:	eb62 0206 	sbc.w	r2, r2, r6
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	f04f 0400 	mov.w	r4, #0
 80017ae:	0194      	lsls	r4, r2, #6
 80017b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017b4:	018b      	lsls	r3, r1, #6
 80017b6:	1a5b      	subs	r3, r3, r1
 80017b8:	eb64 0402 	sbc.w	r4, r4, r2
 80017bc:	f04f 0100 	mov.w	r1, #0
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	00e2      	lsls	r2, r4, #3
 80017c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017ca:	00d9      	lsls	r1, r3, #3
 80017cc:	460b      	mov	r3, r1
 80017ce:	4614      	mov	r4, r2
 80017d0:	195b      	adds	r3, r3, r5
 80017d2:	eb44 0406 	adc.w	r4, r4, r6
 80017d6:	f04f 0100 	mov.w	r1, #0
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	0262      	lsls	r2, r4, #9
 80017e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80017e4:	0259      	lsls	r1, r3, #9
 80017e6:	460b      	mov	r3, r1
 80017e8:	4614      	mov	r4, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	4621      	mov	r1, r4
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f04f 0400 	mov.w	r4, #0
 80017f4:	461a      	mov	r2, r3
 80017f6:	4623      	mov	r3, r4
 80017f8:	f7fe fd42 	bl	8000280 <__aeabi_uldivmod>
 80017fc:	4603      	mov	r3, r0
 80017fe:	460c      	mov	r4, r1
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e049      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	099b      	lsrs	r3, r3, #6
 800180a:	f04f 0400 	mov.w	r4, #0
 800180e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	ea03 0501 	and.w	r5, r3, r1
 800181a:	ea04 0602 	and.w	r6, r4, r2
 800181e:	4629      	mov	r1, r5
 8001820:	4632      	mov	r2, r6
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	f04f 0400 	mov.w	r4, #0
 800182a:	0154      	lsls	r4, r2, #5
 800182c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001830:	014b      	lsls	r3, r1, #5
 8001832:	4619      	mov	r1, r3
 8001834:	4622      	mov	r2, r4
 8001836:	1b49      	subs	r1, r1, r5
 8001838:	eb62 0206 	sbc.w	r2, r2, r6
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	f04f 0400 	mov.w	r4, #0
 8001844:	0194      	lsls	r4, r2, #6
 8001846:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800184a:	018b      	lsls	r3, r1, #6
 800184c:	1a5b      	subs	r3, r3, r1
 800184e:	eb64 0402 	sbc.w	r4, r4, r2
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	00e2      	lsls	r2, r4, #3
 800185c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001860:	00d9      	lsls	r1, r3, #3
 8001862:	460b      	mov	r3, r1
 8001864:	4614      	mov	r4, r2
 8001866:	195b      	adds	r3, r3, r5
 8001868:	eb44 0406 	adc.w	r4, r4, r6
 800186c:	f04f 0100 	mov.w	r1, #0
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	02a2      	lsls	r2, r4, #10
 8001876:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800187a:	0299      	lsls	r1, r3, #10
 800187c:	460b      	mov	r3, r1
 800187e:	4614      	mov	r4, r2
 8001880:	4618      	mov	r0, r3
 8001882:	4621      	mov	r1, r4
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f04f 0400 	mov.w	r4, #0
 800188a:	461a      	mov	r2, r3
 800188c:	4623      	mov	r3, r4
 800188e:	f7fe fcf7 	bl	8000280 <__aeabi_uldivmod>
 8001892:	4603      	mov	r3, r0
 8001894:	460c      	mov	r4, r1
 8001896:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	0c1b      	lsrs	r3, r3, #16
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	3301      	adds	r3, #1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b0:	60bb      	str	r3, [r7, #8]
      break;
 80018b2:	e002      	b.n	80018ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018b6:	60bb      	str	r3, [r7, #8]
      break;
 80018b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ba:	68bb      	ldr	r3, [r7, #8]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c4:	40023800 	.word	0x40023800
 80018c8:	00f42400 	.word	0x00f42400
 80018cc:	007a1200 	.word	0x007a1200

080018d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000020 	.word	0x20000020

080018e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018ec:	f7ff fff0 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 80018f0:	4601      	mov	r1, r0
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	4a03      	ldr	r2, [pc, #12]	; (800190c <HAL_RCC_GetPCLK1Freq+0x24>)
 80018fe:	5cd3      	ldrb	r3, [r2, r3]
 8001900:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	08006604 	.word	0x08006604

08001910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001914:	f7ff ffdc 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 8001918:	4601      	mov	r1, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0b5b      	lsrs	r3, r3, #13
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4a03      	ldr	r2, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001926:	5cd3      	ldrb	r3, [r2, r3]
 8001928:	fa21 f303 	lsr.w	r3, r1, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	08006604 	.word	0x08006604

08001938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e01d      	b.n	8001986 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f815 	bl	800198e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3304      	adds	r3, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f000 faa0 	bl	8001ebc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0201 	orr.w	r2, r2, #1
 80019b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b06      	cmp	r3, #6
 80019ca:	d007      	beq.n	80019dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e01d      	b.n	8001a38 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d106      	bne.n	8001a16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f815 	bl	8001a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2202      	movs	r2, #2
 8001a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3304      	adds	r3, #4
 8001a26:	4619      	mov	r1, r3
 8001a28:	4610      	mov	r0, r2
 8001a2a:	f000 fa47 	bl	8001ebc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	6839      	ldr	r1, [r7, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 fc78 	bl	800235c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <HAL_TIM_PWM_Start+0x74>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d004      	beq.n	8001a80 <HAL_TIM_PWM_Start+0x2c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a14      	ldr	r2, [pc, #80]	; (8001acc <HAL_TIM_PWM_Start+0x78>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_TIM_PWM_Start+0x30>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <HAL_TIM_PWM_Start+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b06      	cmp	r3, #6
 8001aaa:	d007      	beq.n	8001abc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40010000 	.word	0x40010000
 8001acc:	40010400 	.word	0x40010400

08001ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d122      	bne.n	8001b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d11b      	bne.n	8001b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0202 	mvn.w	r2, #2
 8001afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f9b4 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f9a6 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f9b7 	bl	8001e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d122      	bne.n	8001b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d11b      	bne.n	8001b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 0204 	mvn.w	r2, #4
 8001b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f98a 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8001b6c:	e005      	b.n	8001b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f97c 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f98d 	bl	8001e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d122      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0208 	mvn.w	r2, #8
 8001ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2204      	movs	r2, #4
 8001baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f960 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f952 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f963 	bl	8001e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d122      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	d11b      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0210 	mvn.w	r2, #16
 8001bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f936 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8001c14:	e005      	b.n	8001c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f928 	bl	8001e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f939 	bl	8001e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d10e      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d107      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0201 	mvn.w	r2, #1
 8001c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 ffe0 	bl	8002c14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5e:	2b80      	cmp	r3, #128	; 0x80
 8001c60:	d10e      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6c:	2b80      	cmp	r3, #128	; 0x80
 8001c6e:	d107      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fb9d 	bl	80023ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8a:	2b40      	cmp	r3, #64	; 0x40
 8001c8c:	d10e      	bne.n	8001cac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c98:	2b40      	cmp	r3, #64	; 0x40
 8001c9a:	d107      	bne.n	8001cac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8fe 	bl	8001ea8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d107      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0220 	mvn.w	r2, #32
 8001cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fb67 	bl	80023a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e0b4      	b.n	8001e64 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2202      	movs	r2, #2
 8001d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b0c      	cmp	r3, #12
 8001d0e:	f200 809f 	bhi.w	8001e50 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001d12:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d4d 	.word	0x08001d4d
 8001d1c:	08001e51 	.word	0x08001e51
 8001d20:	08001e51 	.word	0x08001e51
 8001d24:	08001e51 	.word	0x08001e51
 8001d28:	08001d8d 	.word	0x08001d8d
 8001d2c:	08001e51 	.word	0x08001e51
 8001d30:	08001e51 	.word	0x08001e51
 8001d34:	08001e51 	.word	0x08001e51
 8001d38:	08001dcf 	.word	0x08001dcf
 8001d3c:	08001e51 	.word	0x08001e51
 8001d40:	08001e51 	.word	0x08001e51
 8001d44:	08001e51 	.word	0x08001e51
 8001d48:	08001e0f 	.word	0x08001e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f952 	bl	8001ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0208 	orr.w	r2, r2, #8
 8001d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699a      	ldr	r2, [r3, #24]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0204 	bic.w	r2, r2, #4
 8001d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6999      	ldr	r1, [r3, #24]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	619a      	str	r2, [r3, #24]
      break;
 8001d8a:	e062      	b.n	8001e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f9a2 	bl	80020dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699a      	ldr	r2, [r3, #24]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6999      	ldr	r1, [r3, #24]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	021a      	lsls	r2, r3, #8
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	619a      	str	r2, [r3, #24]
      break;
 8001dcc:	e041      	b.n	8001e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 f9f7 	bl	80021c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69da      	ldr	r2, [r3, #28]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0208 	orr.w	r2, r2, #8
 8001de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69da      	ldr	r2, [r3, #28]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0204 	bic.w	r2, r2, #4
 8001df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	69d9      	ldr	r1, [r3, #28]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	61da      	str	r2, [r3, #28]
      break;
 8001e0c:	e021      	b.n	8001e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68b9      	ldr	r1, [r7, #8]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fa4b 	bl	80022b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69da      	ldr	r2, [r3, #28]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	69da      	ldr	r2, [r3, #28]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	69d9      	ldr	r1, [r3, #28]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	021a      	lsls	r2, r3, #8
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	61da      	str	r2, [r3, #28]
      break;
 8001e4e:	e000      	b.n	8001e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001e50:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a40      	ldr	r2, [pc, #256]	; (8001fd0 <TIM_Base_SetConfig+0x114>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <TIM_Base_SetConfig+0x40>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eda:	d00f      	beq.n	8001efc <TIM_Base_SetConfig+0x40>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3d      	ldr	r2, [pc, #244]	; (8001fd4 <TIM_Base_SetConfig+0x118>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00b      	beq.n	8001efc <TIM_Base_SetConfig+0x40>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3c      	ldr	r2, [pc, #240]	; (8001fd8 <TIM_Base_SetConfig+0x11c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d007      	beq.n	8001efc <TIM_Base_SetConfig+0x40>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a3b      	ldr	r2, [pc, #236]	; (8001fdc <TIM_Base_SetConfig+0x120>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d003      	beq.n	8001efc <TIM_Base_SetConfig+0x40>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a3a      	ldr	r2, [pc, #232]	; (8001fe0 <TIM_Base_SetConfig+0x124>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d108      	bne.n	8001f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a2f      	ldr	r2, [pc, #188]	; (8001fd0 <TIM_Base_SetConfig+0x114>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d02b      	beq.n	8001f6e <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1c:	d027      	beq.n	8001f6e <TIM_Base_SetConfig+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a2c      	ldr	r2, [pc, #176]	; (8001fd4 <TIM_Base_SetConfig+0x118>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d023      	beq.n	8001f6e <TIM_Base_SetConfig+0xb2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a2b      	ldr	r2, [pc, #172]	; (8001fd8 <TIM_Base_SetConfig+0x11c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01f      	beq.n	8001f6e <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a2a      	ldr	r2, [pc, #168]	; (8001fdc <TIM_Base_SetConfig+0x120>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01b      	beq.n	8001f6e <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a29      	ldr	r2, [pc, #164]	; (8001fe0 <TIM_Base_SetConfig+0x124>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d017      	beq.n	8001f6e <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a28      	ldr	r2, [pc, #160]	; (8001fe4 <TIM_Base_SetConfig+0x128>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a27      	ldr	r2, [pc, #156]	; (8001fe8 <TIM_Base_SetConfig+0x12c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00f      	beq.n	8001f6e <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a26      	ldr	r2, [pc, #152]	; (8001fec <TIM_Base_SetConfig+0x130>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00b      	beq.n	8001f6e <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a25      	ldr	r2, [pc, #148]	; (8001ff0 <TIM_Base_SetConfig+0x134>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a24      	ldr	r2, [pc, #144]	; (8001ff4 <TIM_Base_SetConfig+0x138>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d003      	beq.n	8001f6e <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <TIM_Base_SetConfig+0x13c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d108      	bne.n	8001f80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <TIM_Base_SetConfig+0x114>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d003      	beq.n	8001fb4 <TIM_Base_SetConfig+0xf8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <TIM_Base_SetConfig+0x124>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d103      	bne.n	8001fbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	615a      	str	r2, [r3, #20]
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40000400 	.word	0x40000400
 8001fd8:	40000800 	.word	0x40000800
 8001fdc:	40000c00 	.word	0x40000c00
 8001fe0:	40010400 	.word	0x40010400
 8001fe4:	40014000 	.word	0x40014000
 8001fe8:	40014400 	.word	0x40014400
 8001fec:	40014800 	.word	0x40014800
 8001ff0:	40001800 	.word	0x40001800
 8001ff4:	40001c00 	.word	0x40001c00
 8001ff8:	40002000 	.word	0x40002000

08001ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	f023 0201 	bic.w	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f023 0302 	bic.w	r3, r3, #2
 8002044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4313      	orrs	r3, r2
 800204e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <TIM_OC1_SetConfig+0xd8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d003      	beq.n	8002060 <TIM_OC1_SetConfig+0x64>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <TIM_OC1_SetConfig+0xdc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d10c      	bne.n	800207a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f023 0308 	bic.w	r3, r3, #8
 8002066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <TIM_OC1_SetConfig+0xd8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d003      	beq.n	800208a <TIM_OC1_SetConfig+0x8e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <TIM_OC1_SetConfig+0xdc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d111      	bne.n	80020ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	621a      	str	r2, [r3, #32]
}
 80020c8:	bf00      	nop
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40010400 	.word	0x40010400

080020dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	f023 0210 	bic.w	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800210a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f023 0320 	bic.w	r3, r3, #32
 8002126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <TIM_OC2_SetConfig+0xe4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d003      	beq.n	8002144 <TIM_OC2_SetConfig+0x68>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a21      	ldr	r2, [pc, #132]	; (80021c4 <TIM_OC2_SetConfig+0xe8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d10d      	bne.n	8002160 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800214a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800215e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <TIM_OC2_SetConfig+0xe4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d003      	beq.n	8002170 <TIM_OC2_SetConfig+0x94>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <TIM_OC2_SetConfig+0xe8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d113      	bne.n	8002198 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002176:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800217e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	621a      	str	r2, [r3, #32]
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40010000 	.word	0x40010000
 80021c4:	40010400 	.word	0x40010400

080021c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a21      	ldr	r2, [pc, #132]	; (80022a8 <TIM_OC3_SetConfig+0xe0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d003      	beq.n	800222e <TIM_OC3_SetConfig+0x66>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a20      	ldr	r2, [pc, #128]	; (80022ac <TIM_OC3_SetConfig+0xe4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10d      	bne.n	800224a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4313      	orrs	r3, r2
 8002240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <TIM_OC3_SetConfig+0xe0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d003      	beq.n	800225a <TIM_OC3_SetConfig+0x92>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a15      	ldr	r2, [pc, #84]	; (80022ac <TIM_OC3_SetConfig+0xe4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d113      	bne.n	8002282 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	621a      	str	r2, [r3, #32]
}
 800229c:	bf00      	nop
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40010000 	.word	0x40010000
 80022ac:	40010400 	.word	0x40010400

080022b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	031b      	lsls	r3, r3, #12
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <TIM_OC4_SetConfig+0xa4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <TIM_OC4_SetConfig+0x68>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a11      	ldr	r2, [pc, #68]	; (8002358 <TIM_OC4_SetConfig+0xa8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d109      	bne.n	800232c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800231e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	019b      	lsls	r3, r3, #6
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	621a      	str	r2, [r3, #32]
}
 8002346:	bf00      	nop
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40010000 	.word	0x40010000
 8002358:	40010400 	.word	0x40010400

0800235c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	2201      	movs	r2, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a1a      	ldr	r2, [r3, #32]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	43db      	mvns	r3, r3
 800237e:	401a      	ands	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	431a      	orrs	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	621a      	str	r2, [r3, #32]
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e03f      	b.n	8002460 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d106      	bne.n	80023fa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f837 	bl	8002468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2224      	movs	r2, #36	; 0x24
 80023fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002410:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f916 	bl	8002644 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002426:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002436:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002446:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b20      	cmp	r3, #32
 800249a:	f040 8083 	bne.w	80025a4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_UART_Transmit+0x2e>
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e07b      	b.n	80025a6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_UART_Transmit+0x40>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e074      	b.n	80025a6 <HAL_UART_Transmit+0x12a>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2221      	movs	r2, #33	; 0x21
 80024ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024d2:	f7fe f8bd 	bl	8000650 <HAL_GetTick>
 80024d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	88fa      	ldrh	r2, [r7, #6]
 80024dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	88fa      	ldrh	r2, [r7, #6]
 80024e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024e4:	e042      	b.n	800256c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fc:	d122      	bne.n	8002544 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2200      	movs	r2, #0
 8002506:	2180      	movs	r1, #128	; 0x80
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f850 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e046      	b.n	80025a6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800252a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d103      	bne.n	800253c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	3302      	adds	r3, #2
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	e017      	b.n	800256c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	3301      	adds	r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	e013      	b.n	800256c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2200      	movs	r2, #0
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f82d 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e023      	b.n	80025a6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	60ba      	str	r2, [r7, #8]
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1b7      	bne.n	80024e6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2200      	movs	r2, #0
 800257e:	2140      	movs	r1, #64	; 0x40
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f814 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e00a      	b.n	80025a6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e000      	b.n	80025a6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025be:	e02c      	b.n	800261a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d028      	beq.n	800261a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <UART_WaitOnFlagUntilTimeout+0x30>
 80025ce:	f7fe f83f 	bl	8000650 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d21d      	bcs.n	800261a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025ec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e00f      	b.n	800263a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4013      	ands	r3, r2
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	429a      	cmp	r2, r3
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	429a      	cmp	r2, r3
 8002636:	d0c3      	beq.n	80025c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002644:	b5b0      	push	{r4, r5, r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002684:	f023 030c 	bic.w	r3, r3, #12
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	68f9      	ldr	r1, [r7, #12]
 800268e:	430b      	orrs	r3, r1
 8002690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b0:	f040 80e4 	bne.w	800287c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4aab      	ldr	r2, [pc, #684]	; (8002968 <UART_SetConfig+0x324>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d004      	beq.n	80026c8 <UART_SetConfig+0x84>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4aaa      	ldr	r2, [pc, #680]	; (800296c <UART_SetConfig+0x328>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d16c      	bne.n	80027a2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80026c8:	f7ff f922 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	009a      	lsls	r2, r3, #2
 80026d6:	441a      	add	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	4aa3      	ldr	r2, [pc, #652]	; (8002970 <UART_SetConfig+0x32c>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	011c      	lsls	r4, r3, #4
 80026ec:	f7ff f910 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	009a      	lsls	r2, r3, #2
 80026fa:	441a      	add	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fbb2 f5f3 	udiv	r5, r2, r3
 8002706:	f7ff f903 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 800270a:	4602      	mov	r2, r0
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	009a      	lsls	r2, r3, #2
 8002714:	441a      	add	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	4a93      	ldr	r2, [pc, #588]	; (8002970 <UART_SetConfig+0x32c>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2264      	movs	r2, #100	; 0x64
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	1aeb      	subs	r3, r5, r3
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	3332      	adds	r3, #50	; 0x32
 8002734:	4a8e      	ldr	r2, [pc, #568]	; (8002970 <UART_SetConfig+0x32c>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002742:	441c      	add	r4, r3
 8002744:	f7ff f8e4 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 8002748:	4602      	mov	r2, r0
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	009a      	lsls	r2, r3, #2
 8002752:	441a      	add	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	fbb2 f5f3 	udiv	r5, r2, r3
 800275e:	f7ff f8d7 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 8002762:	4602      	mov	r2, r0
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	009a      	lsls	r2, r3, #2
 800276c:	441a      	add	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	4a7d      	ldr	r2, [pc, #500]	; (8002970 <UART_SetConfig+0x32c>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2264      	movs	r2, #100	; 0x64
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	1aeb      	subs	r3, r5, r3
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	3332      	adds	r3, #50	; 0x32
 800278c:	4a78      	ldr	r2, [pc, #480]	; (8002970 <UART_SetConfig+0x32c>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	f003 0207 	and.w	r2, r3, #7
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4422      	add	r2, r4
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	e154      	b.n	8002a4c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027a2:	f7ff f8a1 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 80027a6:	4602      	mov	r2, r0
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	009a      	lsls	r2, r3, #2
 80027b0:	441a      	add	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	4a6c      	ldr	r2, [pc, #432]	; (8002970 <UART_SetConfig+0x32c>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	011c      	lsls	r4, r3, #4
 80027c6:	f7ff f88f 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 80027ca:	4602      	mov	r2, r0
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009a      	lsls	r2, r3, #2
 80027d4:	441a      	add	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fbb2 f5f3 	udiv	r5, r2, r3
 80027e0:	f7ff f882 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	009a      	lsls	r2, r3, #2
 80027ee:	441a      	add	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	4a5d      	ldr	r2, [pc, #372]	; (8002970 <UART_SetConfig+0x32c>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	2264      	movs	r2, #100	; 0x64
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	1aeb      	subs	r3, r5, r3
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	3332      	adds	r3, #50	; 0x32
 800280e:	4a58      	ldr	r2, [pc, #352]	; (8002970 <UART_SetConfig+0x32c>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800281c:	441c      	add	r4, r3
 800281e:	f7ff f863 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 8002822:	4602      	mov	r2, r0
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	009a      	lsls	r2, r3, #2
 800282c:	441a      	add	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fbb2 f5f3 	udiv	r5, r2, r3
 8002838:	f7ff f856 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 800283c:	4602      	mov	r2, r0
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	009a      	lsls	r2, r3, #2
 8002846:	441a      	add	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	4a47      	ldr	r2, [pc, #284]	; (8002970 <UART_SetConfig+0x32c>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	2264      	movs	r2, #100	; 0x64
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	1aeb      	subs	r3, r5, r3
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	3332      	adds	r3, #50	; 0x32
 8002866:	4a42      	ldr	r2, [pc, #264]	; (8002970 <UART_SetConfig+0x32c>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	f003 0207 	and.w	r2, r3, #7
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4422      	add	r2, r4
 8002878:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800287a:	e0e7      	b.n	8002a4c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a39      	ldr	r2, [pc, #228]	; (8002968 <UART_SetConfig+0x324>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d004      	beq.n	8002890 <UART_SetConfig+0x24c>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a38      	ldr	r2, [pc, #224]	; (800296c <UART_SetConfig+0x328>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d171      	bne.n	8002974 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002890:	f7ff f83e 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 8002894:	4602      	mov	r2, r0
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	009a      	lsls	r2, r3, #2
 800289e:	441a      	add	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	4a31      	ldr	r2, [pc, #196]	; (8002970 <UART_SetConfig+0x32c>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	011c      	lsls	r4, r3, #4
 80028b4:	f7ff f82c 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	009a      	lsls	r2, r3, #2
 80028c2:	441a      	add	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80028ce:	f7ff f81f 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 80028d2:	4602      	mov	r2, r0
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	009a      	lsls	r2, r3, #2
 80028dc:	441a      	add	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	4a21      	ldr	r2, [pc, #132]	; (8002970 <UART_SetConfig+0x32c>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2264      	movs	r2, #100	; 0x64
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	1aeb      	subs	r3, r5, r3
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	3332      	adds	r3, #50	; 0x32
 80028fc:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <UART_SetConfig+0x32c>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002908:	441c      	add	r4, r3
 800290a:	f7ff f801 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 800290e:	4602      	mov	r2, r0
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009a      	lsls	r2, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fbb2 f5f3 	udiv	r5, r2, r3
 8002924:	f7fe fff4 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 8002928:	4602      	mov	r2, r0
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	009a      	lsls	r2, r3, #2
 8002932:	441a      	add	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	fbb2 f3f3 	udiv	r3, r2, r3
 800293e:	4a0c      	ldr	r2, [pc, #48]	; (8002970 <UART_SetConfig+0x32c>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	2264      	movs	r2, #100	; 0x64
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	1aeb      	subs	r3, r5, r3
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	3332      	adds	r3, #50	; 0x32
 8002952:	4a07      	ldr	r2, [pc, #28]	; (8002970 <UART_SetConfig+0x32c>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4422      	add	r2, r4
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	e071      	b.n	8002a4c <UART_SetConfig+0x408>
 8002968:	40011000 	.word	0x40011000
 800296c:	40011400 	.word	0x40011400
 8002970:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002974:	f7fe ffb8 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 8002978:	4602      	mov	r2, r0
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	009a      	lsls	r2, r3, #2
 8002982:	441a      	add	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	4a31      	ldr	r2, [pc, #196]	; (8002a54 <UART_SetConfig+0x410>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	011c      	lsls	r4, r3, #4
 8002998:	f7fe ffa6 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 800299c:	4602      	mov	r2, r0
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	009a      	lsls	r2, r3, #2
 80029a6:	441a      	add	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	fbb2 f5f3 	udiv	r5, r2, r3
 80029b2:	f7fe ff99 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 80029b6:	4602      	mov	r2, r0
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	009a      	lsls	r2, r3, #2
 80029c0:	441a      	add	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	4a21      	ldr	r2, [pc, #132]	; (8002a54 <UART_SetConfig+0x410>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2264      	movs	r2, #100	; 0x64
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	1aeb      	subs	r3, r5, r3
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	3332      	adds	r3, #50	; 0x32
 80029e0:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <UART_SetConfig+0x410>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ec:	441c      	add	r4, r3
 80029ee:	f7fe ff7b 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009a      	lsls	r2, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a08:	f7fe ff6e 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009a      	lsls	r2, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <UART_SetConfig+0x410>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	2264      	movs	r2, #100	; 0x64
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	1aeb      	subs	r3, r5, r3
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	3332      	adds	r3, #50	; 0x32
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <UART_SetConfig+0x410>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	f003 020f 	and.w	r2, r3, #15
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4422      	add	r2, r4
 8002a48:	609a      	str	r2, [r3, #8]
}
 8002a4a:	e7ff      	b.n	8002a4c <UART_SetConfig+0x408>
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bdb0      	pop	{r4, r5, r7, pc}
 8002a54:	51eb851f 	.word	0x51eb851f

08002a58 <Error_handler>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;
extern TIM_OC_InitTypeDef oc;

void Error_handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
	while(1);
 8002a5c:	e7fe      	b.n	8002a5c <Error_handler+0x4>
	...

08002a60 <GPIO_Init>:
}


void GPIO_Init()
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	4b35      	ldr	r3, [pc, #212]	; (8002b40 <GPIO_Init+0xe0>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a34      	ldr	r2, [pc, #208]	; (8002b40 <GPIO_Init+0xe0>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b32      	ldr	r3, [pc, #200]	; (8002b40 <GPIO_Init+0xe0>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <GPIO_Init+0xe0>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <GPIO_Init+0xe0>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <GPIO_Init+0xe0>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART2_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <GPIO_Init+0xe0>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <GPIO_Init+0xe0>)
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aac:	6413      	str	r3, [r2, #64]	; 0x40
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <GPIO_Init+0xe0>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_I2C1_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <GPIO_Init+0xe0>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <GPIO_Init+0xe0>)
 8002ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <GPIO_Init+0xe0>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
//	__HAL_RCC_TIM2_CLK_ENABLE();
//	__HAL_RCC_TIM4_CLK_ENABLE();

	 gpio.Pin = GPIO_PIN_2;
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <GPIO_Init+0xe4>)
 8002ad8:	2204      	movs	r2, #4
 8002ada:	601a      	str	r2, [r3, #0]
	 gpio.Mode =GPIO_MODE_AF_PP;
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <GPIO_Init+0xe4>)
 8002ade:	2202      	movs	r2, #2
 8002ae0:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_PULLUP;
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <GPIO_Init+0xe4>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae8:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <GPIO_Init+0xe4>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
	 gpio.Alternate =  GPIO_AF7_USART2; //TX
 8002aee:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <GPIO_Init+0xe4>)
 8002af0:	2207      	movs	r2, #7
 8002af2:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOA,&gpio);
 8002af4:	4913      	ldr	r1, [pc, #76]	; (8002b44 <GPIO_Init+0xe4>)
 8002af6:	4814      	ldr	r0, [pc, #80]	; (8002b48 <GPIO_Init+0xe8>)
 8002af8:	f7fd fef6 	bl	80008e8 <HAL_GPIO_Init>

	 gpio.Pin = GPIO_PIN_3; //RX
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <GPIO_Init+0xe4>)
 8002afe:	2208      	movs	r2, #8
 8002b00:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_OD;
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <GPIO_Init+0xe4>)
 8002b04:	2212      	movs	r2, #18
 8002b06:	605a      	str	r2, [r3, #4]
	 HAL_GPIO_Init(GPIOA,&gpio);
 8002b08:	490e      	ldr	r1, [pc, #56]	; (8002b44 <GPIO_Init+0xe4>)
 8002b0a:	480f      	ldr	r0, [pc, #60]	; (8002b48 <GPIO_Init+0xe8>)
 8002b0c:	f7fd feec 	bl	80008e8 <HAL_GPIO_Init>

	 gpio.Pin = GPIO_PIN_8 |GPIO_PIN_9;
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <GPIO_Init+0xe4>)
 8002b12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002b16:	601a      	str	r2, [r3, #0]
	 gpio.Mode = GPIO_MODE_AF_OD;
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <GPIO_Init+0xe4>)
 8002b1a:	2212      	movs	r2, #18
 8002b1c:	605a      	str	r2, [r3, #4]
	 gpio.Pull = GPIO_NOPULL;
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <GPIO_Init+0xe4>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <GPIO_Init+0xe4>)
 8002b26:	2202      	movs	r2, #2
 8002b28:	60da      	str	r2, [r3, #12]
	 gpio.Alternate = GPIO_AF4_I2C1;
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <GPIO_Init+0xe4>)
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	611a      	str	r2, [r3, #16]
	 HAL_GPIO_Init(GPIOB, &gpio);
 8002b30:	4904      	ldr	r1, [pc, #16]	; (8002b44 <GPIO_Init+0xe4>)
 8002b32:	4806      	ldr	r0, [pc, #24]	; (8002b4c <GPIO_Init+0xec>)
 8002b34:	f7fd fed8 	bl	80008e8 <HAL_GPIO_Init>
//	 gpio.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
//	 gpio.Pull = GPIO_NOPULL;
//	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
//	 HAL_GPIO_Init(GPIOB, &gpio);

}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40023800 	.word	0x40023800
 8002b44:	200005f0 	.word	0x200005f0
 8002b48:	40020000 	.word	0x40020000
 8002b4c:	40020400 	.word	0x40020400

08002b50 <UART2_Init>:

void UART2_Init()
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b54:	2026      	movs	r0, #38	; 0x26
 8002b56:	f7fd fea0 	bl	800089a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	210f      	movs	r1, #15
 8002b5e:	2026      	movs	r0, #38	; 0x26
 8002b60:	f7fd fe7f 	bl	8000862 <HAL_NVIC_SetPriority>

	uart2.Instance = USART2;
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <UART2_Init+0x54>)
 8002b66:	4a10      	ldr	r2, [pc, #64]	; (8002ba8 <UART2_Init+0x58>)
 8002b68:	601a      	str	r2, [r3, #0]
	uart2.Init.BaudRate = 115200;
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <UART2_Init+0x54>)
 8002b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b70:	605a      	str	r2, [r3, #4]
	uart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b72:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <UART2_Init+0x54>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
	uart2.Init.StopBits = UART_STOPBITS_1;
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <UART2_Init+0x54>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
	uart2.Init.Parity = UART_PARITY_NONE;
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <UART2_Init+0x54>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
	uart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <UART2_Init+0x54>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	619a      	str	r2, [r3, #24]
	uart2.Init.Mode = UART_MODE_TX_RX;
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <UART2_Init+0x54>)
 8002b8c:	220c      	movs	r2, #12
 8002b8e:	615a      	str	r2, [r3, #20]
	 if ( HAL_UART_Init(&uart2) != HAL_OK )
 8002b90:	4804      	ldr	r0, [pc, #16]	; (8002ba4 <UART2_Init+0x54>)
 8002b92:	f7ff fc1c 	bl	80023ce <HAL_UART_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <UART2_Init+0x50>
	 {
	 	Error_handler();
 8002b9c:	f7ff ff5c 	bl	8002a58 <Error_handler>
	 }
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000570 	.word	0x20000570
 8002ba8:	40004400 	.word	0x40004400

08002bac <I2C1_Init>:

void I2C1_Init()
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <I2C1_Init+0x48>)
 8002bb2:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <I2C1_Init+0x4c>)
 8002bb4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 300000;
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <I2C1_Init+0x48>)
 8002bb8:	4a10      	ldr	r2, [pc, #64]	; (8002bfc <I2C1_Init+0x50>)
 8002bba:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <I2C1_Init+0x48>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <I2C1_Init+0x48>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <I2C1_Init+0x48>)
 8002bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bce:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <I2C1_Init+0x48>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <I2C1_Init+0x48>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <I2C1_Init+0x48>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <I2C1_Init+0x48>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	621a      	str	r2, [r3, #32]
	HAL_I2C_Init(&hi2c1);
 8002be8:	4802      	ldr	r0, [pc, #8]	; (8002bf4 <I2C1_Init+0x48>)
 8002bea:	f7fe f849 	bl	8000c80 <HAL_I2C_Init>
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000500 	.word	0x20000500
 8002bf8:	40005400 	.word	0x40005400
 8002bfc:	000493e0 	.word	0x000493e0

08002c00 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <TIM2_IRQHandler+0x10>)
 8002c06:	f7fe ff63 	bl	8001ad0 <HAL_TIM_IRQHandler>
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200005b0 	.word	0x200005b0

08002c14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET)
 8002c1c:	2120      	movs	r1, #32
 8002c1e:	480a      	ldr	r0, [pc, #40]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002c20:	f7fd fffc 	bl	8000c1c <HAL_GPIO_ReadPin>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <HAL_TIM_PeriodElapsedCallback+0x22>
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	2120      	movs	r1, #32
 8002c2e:	4806      	ldr	r0, [pc, #24]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002c30:	f7fe f80c 	bl	8000c4c <HAL_GPIO_WritePin>
 else
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}
 8002c34:	e004      	b.n	8002c40 <HAL_TIM_PeriodElapsedCallback+0x2c>
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2120      	movs	r1, #32
 8002c3a:	4803      	ldr	r0, [pc, #12]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002c3c:	f7fe f806 	bl	8000c4c <HAL_GPIO_WritePin>
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40020000 	.word	0x40020000

08002c4c <TIM2_Init>:

void TIM2_Init()
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0

	htim2.Instance = TIM2;
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <TIM2_Init+0x4c>)
 8002c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c56:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8000-1;
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <TIM2_Init+0x4c>)
 8002c5a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002c5e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c60:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <TIM2_Init+0x4c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <TIM2_Init+0x4c>)
 8002c68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c6c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <TIM2_Init+0x4c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0;
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <TIM2_Init+0x4c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	615a      	str	r2, [r3, #20]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <TIM2_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim2);
 8002c80:	4805      	ldr	r0, [pc, #20]	; (8002c98 <TIM2_Init+0x4c>)
 8002c82:	f7fe fe59 	bl	8001938 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8002c86:	4804      	ldr	r0, [pc, #16]	; (8002c98 <TIM2_Init+0x4c>)
 8002c88:	f7fe fe8b 	bl	80019a2 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c8c:	201c      	movs	r0, #28
 8002c8e:	f7fd fe04 	bl	800089a <HAL_NVIC_EnableIRQ>
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200005b0 	.word	0x200005b0

08002c9c <TIM4_Init>:

void TIM4_Init()
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
	 htim4.Instance = TIM4;
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <TIM4_Init+0x7c>)
 8002ca2:	4a1e      	ldr	r2, [pc, #120]	; (8002d1c <TIM4_Init+0x80>)
 8002ca4:	601a      	str	r2, [r3, #0]
	 htim4.Init.Period = 1000 - 1;
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <TIM4_Init+0x7c>)
 8002ca8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cac:	60da      	str	r2, [r3, #12]
	 htim4.Init.Prescaler = 8000 - 1;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <TIM4_Init+0x7c>)
 8002cb0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002cb4:	605a      	str	r2, [r3, #4]
	 htim4.Init.ClockDivision = 0;
 8002cb6:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <TIM4_Init+0x7c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
	 htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cbc:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <TIM4_Init+0x7c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
	 htim4.Init.RepetitionCounter = 0;
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <TIM4_Init+0x7c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	615a      	str	r2, [r3, #20]
	 htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <TIM4_Init+0x7c>)
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	619a      	str	r2, [r3, #24]
	 HAL_TIM_PWM_Init(&htim4);
 8002cce:	4812      	ldr	r0, [pc, #72]	; (8002d18 <TIM4_Init+0x7c>)
 8002cd0:	f7fe fe8b 	bl	80019ea <HAL_TIM_PWM_Init>

	 oc.OCMode = TIM_OCMODE_PWM1;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <TIM4_Init+0x84>)
 8002cd6:	2260      	movs	r2, #96	; 0x60
 8002cd8:	601a      	str	r2, [r3, #0]
	 oc.Pulse = 100;
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <TIM4_Init+0x84>)
 8002cdc:	2264      	movs	r2, #100	; 0x64
 8002cde:	605a      	str	r2, [r3, #4]
	 oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <TIM4_Init+0x84>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
	 oc.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <TIM4_Init+0x84>)
 8002ce8:	2208      	movs	r2, #8
 8002cea:	60da      	str	r2, [r3, #12]
	 oc.OCFastMode = TIM_OCFAST_ENABLE;
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <TIM4_Init+0x84>)
 8002cee:	2204      	movs	r2, #4
 8002cf0:	611a      	str	r2, [r3, #16]
	 oc.OCIdleState = TIM_OCIDLESTATE_SET;
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <TIM4_Init+0x84>)
 8002cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf8:	615a      	str	r2, [r3, #20]
	 oc.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <TIM4_Init+0x84>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	619a      	str	r2, [r3, #24]
	 HAL_TIM_PWM_ConfigChannel(&htim4, &oc, TIM_CHANNEL_1);
 8002d00:	2200      	movs	r2, #0
 8002d02:	4907      	ldr	r1, [pc, #28]	; (8002d20 <TIM4_Init+0x84>)
 8002d04:	4804      	ldr	r0, [pc, #16]	; (8002d18 <TIM4_Init+0x7c>)
 8002d06:	f7fe ffeb 	bl	8001ce0 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <TIM4_Init+0x7c>)
 8002d0e:	f7fe fea1 	bl	8001a54 <HAL_TIM_PWM_Start>
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200004c0 	.word	0x200004c0
 8002d1c:	40000800 	.word	0x40000800
 8002d20:	20000554 	.word	0x20000554

08002d24 <main>:
*/

#include "main.h"

int main(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b09a      	sub	sp, #104	; 0x68
 8002d28:	af00      	add	r7, sp, #0
	char msg[100];

	HAL_Init();
 8002d2a:	f7fd fc29 	bl	8000580 <HAL_Init>
//	SystemConfigClk();
	GPIO_Init();
 8002d2e:	f7ff fe97 	bl	8002a60 <GPIO_Init>
    UART2_Init();
 8002d32:	f7ff ff0d 	bl	8002b50 <UART2_Init>
    I2C1_Init();
 8002d36:	f7ff ff39 	bl	8002bac <I2C1_Init>
    TIM2_Init();
 8002d3a:	f7ff ff87 	bl	8002c4c <TIM2_Init>
    TIM4_Init();
 8002d3e:	f7ff ffad 	bl	8002c9c <TIM4_Init>
    SSD1306_Init();
 8002d42:	f000 f8ab 	bl	8002e9c <SSD1306_Init>

    memset(msg,0,sizeof(msg));
 8002d46:	463b      	mov	r3, r7
 8002d48:	2264      	movs	r2, #100	; 0x64
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fc03 	bl	8003558 <memset>
	sprintf(msg,"SYSCLK : %ldHz\r\n",HAL_RCC_GetSysClockFreq());
 8002d52:	f7fe fce5 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 8002d56:	4602      	mov	r2, r0
 8002d58:	463b      	mov	r3, r7
 8002d5a:	4947      	ldr	r1, [pc, #284]	; (8002e78 <main+0x154>)
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fc03 	bl	8003568 <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002d62:	463b      	mov	r3, r7
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fa33 	bl	80001d0 <strlen>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	4639      	mov	r1, r7
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295
 8002d74:	4841      	ldr	r0, [pc, #260]	; (8002e7c <main+0x158>)
 8002d76:	f7ff fb81 	bl	800247c <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 8002d7a:	463b      	mov	r3, r7
 8002d7c:	2264      	movs	r2, #100	; 0x64
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fbe9 	bl	8003558 <memset>
	sprintf(msg,"HCLK   : %ldHz\r\n",HAL_RCC_GetHCLKFreq());
 8002d86:	f7fe fda3 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	463b      	mov	r3, r7
 8002d8e:	493c      	ldr	r1, [pc, #240]	; (8002e80 <main+0x15c>)
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fbe9 	bl	8003568 <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002d96:	463b      	mov	r3, r7
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fa19 	bl	80001d0 <strlen>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	4639      	mov	r1, r7
 8002da4:	f04f 33ff 	mov.w	r3, #4294967295
 8002da8:	4834      	ldr	r0, [pc, #208]	; (8002e7c <main+0x158>)
 8002daa:	f7ff fb67 	bl	800247c <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 8002dae:	463b      	mov	r3, r7
 8002db0:	2264      	movs	r2, #100	; 0x64
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fbcf 	bl	8003558 <memset>
	sprintf(msg,"PCLK1  : %ldHz\r\n",HAL_RCC_GetPCLK1Freq());
 8002dba:	f7fe fd95 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	463b      	mov	r3, r7
 8002dc2:	4930      	ldr	r1, [pc, #192]	; (8002e84 <main+0x160>)
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fbcf 	bl	8003568 <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002dca:	463b      	mov	r3, r7
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd f9ff 	bl	80001d0 <strlen>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	4639      	mov	r1, r7
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ddc:	4827      	ldr	r0, [pc, #156]	; (8002e7c <main+0x158>)
 8002dde:	f7ff fb4d 	bl	800247c <HAL_UART_Transmit>

	memset(msg,0,sizeof(msg));
 8002de2:	463b      	mov	r3, r7
 8002de4:	2264      	movs	r2, #100	; 0x64
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fbb5 	bl	8003558 <memset>
	sprintf(msg,"PCLK2  : %ldHz\r\n\n",HAL_RCC_GetPCLK2Freq());
 8002dee:	f7fe fd8f 	bl	8001910 <HAL_RCC_GetPCLK2Freq>
 8002df2:	4602      	mov	r2, r0
 8002df4:	463b      	mov	r3, r7
 8002df6:	4924      	ldr	r1, [pc, #144]	; (8002e88 <main+0x164>)
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fbb5 	bl	8003568 <siprintf>
	HAL_UART_Transmit(&uart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8002dfe:	463b      	mov	r3, r7
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd f9e5 	bl	80001d0 <strlen>
 8002e06:	4603      	mov	r3, r0
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4639      	mov	r1, r7
 8002e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e10:	481a      	ldr	r0, [pc, #104]	; (8002e7c <main+0x158>)
 8002e12:	f7ff fb33 	bl	800247c <HAL_UART_Transmit>

	int test = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	667b      	str	r3, [r7, #100]	; 0x64

	while(1){

		test++;
 8002e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	667b      	str	r3, [r7, #100]	; 0x64
		if (test >= 1000) {
 8002e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e26:	db10      	blt.n	8002e4a <main+0x126>
			SSD1306_GotoXY(10,27);
 8002e28:	211b      	movs	r1, #27
 8002e2a:	200a      	movs	r0, #10
 8002e2c:	f000 f9a0 	bl	8003170 <SSD1306_GotoXY>
			SSD1306_Puts("Hellooo!", &Font_7x10, 1);
 8002e30:	2201      	movs	r2, #1
 8002e32:	4916      	ldr	r1, [pc, #88]	; (8002e8c <main+0x168>)
 8002e34:	4816      	ldr	r0, [pc, #88]	; (8002e90 <main+0x16c>)
 8002e36:	f000 fa31 	bl	800329c <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8002e3a:	f000 f8f3 	bl	8003024 <SSD1306_UpdateScreen>
			HAL_Delay(100);
 8002e3e:	2064      	movs	r0, #100	; 0x64
 8002e40:	f7fd fc12 	bl	8000668 <HAL_Delay>
			test = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	667b      	str	r3, [r7, #100]	; 0x64
 8002e48:	e00a      	b.n	8002e60 <main+0x13c>
		} else
		{
			SSD1306_GotoXY(10,27);
 8002e4a:	211b      	movs	r1, #27
 8002e4c:	200a      	movs	r0, #10
 8002e4e:	f000 f98f 	bl	8003170 <SSD1306_GotoXY>
			SSD1306_Puts("Hi!", &Font_7x10, 1);
 8002e52:	2201      	movs	r2, #1
 8002e54:	490d      	ldr	r1, [pc, #52]	; (8002e8c <main+0x168>)
 8002e56:	480f      	ldr	r0, [pc, #60]	; (8002e94 <main+0x170>)
 8002e58:	f000 fa20 	bl	800329c <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8002e5c:	f000 f8e2 	bl	8003024 <SSD1306_UpdateScreen>
		}

		SSD1306_GotoXY(10,52);
 8002e60:	2134      	movs	r1, #52	; 0x34
 8002e62:	200a      	movs	r0, #10
 8002e64:	f000 f984 	bl	8003170 <SSD1306_GotoXY>
		SSD1306_Puts("Test@53.", &Font_7x10, 1);
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4908      	ldr	r1, [pc, #32]	; (8002e8c <main+0x168>)
 8002e6c:	480a      	ldr	r0, [pc, #40]	; (8002e98 <main+0x174>)
 8002e6e:	f000 fa15 	bl	800329c <SSD1306_Puts>
		SSD1306_UpdateScreen(); //display
 8002e72:	f000 f8d7 	bl	8003024 <SSD1306_UpdateScreen>
		test++;
 8002e76:	e7d0      	b.n	8002e1a <main+0xf6>
 8002e78:	08006588 	.word	0x08006588
 8002e7c:	20000570 	.word	0x20000570
 8002e80:	0800659c 	.word	0x0800659c
 8002e84:	080065b0 	.word	0x080065b0
 8002e88:	080065c4 	.word	0x080065c4
 8002e8c:	20000008 	.word	0x20000008
 8002e90:	080065d8 	.word	0x080065d8
 8002e94:	080065e4 	.word	0x080065e4
 8002e98:	080065e8 	.word	0x080065e8

08002e9c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002ea2:	f000 fa21 	bl	80032e8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002ea6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002eaa:	2201      	movs	r2, #1
 8002eac:	2178      	movs	r1, #120	; 0x78
 8002eae:	485b      	ldr	r0, [pc, #364]	; (800301c <SSD1306_Init+0x180>)
 8002eb0:	f7fe f916 	bl	80010e0 <HAL_I2C_IsDeviceReady>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e0a9      	b.n	8003012 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002ebe:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002ec2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002ec4:	e002      	b.n	8002ecc <SSD1306_Init+0x30>
		p--;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f9      	bne.n	8002ec6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002ed2:	22ae      	movs	r2, #174	; 0xae
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	2078      	movs	r0, #120	; 0x78
 8002ed8:	f000 fa62 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002edc:	2220      	movs	r2, #32
 8002ede:	2100      	movs	r1, #0
 8002ee0:	2078      	movs	r0, #120	; 0x78
 8002ee2:	f000 fa5d 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2078      	movs	r0, #120	; 0x78
 8002eec:	f000 fa58 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002ef0:	22b0      	movs	r2, #176	; 0xb0
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	2078      	movs	r0, #120	; 0x78
 8002ef6:	f000 fa53 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002efa:	22c8      	movs	r2, #200	; 0xc8
 8002efc:	2100      	movs	r1, #0
 8002efe:	2078      	movs	r0, #120	; 0x78
 8002f00:	f000 fa4e 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002f04:	2200      	movs	r2, #0
 8002f06:	2100      	movs	r1, #0
 8002f08:	2078      	movs	r0, #120	; 0x78
 8002f0a:	f000 fa49 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002f0e:	2210      	movs	r2, #16
 8002f10:	2100      	movs	r1, #0
 8002f12:	2078      	movs	r0, #120	; 0x78
 8002f14:	f000 fa44 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002f18:	2240      	movs	r2, #64	; 0x40
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	2078      	movs	r0, #120	; 0x78
 8002f1e:	f000 fa3f 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002f22:	2281      	movs	r2, #129	; 0x81
 8002f24:	2100      	movs	r1, #0
 8002f26:	2078      	movs	r0, #120	; 0x78
 8002f28:	f000 fa3a 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002f2c:	22ff      	movs	r2, #255	; 0xff
 8002f2e:	2100      	movs	r1, #0
 8002f30:	2078      	movs	r0, #120	; 0x78
 8002f32:	f000 fa35 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002f36:	22a1      	movs	r2, #161	; 0xa1
 8002f38:	2100      	movs	r1, #0
 8002f3a:	2078      	movs	r0, #120	; 0x78
 8002f3c:	f000 fa30 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002f40:	22a6      	movs	r2, #166	; 0xa6
 8002f42:	2100      	movs	r1, #0
 8002f44:	2078      	movs	r0, #120	; 0x78
 8002f46:	f000 fa2b 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002f4a:	22a8      	movs	r2, #168	; 0xa8
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	2078      	movs	r0, #120	; 0x78
 8002f50:	f000 fa26 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002f54:	223f      	movs	r2, #63	; 0x3f
 8002f56:	2100      	movs	r1, #0
 8002f58:	2078      	movs	r0, #120	; 0x78
 8002f5a:	f000 fa21 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002f5e:	22a4      	movs	r2, #164	; 0xa4
 8002f60:	2100      	movs	r1, #0
 8002f62:	2078      	movs	r0, #120	; 0x78
 8002f64:	f000 fa1c 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002f68:	22d3      	movs	r2, #211	; 0xd3
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	2078      	movs	r0, #120	; 0x78
 8002f6e:	f000 fa17 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002f72:	2200      	movs	r2, #0
 8002f74:	2100      	movs	r1, #0
 8002f76:	2078      	movs	r0, #120	; 0x78
 8002f78:	f000 fa12 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002f7c:	22d5      	movs	r2, #213	; 0xd5
 8002f7e:	2100      	movs	r1, #0
 8002f80:	2078      	movs	r0, #120	; 0x78
 8002f82:	f000 fa0d 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002f86:	22f0      	movs	r2, #240	; 0xf0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	2078      	movs	r0, #120	; 0x78
 8002f8c:	f000 fa08 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002f90:	22d9      	movs	r2, #217	; 0xd9
 8002f92:	2100      	movs	r1, #0
 8002f94:	2078      	movs	r0, #120	; 0x78
 8002f96:	f000 fa03 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002f9a:	2222      	movs	r2, #34	; 0x22
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2078      	movs	r0, #120	; 0x78
 8002fa0:	f000 f9fe 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002fa4:	22da      	movs	r2, #218	; 0xda
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	2078      	movs	r0, #120	; 0x78
 8002faa:	f000 f9f9 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002fae:	2212      	movs	r2, #18
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2078      	movs	r0, #120	; 0x78
 8002fb4:	f000 f9f4 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002fb8:	22db      	movs	r2, #219	; 0xdb
 8002fba:	2100      	movs	r1, #0
 8002fbc:	2078      	movs	r0, #120	; 0x78
 8002fbe:	f000 f9ef 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	2078      	movs	r0, #120	; 0x78
 8002fc8:	f000 f9ea 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002fcc:	228d      	movs	r2, #141	; 0x8d
 8002fce:	2100      	movs	r1, #0
 8002fd0:	2078      	movs	r0, #120	; 0x78
 8002fd2:	f000 f9e5 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002fd6:	2214      	movs	r2, #20
 8002fd8:	2100      	movs	r1, #0
 8002fda:	2078      	movs	r0, #120	; 0x78
 8002fdc:	f000 f9e0 	bl	80033a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002fe0:	22af      	movs	r2, #175	; 0xaf
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	2078      	movs	r0, #120	; 0x78
 8002fe6:	f000 f9db 	bl	80033a0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002fea:	222e      	movs	r2, #46	; 0x2e
 8002fec:	2100      	movs	r1, #0
 8002fee:	2078      	movs	r0, #120	; 0x78
 8002ff0:	f000 f9d6 	bl	80033a0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f000 f843 	bl	8003080 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002ffa:	f000 f813 	bl	8003024 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <SSD1306_Init+0x184>)
 8003000:	2200      	movs	r2, #0
 8003002:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <SSD1306_Init+0x184>)
 8003006:	2200      	movs	r2, #0
 8003008:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <SSD1306_Init+0x184>)
 800300c:	2201      	movs	r2, #1
 800300e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8003010:	2301      	movs	r3, #1
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000500 	.word	0x20000500
 8003020:	200004a4 	.word	0x200004a4

08003024 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800302a:	2300      	movs	r3, #0
 800302c:	71fb      	strb	r3, [r7, #7]
 800302e:	e01d      	b.n	800306c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	3b50      	subs	r3, #80	; 0x50
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	2100      	movs	r1, #0
 800303a:	2078      	movs	r0, #120	; 0x78
 800303c:	f000 f9b0 	bl	80033a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003040:	2200      	movs	r2, #0
 8003042:	2100      	movs	r1, #0
 8003044:	2078      	movs	r0, #120	; 0x78
 8003046:	f000 f9ab 	bl	80033a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800304a:	2210      	movs	r2, #16
 800304c:	2100      	movs	r1, #0
 800304e:	2078      	movs	r0, #120	; 0x78
 8003050:	f000 f9a6 	bl	80033a0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	01db      	lsls	r3, r3, #7
 8003058:	4a08      	ldr	r2, [pc, #32]	; (800307c <SSD1306_UpdateScreen+0x58>)
 800305a:	441a      	add	r2, r3
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	2140      	movs	r1, #64	; 0x40
 8003060:	2078      	movs	r0, #120	; 0x78
 8003062:	f000 f955 	bl	8003310 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	3301      	adds	r3, #1
 800306a:	71fb      	strb	r3, [r7, #7]
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	2b07      	cmp	r3, #7
 8003070:	d9de      	bls.n	8003030 <SSD1306_UpdateScreen+0xc>
	}
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200000a4 	.word	0x200000a4

08003080 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <SSD1306_Fill+0x14>
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <SSD1306_Fill+0x16>
 8003094:	23ff      	movs	r3, #255	; 0xff
 8003096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800309a:	4619      	mov	r1, r3
 800309c:	4803      	ldr	r0, [pc, #12]	; (80030ac <SSD1306_Fill+0x2c>)
 800309e:	f000 fa5b 	bl	8003558 <memset>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	200000a4 	.word	0x200000a4

080030b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	80fb      	strh	r3, [r7, #6]
 80030ba:	460b      	mov	r3, r1
 80030bc:	80bb      	strh	r3, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	70fb      	strb	r3, [r7, #3]
	if (
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	2b7f      	cmp	r3, #127	; 0x7f
 80030c6:	d848      	bhi.n	800315a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80030c8:	88bb      	ldrh	r3, [r7, #4]
 80030ca:	2b3f      	cmp	r3, #63	; 0x3f
 80030cc:	d845      	bhi.n	800315a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <SSD1306_DrawPixel+0xb8>)
 80030d0:	791b      	ldrb	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d11a      	bne.n	8003120 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80030ea:	88fa      	ldrh	r2, [r7, #6]
 80030ec:	88bb      	ldrh	r3, [r7, #4]
 80030ee:	08db      	lsrs	r3, r3, #3
 80030f0:	b298      	uxth	r0, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	01db      	lsls	r3, r3, #7
 80030f6:	4413      	add	r3, r2
 80030f8:	4a1c      	ldr	r2, [pc, #112]	; (800316c <SSD1306_DrawPixel+0xbc>)
 80030fa:	5cd3      	ldrb	r3, [r2, r3]
 80030fc:	b25a      	sxtb	r2, r3
 80030fe:	88bb      	ldrh	r3, [r7, #4]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	b25b      	sxtb	r3, r3
 800310c:	4313      	orrs	r3, r2
 800310e:	b259      	sxtb	r1, r3
 8003110:	88fa      	ldrh	r2, [r7, #6]
 8003112:	4603      	mov	r3, r0
 8003114:	01db      	lsls	r3, r3, #7
 8003116:	4413      	add	r3, r2
 8003118:	b2c9      	uxtb	r1, r1
 800311a:	4a14      	ldr	r2, [pc, #80]	; (800316c <SSD1306_DrawPixel+0xbc>)
 800311c:	54d1      	strb	r1, [r2, r3]
 800311e:	e01d      	b.n	800315c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003120:	88fa      	ldrh	r2, [r7, #6]
 8003122:	88bb      	ldrh	r3, [r7, #4]
 8003124:	08db      	lsrs	r3, r3, #3
 8003126:	b298      	uxth	r0, r3
 8003128:	4603      	mov	r3, r0
 800312a:	01db      	lsls	r3, r3, #7
 800312c:	4413      	add	r3, r2
 800312e:	4a0f      	ldr	r2, [pc, #60]	; (800316c <SSD1306_DrawPixel+0xbc>)
 8003130:	5cd3      	ldrb	r3, [r2, r3]
 8003132:	b25a      	sxtb	r2, r3
 8003134:	88bb      	ldrh	r3, [r7, #4]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f303 	lsl.w	r3, r1, r3
 8003140:	b25b      	sxtb	r3, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	b25b      	sxtb	r3, r3
 8003146:	4013      	ands	r3, r2
 8003148:	b259      	sxtb	r1, r3
 800314a:	88fa      	ldrh	r2, [r7, #6]
 800314c:	4603      	mov	r3, r0
 800314e:	01db      	lsls	r3, r3, #7
 8003150:	4413      	add	r3, r2
 8003152:	b2c9      	uxtb	r1, r1
 8003154:	4a05      	ldr	r2, [pc, #20]	; (800316c <SSD1306_DrawPixel+0xbc>)
 8003156:	54d1      	strb	r1, [r2, r3]
 8003158:	e000      	b.n	800315c <SSD1306_DrawPixel+0xac>
		return;
 800315a:	bf00      	nop
	}
}
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	200004a4 	.word	0x200004a4
 800316c:	200000a4 	.word	0x200000a4

08003170 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	460a      	mov	r2, r1
 800317a:	80fb      	strh	r3, [r7, #6]
 800317c:	4613      	mov	r3, r2
 800317e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003180:	4a05      	ldr	r2, [pc, #20]	; (8003198 <SSD1306_GotoXY+0x28>)
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003186:	4a04      	ldr	r2, [pc, #16]	; (8003198 <SSD1306_GotoXY+0x28>)
 8003188:	88bb      	ldrh	r3, [r7, #4]
 800318a:	8053      	strh	r3, [r2, #2]
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	200004a4 	.word	0x200004a4

0800319c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	71fb      	strb	r3, [r7, #7]
 80031a8:	4613      	mov	r3, r2
 80031aa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80031ac:	4b3a      	ldr	r3, [pc, #232]	; (8003298 <SSD1306_Putc+0xfc>)
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	4413      	add	r3, r2
	if (
 80031b8:	2b7f      	cmp	r3, #127	; 0x7f
 80031ba:	dc07      	bgt.n	80031cc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80031bc:	4b36      	ldr	r3, [pc, #216]	; (8003298 <SSD1306_Putc+0xfc>)
 80031be:	885b      	ldrh	r3, [r3, #2]
 80031c0:	461a      	mov	r2, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	785b      	ldrb	r3, [r3, #1]
 80031c6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80031c8:	2b3f      	cmp	r3, #63	; 0x3f
 80031ca:	dd01      	ble.n	80031d0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e05e      	b.n	800328e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	e04b      	b.n	800326e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	3b20      	subs	r3, #32
 80031de:	6839      	ldr	r1, [r7, #0]
 80031e0:	7849      	ldrb	r1, [r1, #1]
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	4619      	mov	r1, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	440b      	add	r3, r1
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	e030      	b.n	800325c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d010      	beq.n	800322c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800320a:	4b23      	ldr	r3, [pc, #140]	; (8003298 <SSD1306_Putc+0xfc>)
 800320c:	881a      	ldrh	r2, [r3, #0]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	b29b      	uxth	r3, r3
 8003212:	4413      	add	r3, r2
 8003214:	b298      	uxth	r0, r3
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <SSD1306_Putc+0xfc>)
 8003218:	885a      	ldrh	r2, [r3, #2]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	b29b      	uxth	r3, r3
 800321e:	4413      	add	r3, r2
 8003220:	b29b      	uxth	r3, r3
 8003222:	79ba      	ldrb	r2, [r7, #6]
 8003224:	4619      	mov	r1, r3
 8003226:	f7ff ff43 	bl	80030b0 <SSD1306_DrawPixel>
 800322a:	e014      	b.n	8003256 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800322c:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <SSD1306_Putc+0xfc>)
 800322e:	881a      	ldrh	r2, [r3, #0]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	b29b      	uxth	r3, r3
 8003234:	4413      	add	r3, r2
 8003236:	b298      	uxth	r0, r3
 8003238:	4b17      	ldr	r3, [pc, #92]	; (8003298 <SSD1306_Putc+0xfc>)
 800323a:	885a      	ldrh	r2, [r3, #2]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	b29b      	uxth	r3, r3
 8003240:	4413      	add	r3, r2
 8003242:	b299      	uxth	r1, r3
 8003244:	79bb      	ldrb	r3, [r7, #6]
 8003246:	2b00      	cmp	r3, #0
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	f7ff ff2d 	bl	80030b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	3301      	adds	r3, #1
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4293      	cmp	r3, r2
 8003266:	d3c8      	bcc.n	80031fa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	3301      	adds	r3, #1
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	785b      	ldrb	r3, [r3, #1]
 8003272:	461a      	mov	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	4293      	cmp	r3, r2
 8003278:	d3ad      	bcc.n	80031d6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <SSD1306_Putc+0xfc>)
 800327c:	881a      	ldrh	r2, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	4413      	add	r3, r2
 8003286:	b29a      	uxth	r2, r3
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <SSD1306_Putc+0xfc>)
 800328a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800328c:	79fb      	ldrb	r3, [r7, #7]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	200004a4 	.word	0x200004a4

0800329c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80032aa:	e012      	b.n	80032d2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	79fa      	ldrb	r2, [r7, #7]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff71 	bl	800319c <SSD1306_Putc>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d002      	beq.n	80032cc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	e008      	b.n	80032de <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3301      	adds	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1e8      	bne.n	80032ac <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	781b      	ldrb	r3, [r3, #0]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <ssd1306_I2C_Init+0x24>)
 80032f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80032f2:	e002      	b.n	80032fa <ssd1306_I2C_Init+0x12>
		p--;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f9      	bne.n	80032f4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	0003d090 	.word	0x0003d090

08003310 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b0c7      	sub	sp, #284	; 0x11c
 8003314:	af02      	add	r7, sp, #8
 8003316:	4604      	mov	r4, r0
 8003318:	4608      	mov	r0, r1
 800331a:	4639      	mov	r1, r7
 800331c:	600a      	str	r2, [r1, #0]
 800331e:	4619      	mov	r1, r3
 8003320:	1dfb      	adds	r3, r7, #7
 8003322:	4622      	mov	r2, r4
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	1dbb      	adds	r3, r7, #6
 8003328:	4602      	mov	r2, r0
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	460a      	mov	r2, r1
 8003330:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003332:	f107 030c 	add.w	r3, r7, #12
 8003336:	1dba      	adds	r2, r7, #6
 8003338:	7812      	ldrb	r2, [r2, #0]
 800333a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800333c:	2300      	movs	r3, #0
 800333e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003342:	e010      	b.n	8003366 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8003344:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003348:	463a      	mov	r2, r7
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	441a      	add	r2, r3
 800334e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003352:	3301      	adds	r3, #1
 8003354:	7811      	ldrb	r1, [r2, #0]
 8003356:	f107 020c 	add.w	r2, r7, #12
 800335a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800335c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003360:	3301      	adds	r3, #1
 8003362:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003366:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800336a:	b29b      	uxth	r3, r3
 800336c:	1d3a      	adds	r2, r7, #4
 800336e:	8812      	ldrh	r2, [r2, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d8e7      	bhi.n	8003344 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003374:	1dfb      	adds	r3, r7, #7
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	b299      	uxth	r1, r3
 800337a:	1d3b      	adds	r3, r7, #4
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	3301      	adds	r3, #1
 8003380:	b298      	uxth	r0, r3
 8003382:	f107 020c 	add.w	r2, r7, #12
 8003386:	230a      	movs	r3, #10
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	4603      	mov	r3, r0
 800338c:	4803      	ldr	r0, [pc, #12]	; (800339c <ssd1306_I2C_WriteMulti+0x8c>)
 800338e:	f7fd fda9 	bl	8000ee4 <HAL_I2C_Master_Transmit>
}
 8003392:	bf00      	nop
 8003394:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003398:	46bd      	mov	sp, r7
 800339a:	bd90      	pop	{r4, r7, pc}
 800339c:	20000500 	.word	0x20000500

080033a0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
 80033aa:	460b      	mov	r3, r1
 80033ac:	71bb      	strb	r3, [r7, #6]
 80033ae:	4613      	mov	r3, r2
 80033b0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80033b2:	79bb      	ldrb	r3, [r7, #6]
 80033b4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80033b6:	797b      	ldrb	r3, [r7, #5]
 80033b8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	b299      	uxth	r1, r3
 80033be:	f107 020c 	add.w	r2, r7, #12
 80033c2:	230a      	movs	r3, #10
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2302      	movs	r3, #2
 80033c8:	4803      	ldr	r0, [pc, #12]	; (80033d8 <ssd1306_I2C_Write+0x38>)
 80033ca:	f7fd fd8b 	bl	8000ee4 <HAL_I2C_Master_Transmit>
}
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000500 	.word	0x20000500

080033dc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80033e0:	f7fd f922 	bl	8000628 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80033e4:	f7fd fa73 	bl	80008ce <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 80033e8:	bf00      	nop
 80033ea:	bd80      	pop	{r7, pc}

080033ec <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <_sbrk+0x50>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d102      	bne.n	8003402 <_sbrk+0x16>
		heap_end = &end;
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <_sbrk+0x50>)
 80033fe:	4a10      	ldr	r2, [pc, #64]	; (8003440 <_sbrk+0x54>)
 8003400:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003402:	4b0e      	ldr	r3, [pc, #56]	; (800343c <_sbrk+0x50>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <_sbrk+0x50>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	466a      	mov	r2, sp
 8003412:	4293      	cmp	r3, r2
 8003414:	d907      	bls.n	8003426 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003416:	f000 f875 	bl	8003504 <__errno>
 800341a:	4602      	mov	r2, r0
 800341c:	230c      	movs	r3, #12
 800341e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003420:	f04f 33ff 	mov.w	r3, #4294967295
 8003424:	e006      	b.n	8003434 <_sbrk+0x48>
	}

	heap_end += incr;
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <_sbrk+0x50>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4413      	add	r3, r2
 800342e:	4a03      	ldr	r2, [pc, #12]	; (800343c <_sbrk+0x50>)
 8003430:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003432:	68fb      	ldr	r3, [r7, #12]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	200004b0 	.word	0x200004b0
 8003440:	20000608 	.word	0x20000608

08003444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003448:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <SystemInit+0x60>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <SystemInit+0x60>)
 8003450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003458:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <SystemInit+0x64>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <SystemInit+0x64>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003464:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <SystemInit+0x64>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800346a:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <SystemInit+0x64>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a0e      	ldr	r2, [pc, #56]	; (80034a8 <SystemInit+0x64>)
 8003470:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <SystemInit+0x64>)
 800347c:	4a0b      	ldr	r2, [pc, #44]	; (80034ac <SystemInit+0x68>)
 800347e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <SystemInit+0x64>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a08      	ldr	r2, [pc, #32]	; (80034a8 <SystemInit+0x64>)
 8003486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800348a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <SystemInit+0x64>)
 800348e:	2200      	movs	r2, #0
 8003490:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <SystemInit+0x60>)
 8003494:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003498:	609a      	str	r2, [r3, #8]
#endif
}
 800349a:	bf00      	nop
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000ed00 	.word	0xe000ed00
 80034a8:	40023800 	.word	0x40023800
 80034ac:	24003010 	.word	0x24003010

080034b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034b6:	e003      	b.n	80034c0 <LoopCopyDataInit>

080034b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034be:	3104      	adds	r1, #4

080034c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034c8:	d3f6      	bcc.n	80034b8 <CopyDataInit>
  ldr  r2, =_sbss
 80034ca:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034cc:	e002      	b.n	80034d4 <LoopFillZerobss>

080034ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034d0:	f842 3b04 	str.w	r3, [r2], #4

080034d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034d8:	d3f9      	bcc.n	80034ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034da:	f7ff ffb3 	bl	8003444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034de:	f000 f817 	bl	8003510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034e2:	f7ff fc1f 	bl	8002d24 <main>
  bx  lr    
 80034e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80034ec:	08006668 	.word	0x08006668
  ldr  r0, =_sdata
 80034f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80034f4:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80034f8:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80034fc:	20000608 	.word	0x20000608

08003500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003500:	e7fe      	b.n	8003500 <ADC_IRQHandler>
	...

08003504 <__errno>:
 8003504:	4b01      	ldr	r3, [pc, #4]	; (800350c <__errno+0x8>)
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000024 	.word	0x20000024

08003510 <__libc_init_array>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	4e0d      	ldr	r6, [pc, #52]	; (8003548 <__libc_init_array+0x38>)
 8003514:	4c0d      	ldr	r4, [pc, #52]	; (800354c <__libc_init_array+0x3c>)
 8003516:	1ba4      	subs	r4, r4, r6
 8003518:	10a4      	asrs	r4, r4, #2
 800351a:	2500      	movs	r5, #0
 800351c:	42a5      	cmp	r5, r4
 800351e:	d109      	bne.n	8003534 <__libc_init_array+0x24>
 8003520:	4e0b      	ldr	r6, [pc, #44]	; (8003550 <__libc_init_array+0x40>)
 8003522:	4c0c      	ldr	r4, [pc, #48]	; (8003554 <__libc_init_array+0x44>)
 8003524:	f003 f88c 	bl	8006640 <_init>
 8003528:	1ba4      	subs	r4, r4, r6
 800352a:	10a4      	asrs	r4, r4, #2
 800352c:	2500      	movs	r5, #0
 800352e:	42a5      	cmp	r5, r4
 8003530:	d105      	bne.n	800353e <__libc_init_array+0x2e>
 8003532:	bd70      	pop	{r4, r5, r6, pc}
 8003534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003538:	4798      	blx	r3
 800353a:	3501      	adds	r5, #1
 800353c:	e7ee      	b.n	800351c <__libc_init_array+0xc>
 800353e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003542:	4798      	blx	r3
 8003544:	3501      	adds	r5, #1
 8003546:	e7f2      	b.n	800352e <__libc_init_array+0x1e>
 8003548:	08006660 	.word	0x08006660
 800354c:	08006660 	.word	0x08006660
 8003550:	08006660 	.word	0x08006660
 8003554:	08006664 	.word	0x08006664

08003558 <memset>:
 8003558:	4402      	add	r2, r0
 800355a:	4603      	mov	r3, r0
 800355c:	4293      	cmp	r3, r2
 800355e:	d100      	bne.n	8003562 <memset+0xa>
 8003560:	4770      	bx	lr
 8003562:	f803 1b01 	strb.w	r1, [r3], #1
 8003566:	e7f9      	b.n	800355c <memset+0x4>

08003568 <siprintf>:
 8003568:	b40e      	push	{r1, r2, r3}
 800356a:	b500      	push	{lr}
 800356c:	b09c      	sub	sp, #112	; 0x70
 800356e:	ab1d      	add	r3, sp, #116	; 0x74
 8003570:	9002      	str	r0, [sp, #8]
 8003572:	9006      	str	r0, [sp, #24]
 8003574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003578:	4809      	ldr	r0, [pc, #36]	; (80035a0 <siprintf+0x38>)
 800357a:	9107      	str	r1, [sp, #28]
 800357c:	9104      	str	r1, [sp, #16]
 800357e:	4909      	ldr	r1, [pc, #36]	; (80035a4 <siprintf+0x3c>)
 8003580:	f853 2b04 	ldr.w	r2, [r3], #4
 8003584:	9105      	str	r1, [sp, #20]
 8003586:	6800      	ldr	r0, [r0, #0]
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	a902      	add	r1, sp, #8
 800358c:	f000 f866 	bl	800365c <_svfiprintf_r>
 8003590:	9b02      	ldr	r3, [sp, #8]
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	b01c      	add	sp, #112	; 0x70
 8003598:	f85d eb04 	ldr.w	lr, [sp], #4
 800359c:	b003      	add	sp, #12
 800359e:	4770      	bx	lr
 80035a0:	20000024 	.word	0x20000024
 80035a4:	ffff0208 	.word	0xffff0208

080035a8 <__ssputs_r>:
 80035a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ac:	688e      	ldr	r6, [r1, #8]
 80035ae:	429e      	cmp	r6, r3
 80035b0:	4682      	mov	sl, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	4690      	mov	r8, r2
 80035b6:	4699      	mov	r9, r3
 80035b8:	d837      	bhi.n	800362a <__ssputs_r+0x82>
 80035ba:	898a      	ldrh	r2, [r1, #12]
 80035bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035c0:	d031      	beq.n	8003626 <__ssputs_r+0x7e>
 80035c2:	6825      	ldr	r5, [r4, #0]
 80035c4:	6909      	ldr	r1, [r1, #16]
 80035c6:	1a6f      	subs	r7, r5, r1
 80035c8:	6965      	ldr	r5, [r4, #20]
 80035ca:	2302      	movs	r3, #2
 80035cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80035d4:	f109 0301 	add.w	r3, r9, #1
 80035d8:	443b      	add	r3, r7
 80035da:	429d      	cmp	r5, r3
 80035dc:	bf38      	it	cc
 80035de:	461d      	movcc	r5, r3
 80035e0:	0553      	lsls	r3, r2, #21
 80035e2:	d530      	bpl.n	8003646 <__ssputs_r+0x9e>
 80035e4:	4629      	mov	r1, r5
 80035e6:	f000 fb2b 	bl	8003c40 <_malloc_r>
 80035ea:	4606      	mov	r6, r0
 80035ec:	b950      	cbnz	r0, 8003604 <__ssputs_r+0x5c>
 80035ee:	230c      	movs	r3, #12
 80035f0:	f8ca 3000 	str.w	r3, [sl]
 80035f4:	89a3      	ldrh	r3, [r4, #12]
 80035f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035fa:	81a3      	strh	r3, [r4, #12]
 80035fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003604:	463a      	mov	r2, r7
 8003606:	6921      	ldr	r1, [r4, #16]
 8003608:	f000 faa8 	bl	8003b5c <memcpy>
 800360c:	89a3      	ldrh	r3, [r4, #12]
 800360e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003616:	81a3      	strh	r3, [r4, #12]
 8003618:	6126      	str	r6, [r4, #16]
 800361a:	6165      	str	r5, [r4, #20]
 800361c:	443e      	add	r6, r7
 800361e:	1bed      	subs	r5, r5, r7
 8003620:	6026      	str	r6, [r4, #0]
 8003622:	60a5      	str	r5, [r4, #8]
 8003624:	464e      	mov	r6, r9
 8003626:	454e      	cmp	r6, r9
 8003628:	d900      	bls.n	800362c <__ssputs_r+0x84>
 800362a:	464e      	mov	r6, r9
 800362c:	4632      	mov	r2, r6
 800362e:	4641      	mov	r1, r8
 8003630:	6820      	ldr	r0, [r4, #0]
 8003632:	f000 fa9e 	bl	8003b72 <memmove>
 8003636:	68a3      	ldr	r3, [r4, #8]
 8003638:	1b9b      	subs	r3, r3, r6
 800363a:	60a3      	str	r3, [r4, #8]
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	441e      	add	r6, r3
 8003640:	6026      	str	r6, [r4, #0]
 8003642:	2000      	movs	r0, #0
 8003644:	e7dc      	b.n	8003600 <__ssputs_r+0x58>
 8003646:	462a      	mov	r2, r5
 8003648:	f000 fb54 	bl	8003cf4 <_realloc_r>
 800364c:	4606      	mov	r6, r0
 800364e:	2800      	cmp	r0, #0
 8003650:	d1e2      	bne.n	8003618 <__ssputs_r+0x70>
 8003652:	6921      	ldr	r1, [r4, #16]
 8003654:	4650      	mov	r0, sl
 8003656:	f000 faa5 	bl	8003ba4 <_free_r>
 800365a:	e7c8      	b.n	80035ee <__ssputs_r+0x46>

0800365c <_svfiprintf_r>:
 800365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003660:	461d      	mov	r5, r3
 8003662:	898b      	ldrh	r3, [r1, #12]
 8003664:	061f      	lsls	r7, r3, #24
 8003666:	b09d      	sub	sp, #116	; 0x74
 8003668:	4680      	mov	r8, r0
 800366a:	460c      	mov	r4, r1
 800366c:	4616      	mov	r6, r2
 800366e:	d50f      	bpl.n	8003690 <_svfiprintf_r+0x34>
 8003670:	690b      	ldr	r3, [r1, #16]
 8003672:	b96b      	cbnz	r3, 8003690 <_svfiprintf_r+0x34>
 8003674:	2140      	movs	r1, #64	; 0x40
 8003676:	f000 fae3 	bl	8003c40 <_malloc_r>
 800367a:	6020      	str	r0, [r4, #0]
 800367c:	6120      	str	r0, [r4, #16]
 800367e:	b928      	cbnz	r0, 800368c <_svfiprintf_r+0x30>
 8003680:	230c      	movs	r3, #12
 8003682:	f8c8 3000 	str.w	r3, [r8]
 8003686:	f04f 30ff 	mov.w	r0, #4294967295
 800368a:	e0c8      	b.n	800381e <_svfiprintf_r+0x1c2>
 800368c:	2340      	movs	r3, #64	; 0x40
 800368e:	6163      	str	r3, [r4, #20]
 8003690:	2300      	movs	r3, #0
 8003692:	9309      	str	r3, [sp, #36]	; 0x24
 8003694:	2320      	movs	r3, #32
 8003696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800369a:	2330      	movs	r3, #48	; 0x30
 800369c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036a0:	9503      	str	r5, [sp, #12]
 80036a2:	f04f 0b01 	mov.w	fp, #1
 80036a6:	4637      	mov	r7, r6
 80036a8:	463d      	mov	r5, r7
 80036aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80036ae:	b10b      	cbz	r3, 80036b4 <_svfiprintf_r+0x58>
 80036b0:	2b25      	cmp	r3, #37	; 0x25
 80036b2:	d13e      	bne.n	8003732 <_svfiprintf_r+0xd6>
 80036b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80036b8:	d00b      	beq.n	80036d2 <_svfiprintf_r+0x76>
 80036ba:	4653      	mov	r3, sl
 80036bc:	4632      	mov	r2, r6
 80036be:	4621      	mov	r1, r4
 80036c0:	4640      	mov	r0, r8
 80036c2:	f7ff ff71 	bl	80035a8 <__ssputs_r>
 80036c6:	3001      	adds	r0, #1
 80036c8:	f000 80a4 	beq.w	8003814 <_svfiprintf_r+0x1b8>
 80036cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ce:	4453      	add	r3, sl
 80036d0:	9309      	str	r3, [sp, #36]	; 0x24
 80036d2:	783b      	ldrb	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 809d 	beq.w	8003814 <_svfiprintf_r+0x1b8>
 80036da:	2300      	movs	r3, #0
 80036dc:	f04f 32ff 	mov.w	r2, #4294967295
 80036e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036e4:	9304      	str	r3, [sp, #16]
 80036e6:	9307      	str	r3, [sp, #28]
 80036e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036ec:	931a      	str	r3, [sp, #104]	; 0x68
 80036ee:	462f      	mov	r7, r5
 80036f0:	2205      	movs	r2, #5
 80036f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80036f6:	4850      	ldr	r0, [pc, #320]	; (8003838 <_svfiprintf_r+0x1dc>)
 80036f8:	f7fc fd72 	bl	80001e0 <memchr>
 80036fc:	9b04      	ldr	r3, [sp, #16]
 80036fe:	b9d0      	cbnz	r0, 8003736 <_svfiprintf_r+0xda>
 8003700:	06d9      	lsls	r1, r3, #27
 8003702:	bf44      	itt	mi
 8003704:	2220      	movmi	r2, #32
 8003706:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800370a:	071a      	lsls	r2, r3, #28
 800370c:	bf44      	itt	mi
 800370e:	222b      	movmi	r2, #43	; 0x2b
 8003710:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003714:	782a      	ldrb	r2, [r5, #0]
 8003716:	2a2a      	cmp	r2, #42	; 0x2a
 8003718:	d015      	beq.n	8003746 <_svfiprintf_r+0xea>
 800371a:	9a07      	ldr	r2, [sp, #28]
 800371c:	462f      	mov	r7, r5
 800371e:	2000      	movs	r0, #0
 8003720:	250a      	movs	r5, #10
 8003722:	4639      	mov	r1, r7
 8003724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003728:	3b30      	subs	r3, #48	; 0x30
 800372a:	2b09      	cmp	r3, #9
 800372c:	d94d      	bls.n	80037ca <_svfiprintf_r+0x16e>
 800372e:	b1b8      	cbz	r0, 8003760 <_svfiprintf_r+0x104>
 8003730:	e00f      	b.n	8003752 <_svfiprintf_r+0xf6>
 8003732:	462f      	mov	r7, r5
 8003734:	e7b8      	b.n	80036a8 <_svfiprintf_r+0x4c>
 8003736:	4a40      	ldr	r2, [pc, #256]	; (8003838 <_svfiprintf_r+0x1dc>)
 8003738:	1a80      	subs	r0, r0, r2
 800373a:	fa0b f000 	lsl.w	r0, fp, r0
 800373e:	4318      	orrs	r0, r3
 8003740:	9004      	str	r0, [sp, #16]
 8003742:	463d      	mov	r5, r7
 8003744:	e7d3      	b.n	80036ee <_svfiprintf_r+0x92>
 8003746:	9a03      	ldr	r2, [sp, #12]
 8003748:	1d11      	adds	r1, r2, #4
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	9103      	str	r1, [sp, #12]
 800374e:	2a00      	cmp	r2, #0
 8003750:	db01      	blt.n	8003756 <_svfiprintf_r+0xfa>
 8003752:	9207      	str	r2, [sp, #28]
 8003754:	e004      	b.n	8003760 <_svfiprintf_r+0x104>
 8003756:	4252      	negs	r2, r2
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	9207      	str	r2, [sp, #28]
 800375e:	9304      	str	r3, [sp, #16]
 8003760:	783b      	ldrb	r3, [r7, #0]
 8003762:	2b2e      	cmp	r3, #46	; 0x2e
 8003764:	d10c      	bne.n	8003780 <_svfiprintf_r+0x124>
 8003766:	787b      	ldrb	r3, [r7, #1]
 8003768:	2b2a      	cmp	r3, #42	; 0x2a
 800376a:	d133      	bne.n	80037d4 <_svfiprintf_r+0x178>
 800376c:	9b03      	ldr	r3, [sp, #12]
 800376e:	1d1a      	adds	r2, r3, #4
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	9203      	str	r2, [sp, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	bfb8      	it	lt
 8003778:	f04f 33ff 	movlt.w	r3, #4294967295
 800377c:	3702      	adds	r7, #2
 800377e:	9305      	str	r3, [sp, #20]
 8003780:	4d2e      	ldr	r5, [pc, #184]	; (800383c <_svfiprintf_r+0x1e0>)
 8003782:	7839      	ldrb	r1, [r7, #0]
 8003784:	2203      	movs	r2, #3
 8003786:	4628      	mov	r0, r5
 8003788:	f7fc fd2a 	bl	80001e0 <memchr>
 800378c:	b138      	cbz	r0, 800379e <_svfiprintf_r+0x142>
 800378e:	2340      	movs	r3, #64	; 0x40
 8003790:	1b40      	subs	r0, r0, r5
 8003792:	fa03 f000 	lsl.w	r0, r3, r0
 8003796:	9b04      	ldr	r3, [sp, #16]
 8003798:	4303      	orrs	r3, r0
 800379a:	3701      	adds	r7, #1
 800379c:	9304      	str	r3, [sp, #16]
 800379e:	7839      	ldrb	r1, [r7, #0]
 80037a0:	4827      	ldr	r0, [pc, #156]	; (8003840 <_svfiprintf_r+0x1e4>)
 80037a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037a6:	2206      	movs	r2, #6
 80037a8:	1c7e      	adds	r6, r7, #1
 80037aa:	f7fc fd19 	bl	80001e0 <memchr>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d038      	beq.n	8003824 <_svfiprintf_r+0x1c8>
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <_svfiprintf_r+0x1e8>)
 80037b4:	bb13      	cbnz	r3, 80037fc <_svfiprintf_r+0x1a0>
 80037b6:	9b03      	ldr	r3, [sp, #12]
 80037b8:	3307      	adds	r3, #7
 80037ba:	f023 0307 	bic.w	r3, r3, #7
 80037be:	3308      	adds	r3, #8
 80037c0:	9303      	str	r3, [sp, #12]
 80037c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c4:	444b      	add	r3, r9
 80037c6:	9309      	str	r3, [sp, #36]	; 0x24
 80037c8:	e76d      	b.n	80036a6 <_svfiprintf_r+0x4a>
 80037ca:	fb05 3202 	mla	r2, r5, r2, r3
 80037ce:	2001      	movs	r0, #1
 80037d0:	460f      	mov	r7, r1
 80037d2:	e7a6      	b.n	8003722 <_svfiprintf_r+0xc6>
 80037d4:	2300      	movs	r3, #0
 80037d6:	3701      	adds	r7, #1
 80037d8:	9305      	str	r3, [sp, #20]
 80037da:	4619      	mov	r1, r3
 80037dc:	250a      	movs	r5, #10
 80037de:	4638      	mov	r0, r7
 80037e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037e4:	3a30      	subs	r2, #48	; 0x30
 80037e6:	2a09      	cmp	r2, #9
 80037e8:	d903      	bls.n	80037f2 <_svfiprintf_r+0x196>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0c8      	beq.n	8003780 <_svfiprintf_r+0x124>
 80037ee:	9105      	str	r1, [sp, #20]
 80037f0:	e7c6      	b.n	8003780 <_svfiprintf_r+0x124>
 80037f2:	fb05 2101 	mla	r1, r5, r1, r2
 80037f6:	2301      	movs	r3, #1
 80037f8:	4607      	mov	r7, r0
 80037fa:	e7f0      	b.n	80037de <_svfiprintf_r+0x182>
 80037fc:	ab03      	add	r3, sp, #12
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	4622      	mov	r2, r4
 8003802:	4b11      	ldr	r3, [pc, #68]	; (8003848 <_svfiprintf_r+0x1ec>)
 8003804:	a904      	add	r1, sp, #16
 8003806:	4640      	mov	r0, r8
 8003808:	f3af 8000 	nop.w
 800380c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003810:	4681      	mov	r9, r0
 8003812:	d1d6      	bne.n	80037c2 <_svfiprintf_r+0x166>
 8003814:	89a3      	ldrh	r3, [r4, #12]
 8003816:	065b      	lsls	r3, r3, #25
 8003818:	f53f af35 	bmi.w	8003686 <_svfiprintf_r+0x2a>
 800381c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800381e:	b01d      	add	sp, #116	; 0x74
 8003820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003824:	ab03      	add	r3, sp, #12
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	4622      	mov	r2, r4
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <_svfiprintf_r+0x1ec>)
 800382c:	a904      	add	r1, sp, #16
 800382e:	4640      	mov	r0, r8
 8003830:	f000 f882 	bl	8003938 <_printf_i>
 8003834:	e7ea      	b.n	800380c <_svfiprintf_r+0x1b0>
 8003836:	bf00      	nop
 8003838:	0800660c 	.word	0x0800660c
 800383c:	08006612 	.word	0x08006612
 8003840:	08006616 	.word	0x08006616
 8003844:	00000000 	.word	0x00000000
 8003848:	080035a9 	.word	0x080035a9

0800384c <_printf_common>:
 800384c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003850:	4691      	mov	r9, r2
 8003852:	461f      	mov	r7, r3
 8003854:	688a      	ldr	r2, [r1, #8]
 8003856:	690b      	ldr	r3, [r1, #16]
 8003858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800385c:	4293      	cmp	r3, r2
 800385e:	bfb8      	it	lt
 8003860:	4613      	movlt	r3, r2
 8003862:	f8c9 3000 	str.w	r3, [r9]
 8003866:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800386a:	4606      	mov	r6, r0
 800386c:	460c      	mov	r4, r1
 800386e:	b112      	cbz	r2, 8003876 <_printf_common+0x2a>
 8003870:	3301      	adds	r3, #1
 8003872:	f8c9 3000 	str.w	r3, [r9]
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	0699      	lsls	r1, r3, #26
 800387a:	bf42      	ittt	mi
 800387c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003880:	3302      	addmi	r3, #2
 8003882:	f8c9 3000 	strmi.w	r3, [r9]
 8003886:	6825      	ldr	r5, [r4, #0]
 8003888:	f015 0506 	ands.w	r5, r5, #6
 800388c:	d107      	bne.n	800389e <_printf_common+0x52>
 800388e:	f104 0a19 	add.w	sl, r4, #25
 8003892:	68e3      	ldr	r3, [r4, #12]
 8003894:	f8d9 2000 	ldr.w	r2, [r9]
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	42ab      	cmp	r3, r5
 800389c:	dc28      	bgt.n	80038f0 <_printf_common+0xa4>
 800389e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	3300      	adds	r3, #0
 80038a6:	bf18      	it	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	0692      	lsls	r2, r2, #26
 80038ac:	d42d      	bmi.n	800390a <_printf_common+0xbe>
 80038ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038b2:	4639      	mov	r1, r7
 80038b4:	4630      	mov	r0, r6
 80038b6:	47c0      	blx	r8
 80038b8:	3001      	adds	r0, #1
 80038ba:	d020      	beq.n	80038fe <_printf_common+0xb2>
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	68e5      	ldr	r5, [r4, #12]
 80038c0:	f8d9 2000 	ldr.w	r2, [r9]
 80038c4:	f003 0306 	and.w	r3, r3, #6
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	bf08      	it	eq
 80038cc:	1aad      	subeq	r5, r5, r2
 80038ce:	68a3      	ldr	r3, [r4, #8]
 80038d0:	6922      	ldr	r2, [r4, #16]
 80038d2:	bf0c      	ite	eq
 80038d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038d8:	2500      	movne	r5, #0
 80038da:	4293      	cmp	r3, r2
 80038dc:	bfc4      	itt	gt
 80038de:	1a9b      	subgt	r3, r3, r2
 80038e0:	18ed      	addgt	r5, r5, r3
 80038e2:	f04f 0900 	mov.w	r9, #0
 80038e6:	341a      	adds	r4, #26
 80038e8:	454d      	cmp	r5, r9
 80038ea:	d11a      	bne.n	8003922 <_printf_common+0xd6>
 80038ec:	2000      	movs	r0, #0
 80038ee:	e008      	b.n	8003902 <_printf_common+0xb6>
 80038f0:	2301      	movs	r3, #1
 80038f2:	4652      	mov	r2, sl
 80038f4:	4639      	mov	r1, r7
 80038f6:	4630      	mov	r0, r6
 80038f8:	47c0      	blx	r8
 80038fa:	3001      	adds	r0, #1
 80038fc:	d103      	bne.n	8003906 <_printf_common+0xba>
 80038fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003906:	3501      	adds	r5, #1
 8003908:	e7c3      	b.n	8003892 <_printf_common+0x46>
 800390a:	18e1      	adds	r1, r4, r3
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	2030      	movs	r0, #48	; 0x30
 8003910:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003914:	4422      	add	r2, r4
 8003916:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800391a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800391e:	3302      	adds	r3, #2
 8003920:	e7c5      	b.n	80038ae <_printf_common+0x62>
 8003922:	2301      	movs	r3, #1
 8003924:	4622      	mov	r2, r4
 8003926:	4639      	mov	r1, r7
 8003928:	4630      	mov	r0, r6
 800392a:	47c0      	blx	r8
 800392c:	3001      	adds	r0, #1
 800392e:	d0e6      	beq.n	80038fe <_printf_common+0xb2>
 8003930:	f109 0901 	add.w	r9, r9, #1
 8003934:	e7d8      	b.n	80038e8 <_printf_common+0x9c>
	...

08003938 <_printf_i>:
 8003938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800393c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003940:	460c      	mov	r4, r1
 8003942:	7e09      	ldrb	r1, [r1, #24]
 8003944:	b085      	sub	sp, #20
 8003946:	296e      	cmp	r1, #110	; 0x6e
 8003948:	4617      	mov	r7, r2
 800394a:	4606      	mov	r6, r0
 800394c:	4698      	mov	r8, r3
 800394e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003950:	f000 80b3 	beq.w	8003aba <_printf_i+0x182>
 8003954:	d822      	bhi.n	800399c <_printf_i+0x64>
 8003956:	2963      	cmp	r1, #99	; 0x63
 8003958:	d036      	beq.n	80039c8 <_printf_i+0x90>
 800395a:	d80a      	bhi.n	8003972 <_printf_i+0x3a>
 800395c:	2900      	cmp	r1, #0
 800395e:	f000 80b9 	beq.w	8003ad4 <_printf_i+0x19c>
 8003962:	2958      	cmp	r1, #88	; 0x58
 8003964:	f000 8083 	beq.w	8003a6e <_printf_i+0x136>
 8003968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800396c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003970:	e032      	b.n	80039d8 <_printf_i+0xa0>
 8003972:	2964      	cmp	r1, #100	; 0x64
 8003974:	d001      	beq.n	800397a <_printf_i+0x42>
 8003976:	2969      	cmp	r1, #105	; 0x69
 8003978:	d1f6      	bne.n	8003968 <_printf_i+0x30>
 800397a:	6820      	ldr	r0, [r4, #0]
 800397c:	6813      	ldr	r3, [r2, #0]
 800397e:	0605      	lsls	r5, r0, #24
 8003980:	f103 0104 	add.w	r1, r3, #4
 8003984:	d52a      	bpl.n	80039dc <_printf_i+0xa4>
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6011      	str	r1, [r2, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	da03      	bge.n	8003996 <_printf_i+0x5e>
 800398e:	222d      	movs	r2, #45	; 0x2d
 8003990:	425b      	negs	r3, r3
 8003992:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003996:	486f      	ldr	r0, [pc, #444]	; (8003b54 <_printf_i+0x21c>)
 8003998:	220a      	movs	r2, #10
 800399a:	e039      	b.n	8003a10 <_printf_i+0xd8>
 800399c:	2973      	cmp	r1, #115	; 0x73
 800399e:	f000 809d 	beq.w	8003adc <_printf_i+0x1a4>
 80039a2:	d808      	bhi.n	80039b6 <_printf_i+0x7e>
 80039a4:	296f      	cmp	r1, #111	; 0x6f
 80039a6:	d020      	beq.n	80039ea <_printf_i+0xb2>
 80039a8:	2970      	cmp	r1, #112	; 0x70
 80039aa:	d1dd      	bne.n	8003968 <_printf_i+0x30>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	f043 0320 	orr.w	r3, r3, #32
 80039b2:	6023      	str	r3, [r4, #0]
 80039b4:	e003      	b.n	80039be <_printf_i+0x86>
 80039b6:	2975      	cmp	r1, #117	; 0x75
 80039b8:	d017      	beq.n	80039ea <_printf_i+0xb2>
 80039ba:	2978      	cmp	r1, #120	; 0x78
 80039bc:	d1d4      	bne.n	8003968 <_printf_i+0x30>
 80039be:	2378      	movs	r3, #120	; 0x78
 80039c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039c4:	4864      	ldr	r0, [pc, #400]	; (8003b58 <_printf_i+0x220>)
 80039c6:	e055      	b.n	8003a74 <_printf_i+0x13c>
 80039c8:	6813      	ldr	r3, [r2, #0]
 80039ca:	1d19      	adds	r1, r3, #4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6011      	str	r1, [r2, #0]
 80039d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039d8:	2301      	movs	r3, #1
 80039da:	e08c      	b.n	8003af6 <_printf_i+0x1be>
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6011      	str	r1, [r2, #0]
 80039e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039e4:	bf18      	it	ne
 80039e6:	b21b      	sxthne	r3, r3
 80039e8:	e7cf      	b.n	800398a <_printf_i+0x52>
 80039ea:	6813      	ldr	r3, [r2, #0]
 80039ec:	6825      	ldr	r5, [r4, #0]
 80039ee:	1d18      	adds	r0, r3, #4
 80039f0:	6010      	str	r0, [r2, #0]
 80039f2:	0628      	lsls	r0, r5, #24
 80039f4:	d501      	bpl.n	80039fa <_printf_i+0xc2>
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	e002      	b.n	8003a00 <_printf_i+0xc8>
 80039fa:	0668      	lsls	r0, r5, #25
 80039fc:	d5fb      	bpl.n	80039f6 <_printf_i+0xbe>
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	4854      	ldr	r0, [pc, #336]	; (8003b54 <_printf_i+0x21c>)
 8003a02:	296f      	cmp	r1, #111	; 0x6f
 8003a04:	bf14      	ite	ne
 8003a06:	220a      	movne	r2, #10
 8003a08:	2208      	moveq	r2, #8
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a10:	6865      	ldr	r5, [r4, #4]
 8003a12:	60a5      	str	r5, [r4, #8]
 8003a14:	2d00      	cmp	r5, #0
 8003a16:	f2c0 8095 	blt.w	8003b44 <_printf_i+0x20c>
 8003a1a:	6821      	ldr	r1, [r4, #0]
 8003a1c:	f021 0104 	bic.w	r1, r1, #4
 8003a20:	6021      	str	r1, [r4, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d13d      	bne.n	8003aa2 <_printf_i+0x16a>
 8003a26:	2d00      	cmp	r5, #0
 8003a28:	f040 808e 	bne.w	8003b48 <_printf_i+0x210>
 8003a2c:	4665      	mov	r5, ip
 8003a2e:	2a08      	cmp	r2, #8
 8003a30:	d10b      	bne.n	8003a4a <_printf_i+0x112>
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	07db      	lsls	r3, r3, #31
 8003a36:	d508      	bpl.n	8003a4a <_printf_i+0x112>
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	6862      	ldr	r2, [r4, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	bfde      	ittt	le
 8003a40:	2330      	movle	r3, #48	; 0x30
 8003a42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a4a:	ebac 0305 	sub.w	r3, ip, r5
 8003a4e:	6123      	str	r3, [r4, #16]
 8003a50:	f8cd 8000 	str.w	r8, [sp]
 8003a54:	463b      	mov	r3, r7
 8003a56:	aa03      	add	r2, sp, #12
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	f7ff fef6 	bl	800384c <_printf_common>
 8003a60:	3001      	adds	r0, #1
 8003a62:	d14d      	bne.n	8003b00 <_printf_i+0x1c8>
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	b005      	add	sp, #20
 8003a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a6e:	4839      	ldr	r0, [pc, #228]	; (8003b54 <_printf_i+0x21c>)
 8003a70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003a74:	6813      	ldr	r3, [r2, #0]
 8003a76:	6821      	ldr	r1, [r4, #0]
 8003a78:	1d1d      	adds	r5, r3, #4
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6015      	str	r5, [r2, #0]
 8003a7e:	060a      	lsls	r2, r1, #24
 8003a80:	d50b      	bpl.n	8003a9a <_printf_i+0x162>
 8003a82:	07ca      	lsls	r2, r1, #31
 8003a84:	bf44      	itt	mi
 8003a86:	f041 0120 	orrmi.w	r1, r1, #32
 8003a8a:	6021      	strmi	r1, [r4, #0]
 8003a8c:	b91b      	cbnz	r3, 8003a96 <_printf_i+0x15e>
 8003a8e:	6822      	ldr	r2, [r4, #0]
 8003a90:	f022 0220 	bic.w	r2, r2, #32
 8003a94:	6022      	str	r2, [r4, #0]
 8003a96:	2210      	movs	r2, #16
 8003a98:	e7b7      	b.n	8003a0a <_printf_i+0xd2>
 8003a9a:	064d      	lsls	r5, r1, #25
 8003a9c:	bf48      	it	mi
 8003a9e:	b29b      	uxthmi	r3, r3
 8003aa0:	e7ef      	b.n	8003a82 <_printf_i+0x14a>
 8003aa2:	4665      	mov	r5, ip
 8003aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003aa8:	fb02 3311 	mls	r3, r2, r1, r3
 8003aac:	5cc3      	ldrb	r3, [r0, r3]
 8003aae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	2900      	cmp	r1, #0
 8003ab6:	d1f5      	bne.n	8003aa4 <_printf_i+0x16c>
 8003ab8:	e7b9      	b.n	8003a2e <_printf_i+0xf6>
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	6825      	ldr	r5, [r4, #0]
 8003abe:	6961      	ldr	r1, [r4, #20]
 8003ac0:	1d18      	adds	r0, r3, #4
 8003ac2:	6010      	str	r0, [r2, #0]
 8003ac4:	0628      	lsls	r0, r5, #24
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	d501      	bpl.n	8003ace <_printf_i+0x196>
 8003aca:	6019      	str	r1, [r3, #0]
 8003acc:	e002      	b.n	8003ad4 <_printf_i+0x19c>
 8003ace:	066a      	lsls	r2, r5, #25
 8003ad0:	d5fb      	bpl.n	8003aca <_printf_i+0x192>
 8003ad2:	8019      	strh	r1, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6123      	str	r3, [r4, #16]
 8003ad8:	4665      	mov	r5, ip
 8003ada:	e7b9      	b.n	8003a50 <_printf_i+0x118>
 8003adc:	6813      	ldr	r3, [r2, #0]
 8003ade:	1d19      	adds	r1, r3, #4
 8003ae0:	6011      	str	r1, [r2, #0]
 8003ae2:	681d      	ldr	r5, [r3, #0]
 8003ae4:	6862      	ldr	r2, [r4, #4]
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f7fc fb79 	bl	80001e0 <memchr>
 8003aee:	b108      	cbz	r0, 8003af4 <_printf_i+0x1bc>
 8003af0:	1b40      	subs	r0, r0, r5
 8003af2:	6060      	str	r0, [r4, #4]
 8003af4:	6863      	ldr	r3, [r4, #4]
 8003af6:	6123      	str	r3, [r4, #16]
 8003af8:	2300      	movs	r3, #0
 8003afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003afe:	e7a7      	b.n	8003a50 <_printf_i+0x118>
 8003b00:	6923      	ldr	r3, [r4, #16]
 8003b02:	462a      	mov	r2, r5
 8003b04:	4639      	mov	r1, r7
 8003b06:	4630      	mov	r0, r6
 8003b08:	47c0      	blx	r8
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d0aa      	beq.n	8003a64 <_printf_i+0x12c>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	079b      	lsls	r3, r3, #30
 8003b12:	d413      	bmi.n	8003b3c <_printf_i+0x204>
 8003b14:	68e0      	ldr	r0, [r4, #12]
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	4298      	cmp	r0, r3
 8003b1a:	bfb8      	it	lt
 8003b1c:	4618      	movlt	r0, r3
 8003b1e:	e7a3      	b.n	8003a68 <_printf_i+0x130>
 8003b20:	2301      	movs	r3, #1
 8003b22:	464a      	mov	r2, r9
 8003b24:	4639      	mov	r1, r7
 8003b26:	4630      	mov	r0, r6
 8003b28:	47c0      	blx	r8
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d09a      	beq.n	8003a64 <_printf_i+0x12c>
 8003b2e:	3501      	adds	r5, #1
 8003b30:	68e3      	ldr	r3, [r4, #12]
 8003b32:	9a03      	ldr	r2, [sp, #12]
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	42ab      	cmp	r3, r5
 8003b38:	dcf2      	bgt.n	8003b20 <_printf_i+0x1e8>
 8003b3a:	e7eb      	b.n	8003b14 <_printf_i+0x1dc>
 8003b3c:	2500      	movs	r5, #0
 8003b3e:	f104 0919 	add.w	r9, r4, #25
 8003b42:	e7f5      	b.n	8003b30 <_printf_i+0x1f8>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ac      	bne.n	8003aa2 <_printf_i+0x16a>
 8003b48:	7803      	ldrb	r3, [r0, #0]
 8003b4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b52:	e76c      	b.n	8003a2e <_printf_i+0xf6>
 8003b54:	0800661d 	.word	0x0800661d
 8003b58:	0800662e 	.word	0x0800662e

08003b5c <memcpy>:
 8003b5c:	b510      	push	{r4, lr}
 8003b5e:	1e43      	subs	r3, r0, #1
 8003b60:	440a      	add	r2, r1
 8003b62:	4291      	cmp	r1, r2
 8003b64:	d100      	bne.n	8003b68 <memcpy+0xc>
 8003b66:	bd10      	pop	{r4, pc}
 8003b68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b70:	e7f7      	b.n	8003b62 <memcpy+0x6>

08003b72 <memmove>:
 8003b72:	4288      	cmp	r0, r1
 8003b74:	b510      	push	{r4, lr}
 8003b76:	eb01 0302 	add.w	r3, r1, r2
 8003b7a:	d807      	bhi.n	8003b8c <memmove+0x1a>
 8003b7c:	1e42      	subs	r2, r0, #1
 8003b7e:	4299      	cmp	r1, r3
 8003b80:	d00a      	beq.n	8003b98 <memmove+0x26>
 8003b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b86:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b8a:	e7f8      	b.n	8003b7e <memmove+0xc>
 8003b8c:	4283      	cmp	r3, r0
 8003b8e:	d9f5      	bls.n	8003b7c <memmove+0xa>
 8003b90:	1881      	adds	r1, r0, r2
 8003b92:	1ad2      	subs	r2, r2, r3
 8003b94:	42d3      	cmn	r3, r2
 8003b96:	d100      	bne.n	8003b9a <memmove+0x28>
 8003b98:	bd10      	pop	{r4, pc}
 8003b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ba2:	e7f7      	b.n	8003b94 <memmove+0x22>

08003ba4 <_free_r>:
 8003ba4:	b538      	push	{r3, r4, r5, lr}
 8003ba6:	4605      	mov	r5, r0
 8003ba8:	2900      	cmp	r1, #0
 8003baa:	d045      	beq.n	8003c38 <_free_r+0x94>
 8003bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bb0:	1f0c      	subs	r4, r1, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bfb8      	it	lt
 8003bb6:	18e4      	addlt	r4, r4, r3
 8003bb8:	f000 f8d2 	bl	8003d60 <__malloc_lock>
 8003bbc:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <_free_r+0x98>)
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	b933      	cbnz	r3, 8003bd2 <_free_r+0x2e>
 8003bc4:	6063      	str	r3, [r4, #4]
 8003bc6:	6014      	str	r4, [r2, #0]
 8003bc8:	4628      	mov	r0, r5
 8003bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bce:	f000 b8c8 	b.w	8003d62 <__malloc_unlock>
 8003bd2:	42a3      	cmp	r3, r4
 8003bd4:	d90c      	bls.n	8003bf0 <_free_r+0x4c>
 8003bd6:	6821      	ldr	r1, [r4, #0]
 8003bd8:	1862      	adds	r2, r4, r1
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	bf04      	itt	eq
 8003bde:	681a      	ldreq	r2, [r3, #0]
 8003be0:	685b      	ldreq	r3, [r3, #4]
 8003be2:	6063      	str	r3, [r4, #4]
 8003be4:	bf04      	itt	eq
 8003be6:	1852      	addeq	r2, r2, r1
 8003be8:	6022      	streq	r2, [r4, #0]
 8003bea:	6004      	str	r4, [r0, #0]
 8003bec:	e7ec      	b.n	8003bc8 <_free_r+0x24>
 8003bee:	4613      	mov	r3, r2
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	b10a      	cbz	r2, 8003bf8 <_free_r+0x54>
 8003bf4:	42a2      	cmp	r2, r4
 8003bf6:	d9fa      	bls.n	8003bee <_free_r+0x4a>
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	1858      	adds	r0, r3, r1
 8003bfc:	42a0      	cmp	r0, r4
 8003bfe:	d10b      	bne.n	8003c18 <_free_r+0x74>
 8003c00:	6820      	ldr	r0, [r4, #0]
 8003c02:	4401      	add	r1, r0
 8003c04:	1858      	adds	r0, r3, r1
 8003c06:	4282      	cmp	r2, r0
 8003c08:	6019      	str	r1, [r3, #0]
 8003c0a:	d1dd      	bne.n	8003bc8 <_free_r+0x24>
 8003c0c:	6810      	ldr	r0, [r2, #0]
 8003c0e:	6852      	ldr	r2, [r2, #4]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	4401      	add	r1, r0
 8003c14:	6019      	str	r1, [r3, #0]
 8003c16:	e7d7      	b.n	8003bc8 <_free_r+0x24>
 8003c18:	d902      	bls.n	8003c20 <_free_r+0x7c>
 8003c1a:	230c      	movs	r3, #12
 8003c1c:	602b      	str	r3, [r5, #0]
 8003c1e:	e7d3      	b.n	8003bc8 <_free_r+0x24>
 8003c20:	6820      	ldr	r0, [r4, #0]
 8003c22:	1821      	adds	r1, r4, r0
 8003c24:	428a      	cmp	r2, r1
 8003c26:	bf04      	itt	eq
 8003c28:	6811      	ldreq	r1, [r2, #0]
 8003c2a:	6852      	ldreq	r2, [r2, #4]
 8003c2c:	6062      	str	r2, [r4, #4]
 8003c2e:	bf04      	itt	eq
 8003c30:	1809      	addeq	r1, r1, r0
 8003c32:	6021      	streq	r1, [r4, #0]
 8003c34:	605c      	str	r4, [r3, #4]
 8003c36:	e7c7      	b.n	8003bc8 <_free_r+0x24>
 8003c38:	bd38      	pop	{r3, r4, r5, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200004b4 	.word	0x200004b4

08003c40 <_malloc_r>:
 8003c40:	b570      	push	{r4, r5, r6, lr}
 8003c42:	1ccd      	adds	r5, r1, #3
 8003c44:	f025 0503 	bic.w	r5, r5, #3
 8003c48:	3508      	adds	r5, #8
 8003c4a:	2d0c      	cmp	r5, #12
 8003c4c:	bf38      	it	cc
 8003c4e:	250c      	movcc	r5, #12
 8003c50:	2d00      	cmp	r5, #0
 8003c52:	4606      	mov	r6, r0
 8003c54:	db01      	blt.n	8003c5a <_malloc_r+0x1a>
 8003c56:	42a9      	cmp	r1, r5
 8003c58:	d903      	bls.n	8003c62 <_malloc_r+0x22>
 8003c5a:	230c      	movs	r3, #12
 8003c5c:	6033      	str	r3, [r6, #0]
 8003c5e:	2000      	movs	r0, #0
 8003c60:	bd70      	pop	{r4, r5, r6, pc}
 8003c62:	f000 f87d 	bl	8003d60 <__malloc_lock>
 8003c66:	4a21      	ldr	r2, [pc, #132]	; (8003cec <_malloc_r+0xac>)
 8003c68:	6814      	ldr	r4, [r2, #0]
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	b991      	cbnz	r1, 8003c94 <_malloc_r+0x54>
 8003c6e:	4c20      	ldr	r4, [pc, #128]	; (8003cf0 <_malloc_r+0xb0>)
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	b91b      	cbnz	r3, 8003c7c <_malloc_r+0x3c>
 8003c74:	4630      	mov	r0, r6
 8003c76:	f000 f863 	bl	8003d40 <_sbrk_r>
 8003c7a:	6020      	str	r0, [r4, #0]
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	4630      	mov	r0, r6
 8003c80:	f000 f85e 	bl	8003d40 <_sbrk_r>
 8003c84:	1c43      	adds	r3, r0, #1
 8003c86:	d124      	bne.n	8003cd2 <_malloc_r+0x92>
 8003c88:	230c      	movs	r3, #12
 8003c8a:	6033      	str	r3, [r6, #0]
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f000 f868 	bl	8003d62 <__malloc_unlock>
 8003c92:	e7e4      	b.n	8003c5e <_malloc_r+0x1e>
 8003c94:	680b      	ldr	r3, [r1, #0]
 8003c96:	1b5b      	subs	r3, r3, r5
 8003c98:	d418      	bmi.n	8003ccc <_malloc_r+0x8c>
 8003c9a:	2b0b      	cmp	r3, #11
 8003c9c:	d90f      	bls.n	8003cbe <_malloc_r+0x7e>
 8003c9e:	600b      	str	r3, [r1, #0]
 8003ca0:	50cd      	str	r5, [r1, r3]
 8003ca2:	18cc      	adds	r4, r1, r3
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	f000 f85c 	bl	8003d62 <__malloc_unlock>
 8003caa:	f104 000b 	add.w	r0, r4, #11
 8003cae:	1d23      	adds	r3, r4, #4
 8003cb0:	f020 0007 	bic.w	r0, r0, #7
 8003cb4:	1ac3      	subs	r3, r0, r3
 8003cb6:	d0d3      	beq.n	8003c60 <_malloc_r+0x20>
 8003cb8:	425a      	negs	r2, r3
 8003cba:	50e2      	str	r2, [r4, r3]
 8003cbc:	e7d0      	b.n	8003c60 <_malloc_r+0x20>
 8003cbe:	428c      	cmp	r4, r1
 8003cc0:	684b      	ldr	r3, [r1, #4]
 8003cc2:	bf16      	itet	ne
 8003cc4:	6063      	strne	r3, [r4, #4]
 8003cc6:	6013      	streq	r3, [r2, #0]
 8003cc8:	460c      	movne	r4, r1
 8003cca:	e7eb      	b.n	8003ca4 <_malloc_r+0x64>
 8003ccc:	460c      	mov	r4, r1
 8003cce:	6849      	ldr	r1, [r1, #4]
 8003cd0:	e7cc      	b.n	8003c6c <_malloc_r+0x2c>
 8003cd2:	1cc4      	adds	r4, r0, #3
 8003cd4:	f024 0403 	bic.w	r4, r4, #3
 8003cd8:	42a0      	cmp	r0, r4
 8003cda:	d005      	beq.n	8003ce8 <_malloc_r+0xa8>
 8003cdc:	1a21      	subs	r1, r4, r0
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f000 f82e 	bl	8003d40 <_sbrk_r>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d0cf      	beq.n	8003c88 <_malloc_r+0x48>
 8003ce8:	6025      	str	r5, [r4, #0]
 8003cea:	e7db      	b.n	8003ca4 <_malloc_r+0x64>
 8003cec:	200004b4 	.word	0x200004b4
 8003cf0:	200004b8 	.word	0x200004b8

08003cf4 <_realloc_r>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	4607      	mov	r7, r0
 8003cf8:	4614      	mov	r4, r2
 8003cfa:	460e      	mov	r6, r1
 8003cfc:	b921      	cbnz	r1, 8003d08 <_realloc_r+0x14>
 8003cfe:	4611      	mov	r1, r2
 8003d00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d04:	f7ff bf9c 	b.w	8003c40 <_malloc_r>
 8003d08:	b922      	cbnz	r2, 8003d14 <_realloc_r+0x20>
 8003d0a:	f7ff ff4b 	bl	8003ba4 <_free_r>
 8003d0e:	4625      	mov	r5, r4
 8003d10:	4628      	mov	r0, r5
 8003d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d14:	f000 f826 	bl	8003d64 <_malloc_usable_size_r>
 8003d18:	42a0      	cmp	r0, r4
 8003d1a:	d20f      	bcs.n	8003d3c <_realloc_r+0x48>
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	4638      	mov	r0, r7
 8003d20:	f7ff ff8e 	bl	8003c40 <_malloc_r>
 8003d24:	4605      	mov	r5, r0
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d0f2      	beq.n	8003d10 <_realloc_r+0x1c>
 8003d2a:	4631      	mov	r1, r6
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	f7ff ff15 	bl	8003b5c <memcpy>
 8003d32:	4631      	mov	r1, r6
 8003d34:	4638      	mov	r0, r7
 8003d36:	f7ff ff35 	bl	8003ba4 <_free_r>
 8003d3a:	e7e9      	b.n	8003d10 <_realloc_r+0x1c>
 8003d3c:	4635      	mov	r5, r6
 8003d3e:	e7e7      	b.n	8003d10 <_realloc_r+0x1c>

08003d40 <_sbrk_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	4c06      	ldr	r4, [pc, #24]	; (8003d5c <_sbrk_r+0x1c>)
 8003d44:	2300      	movs	r3, #0
 8003d46:	4605      	mov	r5, r0
 8003d48:	4608      	mov	r0, r1
 8003d4a:	6023      	str	r3, [r4, #0]
 8003d4c:	f7ff fb4e 	bl	80033ec <_sbrk>
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d102      	bne.n	8003d5a <_sbrk_r+0x1a>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	b103      	cbz	r3, 8003d5a <_sbrk_r+0x1a>
 8003d58:	602b      	str	r3, [r5, #0]
 8003d5a:	bd38      	pop	{r3, r4, r5, pc}
 8003d5c:	20000604 	.word	0x20000604

08003d60 <__malloc_lock>:
 8003d60:	4770      	bx	lr

08003d62 <__malloc_unlock>:
 8003d62:	4770      	bx	lr

08003d64 <_malloc_usable_size_r>:
 8003d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d68:	1f18      	subs	r0, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfbc      	itt	lt
 8003d6e:	580b      	ldrlt	r3, [r1, r0]
 8003d70:	18c0      	addlt	r0, r0, r3
 8003d72:	4770      	bx	lr

08003d74 <Font7x10>:
	...
 8003d88:	1000 1000 1000 1000 1000 1000 0000 1000     ................
 8003d98:	0000 0000 2800 2800 2800 0000 0000 0000     .....(.(.(......
	...
 8003db0:	2400 2400 7c00 2400 4800 7c00 4800 4800     .$.$.|.$.H.|.H.H
 8003dc0:	0000 0000 3800 5400 5000 3800 1400 5400     .....8.T.P.8...T
 8003dd0:	5400 3800 1000 0000 2000 5400 5800 3000     .T.8..... .T.X.0
 8003de0:	2800 5400 1400 0800 0000 0000 1000 2800     .(.T...........(
 8003df0:	2800 1000 3400 4800 4800 3400 0000 0000     .(...4.H.H.4....
 8003e00:	1000 1000 1000 0000 0000 0000 0000 0000     ................
 8003e10:	0000 0000 0800 1000 2000 2000 2000 2000     ......... . . . 
 8003e20:	2000 2000 1000 0800 2000 1000 0800 0800     . . ..... ......
 8003e30:	0800 0800 0800 0800 1000 2000 1000 3800     ........... ...8
 8003e40:	1000 2800 0000 0000 0000 0000 0000 0000     ...(............
 8003e50:	0000 0000 1000 1000 7c00 1000 1000 0000     .........|......
	...
 8003e70:	0000 1000 1000 1000 0000 0000 0000 0000     ................
 8003e80:	0000 3800 0000 0000 0000 0000 0000 0000     ...8............
	...
 8003e98:	0000 1000 0000 0000 0800 0800 1000 1000     ................
 8003ea8:	1000 1000 2000 2000 0000 0000 3800 4400     ..... . .....8.D
 8003eb8:	4400 5400 4400 4400 4400 3800 0000 0000     .D.T.D.D.D.8....
 8003ec8:	1000 3000 5000 1000 1000 1000 1000 1000     ...0.P..........
 8003ed8:	0000 0000 3800 4400 4400 0400 0800 1000     .....8.D.D......
 8003ee8:	2000 7c00 0000 0000 3800 4400 0400 1800     . .|.....8.D....
 8003ef8:	0400 0400 4400 3800 0000 0000 0800 1800     .....D.8........
 8003f08:	2800 2800 4800 7c00 0800 0800 0000 0000     .(.(.H.|........
 8003f18:	7c00 4000 4000 7800 0400 0400 4400 3800     .|.@.@.x.....D.8
 8003f28:	0000 0000 3800 4400 4000 7800 4400 4400     .....8.D.@.x.D.D
 8003f38:	4400 3800 0000 0000 7c00 0400 0800 1000     .D.8.....|......
 8003f48:	1000 2000 2000 2000 0000 0000 3800 4400     ... . . .....8.D
 8003f58:	4400 3800 4400 4400 4400 3800 0000 0000     .D.8.D.D.D.8....
 8003f68:	3800 4400 4400 4400 3c00 0400 4400 3800     .8.D.D.D.<...D.8
	...
 8003f80:	1000 0000 0000 0000 0000 1000 0000 0000     ................
 8003f90:	0000 0000 0000 1000 0000 0000 0000 1000     ................
 8003fa0:	1000 1000 0000 0000 0c00 3000 4000 3000     ...........0.@.0
 8003fb0:	0c00 0000 0000 0000 0000 0000 0000 7c00     ...............|
 8003fc0:	0000 7c00 0000 0000 0000 0000 0000 0000     ...|............
 8003fd0:	6000 1800 0400 1800 6000 0000 0000 0000     .`.......`......
 8003fe0:	3800 4400 0400 0800 1000 1000 0000 1000     .8.D............
 8003ff0:	0000 0000 3800 4400 4c00 5400 5c00 4000     .....8.D.L.T.\.@
 8004000:	4000 3800 0000 0000 1000 2800 2800 2800     .@.8.......(.(.(
 8004010:	2800 7c00 4400 4400 0000 0000 7800 4400     .(.|.D.D.....x.D
 8004020:	4400 7800 4400 4400 4400 7800 0000 0000     .D.x.D.D.D.x....
 8004030:	3800 4400 4000 4000 4000 4000 4400 3800     .8.D.@.@.@.@.D.8
 8004040:	0000 0000 7000 4800 4400 4400 4400 4400     .....p.H.D.D.D.D
 8004050:	4800 7000 0000 0000 7c00 4000 4000 7c00     .H.p.....|.@.@.|
 8004060:	4000 4000 4000 7c00 0000 0000 7c00 4000     .@.@.@.|.....|.@
 8004070:	4000 7800 4000 4000 4000 4000 0000 0000     .@.x.@.@.@.@....
 8004080:	3800 4400 4000 4000 5c00 4400 4400 3800     .8.D.@.@.\.D.D.8
 8004090:	0000 0000 4400 4400 4400 7c00 4400 4400     .....D.D.D.|.D.D
 80040a0:	4400 4400 0000 0000 3800 1000 1000 1000     .D.D.....8......
 80040b0:	1000 1000 1000 3800 0000 0000 0400 0400     .......8........
 80040c0:	0400 0400 0400 0400 4400 3800 0000 0000     .........D.8....
 80040d0:	4400 4800 5000 6000 5000 4800 4800 4400     .D.H.P.`.P.H.H.D
 80040e0:	0000 0000 4000 4000 4000 4000 4000 4000     .....@.@.@.@.@.@
 80040f0:	4000 7c00 0000 0000 4400 6c00 6c00 5400     .@.|.....D.l.l.T
 8004100:	4400 4400 4400 4400 0000 0000 4400 6400     .D.D.D.D.....D.d
 8004110:	6400 5400 5400 4c00 4c00 4400 0000 0000     .d.T.T.L.L.D....
 8004120:	3800 4400 4400 4400 4400 4400 4400 3800     .8.D.D.D.D.D.D.8
 8004130:	0000 0000 7800 4400 4400 4400 7800 4000     .....x.D.D.D.x.@
 8004140:	4000 4000 0000 0000 3800 4400 4400 4400     .@.@.....8.D.D.D
 8004150:	4400 4400 5400 3800 0400 0000 7800 4400     .D.D.T.8.....x.D
 8004160:	4400 4400 7800 4800 4800 4400 0000 0000     .D.D.x.H.H.D....
 8004170:	3800 4400 4000 3000 0800 0400 4400 3800     .8.D.@.0.....D.8
 8004180:	0000 0000 7c00 1000 1000 1000 1000 1000     .....|..........
 8004190:	1000 1000 0000 0000 4400 4400 4400 4400     .........D.D.D.D
 80041a0:	4400 4400 4400 3800 0000 0000 4400 4400     .D.D.D.8.....D.D
 80041b0:	4400 2800 2800 2800 1000 1000 0000 0000     .D.(.(.(........
 80041c0:	4400 4400 5400 5400 5400 6c00 2800 2800     .D.D.T.T.T.l.(.(
 80041d0:	0000 0000 4400 2800 2800 1000 1000 2800     .....D.(.(.....(
 80041e0:	2800 4400 0000 0000 4400 4400 2800 2800     .(.D.....D.D.(.(
 80041f0:	1000 1000 1000 1000 0000 0000 7c00 0400     .............|..
 8004200:	0800 1000 1000 2000 4000 7c00 0000 0000     ....... .@.|....
 8004210:	1800 1000 1000 1000 1000 1000 1000 1000     ................
 8004220:	1000 1800 2000 2000 1000 1000 1000 1000     ..... . ........
 8004230:	0800 0800 0000 0000 3000 1000 1000 1000     .........0......
 8004240:	1000 1000 1000 1000 1000 3000 1000 2800     ...........0...(
 8004250:	2800 4400 0000 0000 0000 0000 0000 0000     .(.D............
	...
 8004270:	0000 fe00 2000 1000 0000 0000 0000 0000     ..... ..........
	...
 800428c:	3800 4400 3c00 4400 4c00 3400 0000 0000     .8.D.<.D.L.4....
 800429c:	4000 4000 5800 6400 4400 4400 6400 5800     .@.@.X.d.D.D.d.X
	...
 80042b4:	3800 4400 4000 4000 4400 3800 0000 0000     .8.D.@.@.D.8....
 80042c4:	0400 0400 3400 4c00 4400 4400 4c00 3400     .....4.L.D.D.L.4
	...
 80042dc:	3800 4400 7c00 4000 4400 3800 0000 0000     .8.D.|.@.D.8....
 80042ec:	0c00 1000 7c00 1000 1000 1000 1000 1000     .....|..........
	...
 8004304:	3400 4c00 4400 4400 4c00 3400 0400 7800     .4.L.D.D.L.4...x
 8004314:	4000 4000 5800 6400 4400 4400 4400 4400     .@.@.X.d.D.D.D.D
 8004324:	0000 0000 1000 0000 7000 1000 1000 1000     .........p......
 8004334:	1000 1000 0000 0000 1000 0000 7000 1000     .............p..
 8004344:	1000 1000 1000 1000 1000 e000 4000 4000     .............@.@
 8004354:	4800 5000 6000 5000 4800 4400 0000 0000     .H.P.`.P.H.D....
 8004364:	7000 1000 1000 1000 1000 1000 1000 1000     .p..............
	...
 800437c:	7800 5400 5400 5400 5400 5400 0000 0000     .x.T.T.T.T.T....
 800438c:	0000 0000 5800 6400 4400 4400 4400 4400     .....X.d.D.D.D.D
	...
 80043a4:	3800 4400 4400 4400 4400 3800 0000 0000     .8.D.D.D.D.8....
 80043b4:	0000 0000 5800 6400 4400 4400 6400 5800     .....X.d.D.D.d.X
 80043c4:	4000 4000 0000 0000 3400 4c00 4400 4400     .@.@.....4.L.D.D
 80043d4:	4c00 3400 0400 0400 0000 0000 5800 6400     .L.4.........X.d
 80043e4:	4000 4000 4000 4000 0000 0000 0000 0000     .@.@.@.@........
 80043f4:	3800 4400 3000 0800 4400 3800 0000 0000     .8.D.0...D.8....
 8004404:	2000 2000 7800 2000 2000 2000 2000 1800     . . .x. . . . ..
	...
 800441c:	4400 4400 4400 4400 4c00 3400 0000 0000     .D.D.D.D.L.4....
 800442c:	0000 0000 4400 4400 2800 2800 2800 1000     .....D.D.(.(.(..
	...
 8004444:	5400 5400 5400 6c00 2800 2800 0000 0000     .T.T.T.l.(.(....
 8004454:	0000 0000 4400 2800 1000 1000 2800 4400     .....D.(.....(.D
	...
 800446c:	4400 4400 2800 2800 1000 1000 1000 6000     .D.D.(.(.......`
 800447c:	0000 0000 7c00 0800 1000 2000 4000 7c00     .....|..... .@.|
 800448c:	0000 0000 1800 1000 1000 1000 2000 2000     ............. . 
 800449c:	1000 1000 1000 1800 1000 1000 1000 1000     ................
 80044ac:	1000 1000 1000 1000 1000 1000 3000 1000     .............0..
 80044bc:	1000 1000 0800 0800 1000 1000 1000 3000     ...............0
 80044cc:	0000 0000 0000 7400 4c00 0000 0000 0000     .......t.L......
 80044dc:	0000 0000                                   ....

080044e0 <Font11x18>:
	...
 8004504:	0000 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
 8004514:	0c00 0c00 0c00 0c00 0000 0c00 0c00 0000     ................
 8004524:	0000 0000 0000 1b00 1b00 1b00 1b00 1b00     ................
	...
 800454c:	0000 1980 1980 1980 1980 7fc0 7fc0 1980     ................
 800455c:	3300 7fc0 7fc0 3300 3300 3300 3300 0000     .3.....3.3.3.3..
 800456c:	0000 0000 0000 1e00 3f00 7580 6580 7400     .........?.u.e.t
 800457c:	3c00 1e00 0700 0580 6580 6580 7580 3f00     .<.......e.e.u.?
 800458c:	1e00 0400 0400 0000 0000 7000 d800 d840     ...........p..@.
 800459c:	d8c0 d980 7300 0600 0c00 1b80 36c0 66c0     .....s.......6.f
 80045ac:	46c0 06c0 0380 0000 0000 0000 0000 1e00     .F..............
 80045bc:	3f00 3300 3300 3300 1e00 0c00 3cc0 66c0     .?.3.3.3.....<.f
 80045cc:	6380 6180 6380 3ec0 1c80 0000 0000 0000     .c.a.c.>........
 80045dc:	0000 0c00 0c00 0c00 0c00 0c00 0000 0000     ................
	...
 8004600:	0080 0100 0300 0600 0600 0400 0c00 0c00     ................
 8004610:	0c00 0c00 0c00 0c00 0400 0600 0600 0300     ................
 8004620:	0100 0080 2000 1000 1800 0c00 0c00 0400     ..... ..........
 8004630:	0600 0600 0600 0600 0600 0600 0400 0c00     ................
 8004640:	0c00 1800 1000 2000 0000 0c00 2d00 3f00     ....... .....-.?
 8004650:	1e00 3300 0000 0000 0000 0000 0000 0000     ...3............
	...
 8004670:	0000 0c00 0c00 0c00 0c00 ffc0 ffc0 0c00     ................
 8004680:	0c00 0c00 0c00 0000 0000 0000 0000 0000     ................
	...
 80046a8:	0000 0c00 0c00 0400 0400 0800 0000 0000     ................
	...
 80046c4:	0000 1e00 1e00 0000 0000 0000 0000 0000     ................
	...
 80046f0:	0000 0c00 0c00 0000 0000 0000 0000 0300     ................
 8004700:	0300 0300 0600 0600 0600 0600 0c00 0c00     ................
 8004710:	0c00 0c00 1800 1800 1800 0000 0000 0000     ................
 8004720:	0000 1e00 3f00 3300 6180 6180 6180 6d80     .....?.3.a.a.a.m
 8004730:	6d80 6180 6180 6180 3300 3f00 1e00 0000     .m.a.a.a.3.?....
 8004740:	0000 0000 0000 0600 0e00 1e00 3600 2600     .............6.&
 8004750:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 8004760:	0600 0000 0000 0000 0000 1e00 3f00 7380     .............?.s
 8004770:	6180 6180 0180 0300 0600 0c00 1800 3000     .a.a...........0
 8004780:	6000 7f80 7f80 0000 0000 0000 0000 1c00     .`..............
 8004790:	3e00 6300 6300 0300 0e00 0e00 0300 0180     .>.c.c..........
 80047a0:	0180 6180 7380 3f00 1e00 0000 0000 0000     ...a.s.?........
 80047b0:	0000 0600 0e00 0e00 1e00 1e00 1600 3600     ...............6
 80047c0:	3600 6600 7f80 7f80 0600 0600 0600 0000     .6.f............
 80047d0:	0000 0000 0000 7f00 7f00 6000 6000 6000     ...........`.`.`
 80047e0:	6e00 7f00 6380 0180 0180 6180 7380 3f00     .n...c.....a.s.?
 80047f0:	1e00 0000 0000 0000 0000 1e00 3f00 3380     .............?.3
 8004800:	6180 6000 6e00 7f00 7380 6180 6180 6180     .a.`.n...s.a.a.a
 8004810:	3380 3f00 1e00 0000 0000 0000 0000 7f80     .3.?............
 8004820:	7f80 0180 0300 0300 0600 0600 0c00 0c00     ................
 8004830:	0c00 0800 1800 1800 1800 0000 0000 0000     ................
 8004840:	0000 1e00 3f00 6380 6180 6180 2100 1e00     .....?.c.a.a.!..
 8004850:	3f00 6180 6180 6180 6180 3f00 1e00 0000     .?.a.a.a.a.?....
 8004860:	0000 0000 0000 1e00 3f00 7300 6180 6180     .........?.s.a.a
 8004870:	6180 7380 3f80 1d80 0180 6180 7300 3f00     .a.s.?.....a.s.?
 8004880:	1e00 0000 0000 0000 0000 0000 0000 0000     ................
 8004890:	0000 0c00 0c00 0000 0000 0000 0000 0000     ................
 80048a0:	0000 0c00 0c00 0000 0000 0000 0000 0000     ................
	...
 80048b8:	0c00 0c00 0000 0000 0000 0000 0000 0c00     ................
 80048c8:	0c00 0400 0400 0800 0000 0000 0000 0000     ................
 80048d8:	0080 0380 0e00 3800 6000 3800 0e00 0380     .......8.`.8....
 80048e8:	0080 0000 0000 0000 0000 0000 0000 0000     ................
 80048f8:	0000 0000 0000 7f80 7f80 0000 0000 7f80     ................
 8004908:	7f80 0000 0000 0000 0000 0000 0000 0000     ................
	...
 8004920:	4000 7000 1c00 0700 0180 0700 1c00 7000     .@.p...........p
 8004930:	4000 0000 0000 0000 0000 0000 0000 1f00     .@..............
 8004940:	3f80 71c0 60c0 00c0 01c0 0380 0700 0e00     .?.q.`..........
 8004950:	0c00 0c00 0000 0c00 0c00 0000 0000 0000     ................
 8004960:	0000 1e00 3f00 3180 7180 6380 6f80 6d80     .....?.1.q.c.o.m
 8004970:	6d80 6f80 6780 6000 3200 3e00 1c00 0000     .m.o.g.`.2.>....
 8004980:	0000 0000 0000 0e00 0e00 1b00 1b00 1b00     ................
 8004990:	1b00 3180 3180 3f80 3f80 3180 60c0 60c0     ...1.1.?.?.1.`.`
 80049a0:	60c0 0000 0000 0000 0000 7c00 7e00 6300     .`.........|.~.c
 80049b0:	6300 6300 6300 7e00 7e00 6300 6180 6180     .c.c.c.~.~.c.a.a
 80049c0:	6380 7f00 7e00 0000 0000 0000 0000 1e00     .c...~..........
 80049d0:	3f00 3180 6180 6000 6000 6000 6000 6000     .?.1.a.`.`.`.`.`
 80049e0:	6000 6180 3180 3f00 1e00 0000 0000 0000     .`.a.1.?........
 80049f0:	0000 7c00 7f00 6300 6380 6180 6180 6180     ...|...c.c.a.a.a
 8004a00:	6180 6180 6180 6300 6300 7e00 7c00 0000     .a.a.a.c.c.~.|..
 8004a10:	0000 0000 0000 7f80 7f80 6000 6000 6000     ...........`.`.`
 8004a20:	6000 7f00 7f00 6000 6000 6000 6000 7f80     .`.....`.`.`.`..
 8004a30:	7f80 0000 0000 0000 0000 7f80 7f80 6000     ...............`
 8004a40:	6000 6000 6000 7f00 7f00 6000 6000 6000     .`.`.`.....`.`.`
 8004a50:	6000 6000 6000 0000 0000 0000 0000 1e00     .`.`.`..........
 8004a60:	3f00 3180 6180 6000 6000 6000 6380 6380     .?.1.a.`.`.`.c.c
 8004a70:	6180 6180 3180 3f80 1e00 0000 0000 0000     .a.a.1.?........
 8004a80:	0000 6180 6180 6180 6180 6180 6180 7f80     ...a.a.a.a.a.a..
 8004a90:	7f80 6180 6180 6180 6180 6180 6180 0000     ...a.a.a.a.a.a..
 8004aa0:	0000 0000 0000 3f00 3f00 0c00 0c00 0c00     .......?.?......
 8004ab0:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 3f00     ...............?
 8004ac0:	3f00 0000 0000 0000 0000 0180 0180 0180     .?..............
 8004ad0:	0180 0180 0180 0180 0180 0180 6180 6180     .............a.a
 8004ae0:	7380 3f00 1e00 0000 0000 0000 0000 60c0     .s.?...........`
 8004af0:	6180 6300 6600 6600 6c00 7800 7c00 6600     .a.c.f.f.l.x.|.f
 8004b00:	6600 6300 6180 6180 60c0 0000 0000 0000     .f.c.a.a.`......
 8004b10:	0000 6000 6000 6000 6000 6000 6000 6000     ...`.`.`.`.`.`.`
 8004b20:	6000 6000 6000 6000 6000 7f80 7f80 0000     .`.`.`.`.`......
 8004b30:	0000 0000 0000 71c0 71c0 7bc0 7ac0 6ac0     .......q.q.{.z.j
 8004b40:	6ac0 6ec0 64c0 60c0 60c0 60c0 60c0 60c0     .j.n.d.`.`.`.`.`
 8004b50:	60c0 0000 0000 0000 0000 7180 7180 7980     .`.........q.q.y
 8004b60:	7980 7980 6d80 6d80 6d80 6580 6780 6780     .y.y.m.m.m.e.g.g
 8004b70:	6780 6380 6380 0000 0000 0000 0000 1e00     .g.c.c..........
 8004b80:	3f00 3300 6180 6180 6180 6180 6180 6180     .?.3.a.a.a.a.a.a
 8004b90:	6180 6180 3300 3f00 1e00 0000 0000 0000     .a.a.3.?........
 8004ba0:	0000 7e00 7f00 6380 6180 6180 6180 6380     ...~...c.a.a.a.c
 8004bb0:	7f00 7e00 6000 6000 6000 6000 6000 0000     ...~.`.`.`.`.`..
 8004bc0:	0000 0000 0000 1e00 3f00 3300 6180 6180     .........?.3.a.a
 8004bd0:	6180 6180 6180 6180 6580 6780 3300 3f80     .a.a.a.a.e.g.3.?
 8004be0:	1e40 0000 0000 0000 0000 7e00 7f00 6380     @..........~...c
 8004bf0:	6180 6180 6380 7f00 7e00 6600 6300 6300     .a.a.c...~.f.c.c
 8004c00:	6180 6180 60c0 0000 0000 0000 0000 0e00     .a.a.`..........
 8004c10:	1f00 3180 3180 3000 3800 1e00 0700 0380     ...1.1.0.8......
 8004c20:	6180 6180 3180 3f00 1e00 0000 0000 0000     .a.a.1.?........
 8004c30:	0000 ffc0 ffc0 0c00 0c00 0c00 0c00 0c00     ................
 8004c40:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0000     ................
 8004c50:	0000 0000 0000 6180 6180 6180 6180 6180     .......a.a.a.a.a
 8004c60:	6180 6180 6180 6180 6180 6180 7380 3f00     .a.a.a.a.a.a.s.?
 8004c70:	1e00 0000 0000 0000 0000 60c0 60c0 60c0     ...........`.`.`
 8004c80:	3180 3180 3180 1b00 1b00 1b00 1b00 0e00     .1.1.1..........
 8004c90:	0e00 0e00 0400 0000 0000 0000 0000 c0c0     ................
 8004ca0:	c0c0 c0c0 c0c0 c0c0 ccc0 4c80 4c80 5e80     ...........L.L.^
 8004cb0:	5280 5280 7380 6180 6180 0000 0000 0000     .R.R.s.a.a......
 8004cc0:	0000 c0c0 6080 6180 3300 3b00 1e00 0c00     .....`.a.3.;....
 8004cd0:	0c00 1e00 1f00 3b00 7180 6180 c0c0 0000     .......;.q.a....
 8004ce0:	0000 0000 0000 c0c0 6180 6180 3300 3300     .........a.a.3.3
 8004cf0:	1e00 1e00 0c00 0c00 0c00 0c00 0c00 0c00     ................
 8004d00:	0c00 0000 0000 0000 0000 3f80 3f80 0180     ...........?.?..
 8004d10:	0300 0300 0600 0c00 0c00 1800 1800 3000     ...............0
 8004d20:	6000 7f80 7f80 0000 0000 0000 0f00 0f00     .`..............
 8004d30:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
 8004d40:	0c00 0c00 0c00 0c00 0c00 0c00 0f00 0f00     ................
 8004d50:	0000 1800 1800 1800 0c00 0c00 0c00 0c00     ................
 8004d60:	0600 0600 0600 0600 0300 0300 0300 0000     ................
 8004d70:	0000 0000 1e00 1e00 0600 0600 0600 0600     ................
 8004d80:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 8004d90:	0600 0600 1e00 1e00 0000 0c00 0c00 1e00     ................
 8004da0:	1200 3300 3300 6180 6180 0000 0000 0000     ...3.3.a.a......
	...
 8004ddc:	ffe0 0000 0000 3800 1800 0c00 0000 0000     .......8........
	...
 8004e0c:	0000 1f00 3f80 6180 0180 1f80 3f80 6180     .....?.a.....?.a
 8004e1c:	6380 7f80 38c0 0000 0000 0000 0000 6000     .c...8.........`
 8004e2c:	6000 6000 6000 6e00 7f00 7380 6180 6180     .`.`.`.n...s.a.a
 8004e3c:	6180 6180 7380 7f00 6e00 0000 0000 0000     .a.a.s...n......
	...
 8004e54:	0000 1e00 3f00 7380 6180 6000 6000 6180     .....?.s.a.`.`.a
 8004e64:	7380 3f00 1e00 0000 0000 0000 0000 0180     .s.?............
 8004e74:	0180 0180 0180 1d80 3f80 7380 6180 6180     .........?.s.a.a
 8004e84:	6180 6180 7380 3f80 1d80 0000 0000 0000     .a.a.s.?........
	...
 8004e9c:	0000 1e00 3f00 7300 6180 7f80 7f80 6000     .....?.s.a.....`
 8004eac:	7180 3f00 1e00 0000 0000 0000 0000 07c0     .q.?............
 8004ebc:	0fc0 0c00 0c00 7f80 7f80 0c00 0c00 0c00     ................
 8004ecc:	0c00 0c00 0c00 0c00 0c00 0000 0000 0000     ................
	...
 8004ee4:	1d80 3f80 7380 6180 6180 6180 6180 7380     ...?.s.a.a.a.a.s
 8004ef4:	3f80 1d80 0180 6380 7f00 3e00 0000 6000     .?.....c...>...`
 8004f04:	6000 6000 6000 6f00 7f80 7180 6180 6180     .`.`.`.o...q.a.a
 8004f14:	6180 6180 6180 6180 6180 0000 0000 0000     .a.a.a.a.a......
 8004f24:	0000 0600 0600 0000 0000 3e00 3e00 0600     ...........>.>..
 8004f34:	0600 0600 0600 0600 0600 0600 0600 0000     ................
 8004f44:	0000 0000 0600 0600 0000 0000 3e00 3e00     .............>.>
 8004f54:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 8004f64:	0600 4600 7e00 3c00 0000 6000 6000 6000     ...F.~.<...`.`.`
 8004f74:	6000 6180 6300 6600 6c00 7c00 7600 6300     .`.a.c.f.l.|.v.c
 8004f84:	6300 6180 60c0 0000 0000 0000 0000 3e00     .c.a.`.........>
 8004f94:	3e00 0600 0600 0600 0600 0600 0600 0600     .>..............
 8004fa4:	0600 0600 0600 0600 0600 0000 0000 0000     ................
	...
 8004fbc:	0000 dd80 ffc0 cec0 ccc0 ccc0 ccc0 ccc0     ................
 8004fcc:	ccc0 ccc0 ccc0 0000 0000 0000 0000 0000     ................
 8004fdc:	0000 0000 0000 6f00 7f80 7180 6180 6180     .......o...q.a.a
 8004fec:	6180 6180 6180 6180 6180 0000 0000 0000     .a.a.a.a.a......
	...
 8005004:	0000 1e00 3f00 7380 6180 6180 6180 6180     .....?.s.a.a.a.a
 8005014:	7380 3f00 1e00 0000 0000 0000 0000 0000     .s.?............
 8005024:	0000 0000 6e00 7f00 7380 6180 6180 6180     .....n...s.a.a.a
 8005034:	6180 7380 7f00 6e00 6000 6000 6000 6000     .a.s...n.`.`.`.`
	...
 800504c:	1d80 3f80 7380 6180 6180 6180 6180 7380     ...?.s.a.a.a.a.s
 800505c:	3f80 1d80 0180 0180 0180 0180 0000 0000     .?..............
 800506c:	0000 0000 0000 6700 3f80 3900 3000 3000     .......g.?.9.0.0
 800507c:	3000 3000 3000 3000 3000 0000 0000 0000     .0.0.0.0.0......
	...
 8005094:	0000 1e00 3f80 6180 6000 7f00 3f80 0180     .....?.a.`...?..
 80050a4:	6180 7f00 1e00 0000 0000 0000 0000 0000     .a..............
 80050b4:	0800 1800 1800 7f00 7f00 1800 1800 1800     ................
 80050c4:	1800 1800 1800 1f80 0f80 0000 0000 0000     ................
	...
 80050dc:	0000 6180 6180 6180 6180 6180 6180 6180     ...a.a.a.a.a.a.a
 80050ec:	6380 7f80 3d80 0000 0000 0000 0000 0000     .c...=..........
 80050fc:	0000 0000 0000 60c0 3180 3180 3180 1b00     .......`.1.1.1..
 800510c:	1b00 1b00 0e00 0e00 0600 0000 0000 0000     ................
	...
 8005124:	0000 dd80 dd80 dd80 5500 5500 5500 7700     .........U.U.U.w
 8005134:	7700 2200 2200 0000 0000 0000 0000 0000     .w."."..........
 8005144:	0000 0000 0000 6180 3300 3300 1e00 0c00     .......a.3.3....
 8005154:	0c00 1e00 3300 3300 6180 0000 0000 0000     .....3.3.a......
	...
 800516c:	6180 6180 3180 3300 3300 1b00 1b00 1b00     .a.a.1.3.3......
 800517c:	0e00 0e00 0e00 1c00 7c00 7000 0000 0000     .........|.p....
 800518c:	0000 0000 0000 7fc0 7fc0 0180 0300 0600     ................
 800519c:	0c00 1800 3000 7fc0 7fc0 0000 0000 0000     .....0..........
 80051ac:	0380 0780 0600 0600 0600 0600 0600 0e00     ................
 80051bc:	1c00 1c00 0e00 0600 0600 0600 0600 0600     ................
 80051cc:	0780 0380 0600 0600 0600 0600 0600 0600     ................
 80051dc:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 80051ec:	0600 0600 0600 0600 3800 3c00 0c00 0c00     .........8.<....
 80051fc:	0c00 0c00 0c00 0e00 0700 0700 0e00 0c00     ................
 800520c:	0c00 0c00 0c00 0c00 3c00 3800 0000 0000     .........<.8....
	...
 8005224:	0000 3880 7f80 4700 0000 0000 0000 0000     ...8...G........
	...

0800523c <Font16x26>:
	...
 8005270:	03e0 03e0 03e0 03e0 03e0 03e0 03e0 03e0     ................
 8005280:	03c0 03c0 01c0 01c0 01c0 01c0 01c0 0000     ................
 8005290:	0000 0000 03e0 03e0 03e0 0000 0000 0000     ................
 80052a0:	0000 0000 1e3c 1e3c 1e3c 1e3c 1e3c 1e3c     ....<.<.<.<.<.<.
 80052b0:	1e3c 0000 0000 0000 0000 0000 0000 0000     <...............
	...
 80052d8:	01ce 03ce 03de 039e 039c 079c 3fff 7fff     .............?..
 80052e8:	0738 0f38 0f78 0f78 0e78 ffff ffff 1ef0     8.8.x.x.x.......
 80052f8:	1cf0 1ce0 3ce0 3de0 39e0 0000 0000 0000     .....<.=.9......
 8005308:	0000 0000 03fc 0ffe 1fee 1ee0 1ee0 1ee0     ................
 8005318:	1ee0 1fe0 0fe0 07e0 03f0 01fc 01fe 01fe     ................
 8005328:	01fe 01fe 01fe 01fe 3dfe 3ffc 0ff0 01e0     .........=.?....
 8005338:	01e0 0000 0000 0000 3e03 f707 e78f e78e     .........>......
 8005348:	e39e e3bc e7b8 e7f8 f7f0 3fe0 01c0 03ff     ...........?....
 8005358:	07ff 07f3 0ff3 1ef3 3cf3 38f3 78f3 f07f     .........<.8.x..
 8005368:	e03f 0000 0000 0000 0000 0000 07e0 0ff8     ?...............
 8005378:	0f78 1f78 1f78 1f78 0f78 0ff0 0fe0 1f80     x.x.x.x.x.......
 8005388:	7fc3 fbc3 f3e7 f1f7 f0f7 f0ff f07f f83e     ..............>.
 8005398:	7c7f 3fff 1fef 0000 0000 0000 0000 0000     .|.?............
 80053a8:	03e0 03e0 03e0 03e0 03e0 03c0 01c0 0000     ................
	...
 80053dc:	003f 007c 01f0 01e0 03c0 07c0 0780 0780     ?.|.............
 80053ec:	0f80 0f00 0f00 0f00 0f00 0f00 0f00 0f80     ................
 80053fc:	0780 0780 07c0 03c0 01e0 01f0 007c 003f     ............|.?.
 800540c:	000f 0000 7e00 1f00 07c0 03c0 01e0 01f0     .....~..........
 800541c:	00f0 00f0 00f8 0078 0078 0078 0078 0078     ......x.x.x.x.x.
 800542c:	0078 00f8 00f0 00f0 01f0 01e0 03c0 07c0     x...............
 800543c:	1f00 7e00 7800 0000 03e0 03c0 01c0 39ce     ...~.x.........9
 800544c:	3fff 3f7f 0320 0370 07f8 0f78 1f3c 0638     .?.? .p...x.<.8.
	...
 8005484:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 ffff     ................
 8005494:	ffff 01c0 01c0 01c0 01c0 01c0 01c0 0000     ................
	...
 80054cc:	0000 03e0 03e0 03e0 03e0 01e0 01e0 01e0     ................
 80054dc:	01c0 0380 0000 0000 0000 0000 0000 0000     ................
	...
 80054f4:	0000 3ffe 3ffe 0000 0000 0000 0000 0000     ...?.?..........
	...
 8005534:	0000 03e0 03e0 03e0 03e0 0000 0000 0000     ................
 8005544:	0000 0000 000f 000f 001e 001e 003c 003c     ............<.<.
 8005554:	0078 0078 00f0 00f0 01e0 01e0 03c0 03c0     x.x.............
 8005564:	0780 0780 0f00 0f00 1e00 1e00 3c00 3c00     .............<.<
 8005574:	7800 7800 f000 0000 07f0 0ff8 1f7c 3e3e     .x.x........|.>>
 8005584:	3c1e 7c1f 7c1f 780f 780f 780f 780f 780f     .<.|.|.x.x.x.x.x
 8005594:	780f 780f 7c1f 7c1f 3c1e 3e3e 1f7c 0ff8     .x.x.|.|.<>>|...
 80055a4:	07f0 0000 0000 0000 0000 0000 00f0 07f0     ................
 80055b4:	3ff0 3ff0 01f0 01f0 01f0 01f0 01f0 01f0     .?.?............
 80055c4:	01f0 01f0 01f0 01f0 01f0 01f0 01f0 01f0     ................
 80055d4:	01f0 3fff 3fff 0000 0000 0000 0000 0000     ...?.?..........
 80055e4:	0fe0 3ff8 3c7c 003c 003e 003e 003e 003c     ...?|<<.>.>.>.<.
 80055f4:	003c 007c 00f8 01f0 03e0 07c0 0780 0f00     <.|.............
 8005604:	1e00 3e00 3c00 3ffe 3ffe 0000 0000 0000     ...>.<.?.?......
 8005614:	0000 0000 0ff0 1ff8 1c7c 003e 003e 003e     ........|.>.>.>.
 8005624:	003c 003c 00f8 0ff0 0ff8 007c 003e 001e     <.<.......|.>...
 8005634:	001e 001e 001e 003e 1c7c 1ff8 1fe0 0000     ......>.|.......
	...
 800564c:	0078 00f8 00f8 01f8 03f8 07f8 07f8 0f78     x.............x.
 800565c:	1e78 1e78 3c78 7878 7878 ffff ffff 0078     x.x.x<xxxx....x.
 800566c:	0078 0078 0078 0078 0078 0000 0000 0000     x.x.x.x.x.......
 800567c:	0000 0000 1ffc 1ffc 1ffc 1e00 1e00 1e00     ................
 800568c:	1e00 1e00 1fe0 1ff8 00fc 007c 003e 003e     ..........|.>.>.
 800569c:	001e 003e 003e 003c 1c7c 1ff8 1fe0 0000     ..>.>.<.|.......
	...
 80056b4:	01fc 07fe 0f8e 1f00 1e00 3e00 3c00 3c00     ...........>.<.<
 80056c4:	3df8 3ffc 7f3e 7e1f 3c0f 3c0f 3c0f 3c0f     .=.?>..~.<.<.<.<
 80056d4:	3e0f 1e1f 1f3e 0ffc 03f0 0000 0000 0000     .>..>...........
 80056e4:	0000 0000 3fff 3fff 3fff 000f 001e 001e     .....?.?.?......
 80056f4:	003c 0038 0078 00f0 00f0 01e0 01e0 03c0     <.8.x...........
 8005704:	03c0 0780 0f80 0f80 0f00 1f00 1f00 0000     ................
	...
 800571c:	07f8 0ffc 1f3e 1e1e 3e1e 3e1e 1e1e 1f3c     ....>....>.>..<.
 800572c:	0ff8 07f0 0ff8 1efc 3e3e 3c1f 7c1f 7c0f     ........>>.<.|.|
 800573c:	7c0f 3c1f 3f3e 1ffc 07f0 0000 0000 0000     .|.<>?..........
 800574c:	0000 0000 07f0 0ff8 1e7c 3c3e 3c1e 7c1f     ........|.><.<.|
 800575c:	7c1f 7c1f 7c1f 3c1f 3e3f 1fff 07ef 001f     .|.|.|.<?>......
 800576c:	001e 001e 003e 003c 38f8 3ff0 1fe0 0000     ....>.<..8.?....
	...
 8005790:	03e0 03e0 03e0 03e0 0000 0000 0000 0000     ................
 80057a0:	0000 0000 0000 03e0 03e0 03e0 03e0 0000     ................
	...
 80057c4:	03e0 03e0 03e0 03e0 0000 0000 0000 0000     ................
 80057d4:	0000 0000 0000 03e0 03e0 03e0 03e0 01e0     ................
 80057e4:	01e0 01e0 03c0 0380 0000 0000 0000 0000     ................
 80057f4:	0000 0000 0003 000f 003f 00fc 03f0 0fc0     ........?.......
 8005804:	3f00 fe00 3f00 0fc0 03f0 00fc 003f 000f     .?...?......?...
 8005814:	0003 0000 0000 0000 0000 0000 0000 0000     ................
	...
 8005834:	ffff ffff 0000 0000 0000 ffff ffff 0000     ................
	...
 8005860:	e000 f800 7e00 1f80 07e0 01f8 007e 001f     .....~......~...
 8005870:	007e 01f8 07e0 1f80 7e00 f800 e000 0000     ~........~......
	...
 8005888:	1ff0 3ffc 383e 381f 381f 001e 001e 003c     ...?>8.8.8....<.
 8005898:	0078 00f0 01e0 03c0 03c0 07c0 07c0 0000     x...............
 80058a8:	0000 0000 07c0 07c0 07c0 0000 0000 0000     ................
 80058b8:	0000 0000 03f8 0ffe 1f1e 3e0f 3c7f 78ff     ...........>.<.x
 80058c8:	79ef 73c7 f3c7 f38f f38f f38f f39f f39f     .y.s............
 80058d8:	73ff 7bff 79f7 3c00 1f1c 0ffc 03f8 0000     .s.{.y.<........
	...
 80058f4:	0000 03e0 03e0 07f0 07f0 07f0 0f78 0f78     ............x.x.
 8005904:	0e7c 1e3c 1e3c 3c3e 3ffe 3fff 781f 780f     |.<.<.><.?.?.x.x
 8005914:	f00f f007 f007 0000 0000 0000 0000 0000     ................
 8005924:	0000 0000 0000 3ff8 3ffc 3c3e 3c1e 3c1e     .......?.?><.<.<
 8005934:	3c1e 3c3e 3c7c 3ff0 3ff8 3c7e 3c1f 3c1f     .<><|<.?.?~<.<.<
 8005944:	3c0f 3c0f 3c1f 3ffe 3ff8 0000 0000 0000     .<.<.<.?.?......
	...
 800595c:	0000 01ff 07ff 1f87 3e00 3c00 7c00 7800     .........>.<.|.x
 800596c:	7800 7800 7800 7800 7c00 7c00 3e00 3f00     .x.x.x.x.|.|.>.?
 800597c:	1f83 07ff 01ff 0000 0000 0000 0000 0000     ................
 800598c:	0000 0000 0000 7ff0 7ffc 787e 781f 781f     ..........~x.x.x
 800599c:	780f 780f 780f 780f 780f 780f 780f 780f     .x.x.x.x.x.x.x.x
 80059ac:	781f 781e 787e 7ff8 7fe0 0000 0000 0000     .x.x~x..........
	...
 80059c4:	0000 3fff 3fff 3e00 3e00 3e00 3e00 3e00     ...?.?.>.>.>.>.>
 80059d4:	3e00 3ffe 3ffe 3e00 3e00 3e00 3e00 3e00     .>.?.?.>.>.>.>.>
 80059e4:	3e00 3fff 3fff 0000 0000 0000 0000 0000     .>.?.?..........
 80059f4:	0000 0000 0000 1fff 1fff 1e00 1e00 1e00     ................
 8005a04:	1e00 1e00 1e00 1fff 1fff 1e00 1e00 1e00     ................
 8005a14:	1e00 1e00 1e00 1e00 1e00 0000 0000 0000     ................
	...
 8005a2c:	0000 03fe 0fff 1f87 3e00 7c00 7c00 7800     .........>.|.|.x
 8005a3c:	f800 f800 f87f f87f 780f 7c0f 7c0f 3e0f     .........x.|.|.>
 8005a4c:	1f8f 0fff 03fe 0000 0000 0000 0000 0000     ................
 8005a5c:	0000 0000 0000 7c1f 7c1f 7c1f 7c1f 7c1f     .......|.|.|.|.|
 8005a6c:	7c1f 7c1f 7c1f 7fff 7fff 7c1f 7c1f 7c1f     .|.|.|.....|.|.|
 8005a7c:	7c1f 7c1f 7c1f 7c1f 7c1f 0000 0000 0000     .|.|.|.|.|......
	...
 8005a94:	0000 3fff 3fff 03e0 03e0 03e0 03e0 03e0     ...?.?..........
 8005aa4:	03e0 03e0 03e0 03e0 03e0 03e0 03e0 03e0     ................
 8005ab4:	03e0 3fff 3fff 0000 0000 0000 0000 0000     ...?.?..........
 8005ac4:	0000 0000 0000 1ffc 1ffc 007c 007c 007c     ..........|.|.|.
 8005ad4:	007c 007c 007c 007c 007c 007c 007c 007c     |.|.|.|.|.|.|.|.
 8005ae4:	0078 0078 38f8 3ff0 3fc0 0000 0000 0000     x.x..8.?.?......
	...
 8005afc:	0000 3c1f 3c1e 3c3c 3c78 3cf0 3de0 3fe0     ...<.<<<x<.<.=.?
 8005b0c:	3fc0 3f80 3fc0 3fe0 3df0 3cf0 3c78 3c7c     .?.?.?.?.=.<x<|<
 8005b1c:	3c3e 3c1f 3c0f 0000 0000 0000 0000 0000     ><.<.<..........
 8005b2c:	0000 0000 0000 3e00 3e00 3e00 3e00 3e00     .......>.>.>.>.>
 8005b3c:	3e00 3e00 3e00 3e00 3e00 3e00 3e00 3e00     .>.>.>.>.>.>.>.>
 8005b4c:	3e00 3e00 3e00 3fff 3fff 0000 0000 0000     .>.>.>.?.?......
	...
 8005b64:	0000 f81f fc1f fc1f fe3f fe3f fe3f ff7f     ........?.?.?...
 8005b74:	ff77 ff77 f7f7 f7e7 f3e7 f3e7 f3c7 f007     w.w.............
 8005b84:	f007 f007 f007 0000 0000 0000 0000 0000     ................
 8005b94:	0000 0000 0000 7c0f 7c0f 7e0f 7f0f 7f0f     .......|.|.~....
 8005ba4:	7f8f 7f8f 7fcf 7bef 79ef 79ff 78ff 78ff     .......{.y.y.x.x
 8005bb4:	787f 783f 783f 781f 781f 0000 0000 0000     .x?x?x.x.x......
	...
 8005bcc:	0000 07f0 1ffc 3e3e 7c1f 780f 780f f80f     ......>>.|.x.x..
 8005bdc:	f80f f80f f80f f80f f80f 780f 780f 7c1f     ...........x.x.|
 8005bec:	3e3e 1ffc 07f0 0000 0000 0000 0000 0000     >>..............
 8005bfc:	0000 0000 0000 3ffc 3fff 3e1f 3e0f 3e0f     .......?.?.>.>.>
 8005c0c:	3e0f 3e0f 3e1f 3e3f 3ffc 3ff0 3e00 3e00     .>.>.>?>.?.?.>.>
 8005c1c:	3e00 3e00 3e00 3e00 3e00 0000 0000 0000     .>.>.>.>.>......
	...
 8005c34:	0000 07f0 1ffc 3e3e 7c1f 780f 780f f80f     ......>>.|.x.x..
 8005c44:	f80f f80f f80f f80f f80f 780f 780f 7c1f     ...........x.x.|
 8005c54:	3e3e 1ffc 07f8 007c 003f 000f 0003 0000     >>....|.?.......
 8005c64:	0000 0000 0000 3ff0 3ffc 3c7e 3c3e 3c1e     .......?.?~<><.<
 8005c74:	3c1e 3c3e 3c3c 3cfc 3ff0 3fe0 3df0 3cf8     .<><<<.<.?.?.=.<
 8005c84:	3c7c 3c3e 3c1e 3c1f 3c0f 0000 0000 0000     |<><.<.<.<......
	...
 8005c9c:	0000 07fc 1ffe 3e0e 3c00 3c00 3c00 3e00     .......>.<.<.<.>
 8005cac:	1fc0 0ff8 03fe 007f 001f 000f 000f 201f     ............... 
 8005cbc:	3c3e 3ffc 1ff0 0000 0000 0000 0000 0000     ><.?............
 8005ccc:	0000 0000 0000 ffff ffff 03e0 03e0 03e0     ................
 8005cdc:	03e0 03e0 03e0 03e0 03e0 03e0 03e0 03e0     ................
 8005cec:	03e0 03e0 03e0 03e0 03e0 0000 0000 0000     ................
	...
 8005d04:	0000 7c0f 7c0f 7c0f 7c0f 7c0f 7c0f 7c0f     ...|.|.|.|.|.|.|
 8005d14:	7c0f 7c0f 7c0f 7c0f 7c0f 7c0f 3c1e 3c1e     .|.|.|.|.|.|.<.<
 8005d24:	3e3e 1ffc 07f0 0000 0000 0000 0000 0000     >>..............
 8005d34:	0000 0000 0000 f007 f007 f807 780f 7c0f     .............x.|
 8005d44:	3c1e 3c1e 3e1e 1e3c 1f3c 1f78 0f78 0ff8     .<.<.><.<.x.x...
 8005d54:	07f0 07f0 07f0 03e0 03e0 0000 0000 0000     ................
	...
 8005d6c:	0000 e003 f003 f003 f007 f3e7 f3e7 f3e7     ................
 8005d7c:	73e7 7bf7 7ff7 7fff 7f7f 7f7f 7f7e 3f7e     .s.{........~.~?
 8005d8c:	3e3e 3e3e 3e3e 0000 0000 0000 0000 0000     >>>>>>..........
 8005d9c:	0000 0000 0000 f807 7c0f 3e1e 3e3e 1f3c     .........|.>>><.
 8005dac:	0ff8 07f0 07e0 03e0 03e0 07f0 0ff8 0f7c     ..............|.
 8005dbc:	1e7c 3c3e 781f 780f f00f 0000 0000 0000     |.><.x.x........
	...
 8005dd4:	0000 f807 7807 7c0f 3c1e 3e1e 1f3c 0f78     .....x.|.<.><.x.
 8005de4:	0ff8 07f0 03e0 03e0 03e0 03e0 03e0 03e0     ................
 8005df4:	03e0 03e0 03e0 0000 0000 0000 0000 0000     ................
 8005e04:	0000 0000 0000 7fff 7fff 000f 001f 003e     ..............>.
 8005e14:	007c 00f8 00f0 01e0 03e0 07c0 0f80 0f00     |...............
 8005e24:	1e00 3e00 7c00 7fff 7fff 0000 0000 0000     ...>.|..........
 8005e34:	0000 0000 07ff 0780 0780 0780 0780 0780     ................
 8005e44:	0780 0780 0780 0780 0780 0780 0780 0780     ................
 8005e54:	0780 0780 0780 0780 0780 0780 0780 0780     ................
 8005e64:	0780 07ff 07ff 0000 7800 7800 3c00 3c00     .........x.x.<.<
 8005e74:	1e00 1e00 0f00 0f00 0780 0780 03c0 03c0     ................
 8005e84:	01e0 01e0 00f0 00f0 0078 0078 003c 003c     ........x.x.<.<.
 8005e94:	001e 001e 000f 000f 0007 0000 7ff0 00f0     ................
 8005ea4:	00f0 00f0 00f0 00f0 00f0 00f0 00f0 00f0     ................
 8005eb4:	00f0 00f0 00f0 00f0 00f0 00f0 00f0 00f0     ................
 8005ec4:	00f0 00f0 00f0 00f0 00f0 7ff0 7ff0 0000     ................
 8005ed4:	00c0 01c0 01c0 03e0 03e0 07f0 07f0 0778     ..............x.
 8005ee4:	0f78 0f38 1e3c 1e3c 3c1e 3c1e 380f 780f     x.8.<.<..<.<.8.x
 8005ef4:	7807 0000 0000 0000 0000 0000 0000 0000     .x..............
	...
 8005f30:	0000 ffff ffff 0000 0000 0000 00f0 0000     ................
	...
 8005f7c:	0ff8 3ffc 3c7c 003e 003e 003e 07fe 1ffe     ...?|<>.>.>.....
 8005f8c:	3e3e 7c3e 783e 7c3e 7c7e 3fff 1fcf 0000     >>>|>x>|~|.?....
	...
 8005fa4:	3c00 3c00 3c00 3c00 3c00 3c00 3df8 3ffe     .<.<.<.<.<.<.=.?
 8005fb4:	3f3e 3e1f 3c0f 3c0f 3c0f 3c0f 3c0f 3c0f     >?.>.<.<.<.<.<.<
 8005fc4:	3c1f 3c1e 3f3e 3ffc 3bf0 0000 0000 0000     .<.<>?.?.;......
	...
 8005fe4:	03fe 0fff 1f87 3e00 3e00 3c00 7c00 7c00     .......>.>.<.|.|
 8005ff4:	7c00 3c00 3e00 3e00 1f87 0fff 03fe 0000     .|.<.>.>........
	...
 800600c:	001f 001f 001f 001f 001f 001f 07ff 1fff     ................
 800601c:	3e3f 3c1f 7c1f 7c1f 7c1f 781f 781f 7c1f     ?>.<.|.|.|.x.x.|
 800602c:	7c1f 3c3f 3e7f 1fff 0fdf 0000 0000 0000     .|?<.>..........
	...
 800604c:	03f8 0ffc 1f3e 3e1e 3c1f 7c1f 7fff 7fff     ....>..>.<.|....
 800605c:	7c00 7c00 3c00 3e00 1f07 0fff 03fe 0000     .|.|.<.>........
	...
 8006074:	01ff 03e1 03c0 07c0 07c0 07c0 7fff 7fff     ................
 8006084:	07c0 07c0 07c0 07c0 07c0 07c0 07c0 07c0     ................
 8006094:	07c0 07c0 07c0 07c0 07c0 0000 0000 0000     ................
	...
 80060b4:	07ef 1fff 3e7f 3c1f 7c1f 7c1f 781f 781f     .....>.<.|.|.x.x
 80060c4:	781f 7c1f 7c1f 3c3f 3e7f 1fff 0fdf 001e     .x.|.|?<.>......
 80060d4:	001e 001e 387c 3ff8 3c00 3c00 3c00 3c00     ....|8.?.<.<.<.<
 80060e4:	3c00 3c00 3dfc 3ffe 3f9e 3f1f 3e1f 3c1f     .<.<.=.?.?.?.>.<
 80060f4:	3c1f 3c1f 3c1f 3c1f 3c1f 3c1f 3c1f 3c1f     .<.<.<.<.<.<.<.<
 8006104:	3c1f 0000 0000 0000 0000 0000 01f0 01f0     .<..............
	...
 800611c:	7fe0 7fe0 01e0 01e0 01e0 01e0 01e0 01e0     ................
 800612c:	01e0 01e0 01e0 01e0 01e0 01e0 01e0 0000     ................
	...
 8006144:	00f8 00f8 0000 0000 0000 0000 3ff8 3ff8     .............?.?
 8006154:	00f8 00f8 00f8 00f8 00f8 00f8 00f8 00f8     ................
 8006164:	00f8 00f8 00f8 00f8 00f8 00f8 00f8 00f0     ................
 8006174:	71f0 7fe0 3c00 3c00 3c00 3c00 3c00 3c00     .q...<.<.<.<.<.<
 8006184:	3c1f 3c3e 3c7c 3cf8 3df0 3de0 3fc0 3fc0     .<><|<.<.=.=.?.?
 8006194:	3fe0 3df0 3cf8 3c7c 3c3e 3c1f 3c1f 0000     .?.=.<|<><.<.<..
	...
 80061ac:	7ff0 01f0 01f0 01f0 01f0 01f0 01f0 01f0     ................
 80061bc:	01f0 01f0 01f0 01f0 01f0 01f0 01f0 01f0     ................
 80061cc:	01f0 01f0 01f0 01f0 01f0 0000 0000 0000     ................
	...
 80061ec:	f79e ffff ffff ffff fbe7 f9e7 f1c7 f1c7     ................
 80061fc:	f1c7 f1c7 f1c7 f1c7 f1c7 f1c7 f1c7 0000     ................
	...
 8006220:	3dfc 3ffe 3f9e 3f1f 3e1f 3c1f 3c1f 3c1f     .=.?.?.?.>.<.<.<
 8006230:	3c1f 3c1f 3c1f 3c1f 3c1f 3c1f 3c1f 0000     .<.<.<.<.<.<.<..
	...
 8006254:	07f0 1ffc 3e3e 3c1f 7c1f 780f 780f 780f     ....>>.<.|.x.x.x
 8006264:	780f 780f 7c1f 3c1f 3e3e 1ffc 07f0 0000     .x.x.|.<>>......
	...
 8006288:	3df8 3ffe 3f3e 3e1f 3c0f 3c0f 3c0f 3c0f     .=.?>?.>.<.<.<.<
 8006298:	3c0f 3c0f 3c1f 3e1e 3f3e 3ffc 3ff8 3c00     .<.<.<.>>?.?.?.<
 80062a8:	3c00 3c00 3c00 3c00 0000 0000 0000 0000     .<.<.<.<........
 80062b8:	0000 0000 07ee 1ffe 3e7e 3c1e 7c1e 781e     ........~>.<.|.x
 80062c8:	781e 781e 781e 781e 7c1e 7c3e 3e7e 1ffe     .x.x.x.x.|>|~>..
 80062d8:	0fde 001e 001e 001e 001e 001e 0000 0000     ................
	...
 80062f0:	1f7f 1fff 1fe7 1fc7 1f87 1f00 1f00 1f00     ................
 8006300:	1f00 1f00 1f00 1f00 1f00 1f00 1f00 0000     ................
	...
 8006324:	07fc 1ffe 1e0e 3e00 3e00 3f00 1fe0 07fc     .......>.>.?....
 8006334:	00fe 003e 001e 001e 3c3e 3ffc 1ff0 0000     ..>.....><.?....
	...
 8006350:	0000 0780 0780 0780 7fff 7fff 0780 0780     ................
 8006360:	0780 0780 0780 0780 0780 0780 0780 0780     ................
 8006370:	07c0 03ff 01ff 0000 0000 0000 0000 0000     ................
	...
 800638c:	3c1e 3c1e 3c1e 3c1e 3c1e 3c1e 3c1e 3c1e     .<.<.<.<.<.<.<.<
 800639c:	3c1e 3c1e 3c3e 3c7e 3efe 1ffe 0fde 0000     .<.<><~<.>......
	...
 80063c0:	f007 780f 780f 3c1e 3c1e 3e1e 1e3c 1e3c     ...x.x.<.<.><.<.
 80063d0:	0f78 0f78 0ff0 07f0 07f0 03e0 03e0 0000     x.x.............
	...
 80063f4:	f003 f1e3 f3e3 f3e7 f3f7 f3f7 7ff7 7f77     ..............w.
 8006404:	7f7f 7f7f 7f7f 3e3e 3e3e 3e3e 3e3e 0000     ......>>>>>>>>..
	...
 8006428:	7c0f 3e1e 3e3c 1f3c 0ff8 07f0 07f0 03e0     .|.><><.........
 8006438:	07f0 07f8 0ff8 1e7c 3e3e 3c1f 781f 0000     ......|.>>.<.x..
	...
 800645c:	f807 780f 7c0f 3c1e 3c1e 1e3c 1e3c 1f3c     ...x.|.<.<<.<.<.
 800646c:	0f78 0ff8 07f0 07f0 03e0 03e0 03c0 03c0     x...............
 800647c:	03c0 0780 0f80 7f00 0000 0000 0000 0000     ................
 800648c:	0000 0000 3fff 3fff 001f 003e 007c 00f8     .....?.?..>.|...
 800649c:	01f0 03e0 07c0 0f80 1f00 1e00 3c00 7fff     .............<..
 80064ac:	7fff 0000 0000 0000 0000 0000 01fe 03e0     ................
 80064bc:	03c0 03c0 03c0 03c0 01e0 01e0 01e0 01c0     ................
 80064cc:	03c0 3f80 3f80 03c0 01c0 01e0 01e0 01e0     ...?.?..........
 80064dc:	03c0 03c0 03c0 03c0 03e0 01fe 007e 0000     ............~...
 80064ec:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 01c0     ................
 80064fc:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 01c0     ................
 800650c:	01c0 01c0 01c0 01c0 01c0 01c0 01c0 01c0     ................
 800651c:	01c0 0000 3fc0 03e0 01e0 01e0 01e0 01e0     .....?..........
 800652c:	01c0 03c0 03c0 01c0 01e0 00fe 00fe 01e0     ................
 800653c:	01c0 03c0 03c0 01c0 01e0 01e0 01e0 01e0     ................
 800654c:	03e0 3fc0 3f00 0000 0000 0000 0000 0000     ...?.?..........
	...
 8006568:	0000 3f07 7fc7 73e7 f1ff f07e 0000 0000     ...?...s..~.....
	...
 8006588:	5953 4353 4b4c 3a20 2520 646c 7a48 0a0d     SYSCLK : %ldHz..
 8006598:	0000 0000 4348 4b4c 2020 3a20 2520 646c     ....HCLK   : %ld
 80065a8:	7a48 0a0d 0000 0000 4350 4b4c 2031 3a20     Hz......PCLK1  :
 80065b8:	2520 646c 7a48 0a0d 0000 0000 4350 4b4c      %ldHz......PCLK
 80065c8:	2032 3a20 2520 646c 7a48 0a0d 000a 0000     2  : %ldHz......
 80065d8:	6548 6c6c 6f6f 216f 0000 0000 6948 0021     Hellooo!....Hi!.
 80065e8:	6554 7473 3540 2e33 0000 0000               Test@53.....

080065f4 <AHBPrescTable>:
	...
 80065fc:	0201 0403 0706 0908                         ........

08006604 <APBPrescTable>:
 8006604:	0000 0000 0201 0403 2d23 2b30 0020 6c68     ........#-0+ .hl
 8006614:	004c 6665 4567 4746 3000 3231 3433 3635     L.efgEFG.0123456
 8006624:	3837 4139 4342 4544 0046 3130 3332 3534     789ABCDEF.012345
 8006634:	3736 3938 6261 6463 6665 0000               6789abcdef..

08006640 <_init>:
 8006640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006642:	bf00      	nop
 8006644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006646:	bc08      	pop	{r3}
 8006648:	469e      	mov	lr, r3
 800664a:	4770      	bx	lr

0800664c <_fini>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	bf00      	nop
 8006650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006652:	bc08      	pop	{r3}
 8006654:	469e      	mov	lr, r3
 8006656:	4770      	bx	lr
