
STM32_F4_Rbtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001004  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  0800118c  0800118c  0001118c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08001190  08001190  00011190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000000c  20000000  08001194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000074  2000000c  080011a0  0002000c  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  20000080  08001214  0002000c  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  8 .debug_info   000052ad  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001052  00000000  00000000  000252e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005b0  00000000  00000000  00026340  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000508  00000000  00000000  000268f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000028ca  00000000  00000000  00026df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007ea9  00000000  00000000  000296c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e87b3  00000000  00000000  0003156b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  00119d1e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001568  00000000  00000000  00119d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001174 	.word	0x08001174

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001174 	.word	0x08001174

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <HAL_Init+0x34>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <HAL_Init+0x34>)
 80001e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <HAL_Init+0x34>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <HAL_Init+0x34>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f4:	2003      	movs	r0, #3
 80001f6:	f000 f90d 	bl	8000414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001fa:	200f      	movs	r0, #15
 80001fc:	f000 f808 	bl	8000210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000200:	f000 fae2 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000204:	2300      	movs	r3, #0
}
 8000206:	4618      	mov	r0, r3
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40023c00 	.word	0x40023c00

08000210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <HAL_InitTick+0x54>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	4b12      	ldr	r3, [pc, #72]	; (8000268 <HAL_InitTick+0x58>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	4619      	mov	r1, r3
 8000222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000226:	fbb3 f3f1 	udiv	r3, r3, r1
 800022a:	fbb2 f3f3 	udiv	r3, r2, r3
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f917 	bl	8000462 <HAL_SYSTICK_Config>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800023a:	2301      	movs	r3, #1
 800023c:	e00e      	b.n	800025c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b0f      	cmp	r3, #15
 8000242:	d80a      	bhi.n	800025a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000244:	2200      	movs	r2, #0
 8000246:	6879      	ldr	r1, [r7, #4]
 8000248:	f04f 30ff 	mov.w	r0, #4294967295
 800024c:	f000 f8ed 	bl	800042a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000250:	4a06      	ldr	r2, [pc, #24]	; (800026c <HAL_InitTick+0x5c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000256:	2300      	movs	r3, #0
 8000258:	e000      	b.n	800025c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800025a:	2301      	movs	r3, #1
}
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000008 	.word	0x20000008
 8000268:	20000004 	.word	0x20000004
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_IncTick+0x20>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_IncTick+0x24>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4413      	add	r3, r2
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <HAL_IncTick+0x24>)
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	20000028 	.word	0x20000028

08000298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <HAL_GetTick+0x14>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000028 	.word	0x20000028

080002b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f003 0307 	and.w	r3, r3, #7
 80002be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <__NVIC_SetPriorityGrouping+0x44>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002cc:	4013      	ands	r3, r2
 80002ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002e2:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <__NVIC_SetPriorityGrouping+0x44>)
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	60d3      	str	r3, [r2, #12]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <__NVIC_GetPriorityGrouping+0x18>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	0a1b      	lsrs	r3, r3, #8
 8000302:	f003 0307 	and.w	r3, r3, #7
}
 8000306:	4618      	mov	r0, r3
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	db0a      	blt.n	800033e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	b2da      	uxtb	r2, r3
 800032c:	490c      	ldr	r1, [pc, #48]	; (8000360 <__NVIC_SetPriority+0x4c>)
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	0112      	lsls	r2, r2, #4
 8000334:	b2d2      	uxtb	r2, r2
 8000336:	440b      	add	r3, r1
 8000338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800033c:	e00a      	b.n	8000354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4908      	ldr	r1, [pc, #32]	; (8000364 <__NVIC_SetPriority+0x50>)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	f003 030f 	and.w	r3, r3, #15
 800034a:	3b04      	subs	r3, #4
 800034c:	0112      	lsls	r2, r2, #4
 800034e:	b2d2      	uxtb	r2, r2
 8000350:	440b      	add	r3, r1
 8000352:	761a      	strb	r2, [r3, #24]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	e000e100 	.word	0xe000e100
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f003 0307 	and.w	r3, r3, #7
 800037a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800037c:	69fb      	ldr	r3, [r7, #28]
 800037e:	f1c3 0307 	rsb	r3, r3, #7
 8000382:	2b04      	cmp	r3, #4
 8000384:	bf28      	it	cs
 8000386:	2304      	movcs	r3, #4
 8000388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	3304      	adds	r3, #4
 800038e:	2b06      	cmp	r3, #6
 8000390:	d902      	bls.n	8000398 <NVIC_EncodePriority+0x30>
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	3b03      	subs	r3, #3
 8000396:	e000      	b.n	800039a <NVIC_EncodePriority+0x32>
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	f04f 32ff 	mov.w	r2, #4294967295
 80003a0:	69bb      	ldr	r3, [r7, #24]
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	43da      	mvns	r2, r3
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	401a      	ands	r2, r3
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003b0:	f04f 31ff 	mov.w	r1, #4294967295
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ba:	43d9      	mvns	r1, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c0:	4313      	orrs	r3, r2
         );
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3724      	adds	r7, #36	; 0x24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3b01      	subs	r3, #1
 80003dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003e0:	d301      	bcc.n	80003e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003e2:	2301      	movs	r3, #1
 80003e4:	e00f      	b.n	8000406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e6:	4a0a      	ldr	r2, [pc, #40]	; (8000410 <SysTick_Config+0x40>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ee:	210f      	movs	r1, #15
 80003f0:	f04f 30ff 	mov.w	r0, #4294967295
 80003f4:	f7ff ff8e 	bl	8000314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <SysTick_Config+0x40>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003fe:	4b04      	ldr	r3, [pc, #16]	; (8000410 <SysTick_Config+0x40>)
 8000400:	2207      	movs	r2, #7
 8000402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	e000e010 	.word	0xe000e010

08000414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f7ff ff47 	bl	80002b0 <__NVIC_SetPriorityGrouping>
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800042a:	b580      	push	{r7, lr}
 800042c:	b086      	sub	sp, #24
 800042e:	af00      	add	r7, sp, #0
 8000430:	4603      	mov	r3, r0
 8000432:	60b9      	str	r1, [r7, #8]
 8000434:	607a      	str	r2, [r7, #4]
 8000436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800043c:	f7ff ff5c 	bl	80002f8 <__NVIC_GetPriorityGrouping>
 8000440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	68b9      	ldr	r1, [r7, #8]
 8000446:	6978      	ldr	r0, [r7, #20]
 8000448:	f7ff ff8e 	bl	8000368 <NVIC_EncodePriority>
 800044c:	4602      	mov	r2, r0
 800044e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000452:	4611      	mov	r1, r2
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff5d 	bl	8000314 <__NVIC_SetPriority>
}
 800045a:	bf00      	nop
 800045c:	3718      	adds	r7, #24
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f7ff ffb0 	bl	80003d0 <SysTick_Config>
 8000470:	4603      	mov	r3, r0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800047e:	f000 f802 	bl	8000486 <HAL_SYSTICK_Callback>
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}

08000486 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000494:	b480      	push	{r7}
 8000496:	b089      	sub	sp, #36	; 0x24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	61fb      	str	r3, [r7, #28]
 80004ae:	e16b      	b.n	8000788 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80004b0:	2201      	movs	r2, #1
 80004b2:	69fb      	ldr	r3, [r7, #28]
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	697a      	ldr	r2, [r7, #20]
 80004c0:	4013      	ands	r3, r2
 80004c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80004c4:	693a      	ldr	r2, [r7, #16]
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	f040 815a 	bne.w	8000782 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d003      	beq.n	80004de <HAL_GPIO_Init+0x4a>
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	2b12      	cmp	r3, #18
 80004dc:	d123      	bne.n	8000526 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80004de:	69fb      	ldr	r3, [r7, #28]
 80004e0:	08da      	lsrs	r2, r3, #3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	3208      	adds	r2, #8
 80004e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004ec:	69fb      	ldr	r3, [r7, #28]
 80004ee:	f003 0307 	and.w	r3, r3, #7
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	220f      	movs	r2, #15
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
 80004fa:	43db      	mvns	r3, r3
 80004fc:	69ba      	ldr	r2, [r7, #24]
 80004fe:	4013      	ands	r3, r2
 8000500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	691a      	ldr	r2, [r3, #16]
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	f003 0307 	and.w	r3, r3, #7
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	69ba      	ldr	r2, [r7, #24]
 8000514:	4313      	orrs	r3, r2
 8000516:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000518:	69fb      	ldr	r3, [r7, #28]
 800051a:	08da      	lsrs	r2, r3, #3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3208      	adds	r2, #8
 8000520:	69b9      	ldr	r1, [r7, #24]
 8000522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	2203      	movs	r2, #3
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	43db      	mvns	r3, r3
 8000538:	69ba      	ldr	r2, [r7, #24]
 800053a:	4013      	ands	r3, r2
 800053c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	f003 0203 	and.w	r2, r3, #3
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	fa02 f303 	lsl.w	r3, r2, r3
 800054e:	69ba      	ldr	r2, [r7, #24]
 8000550:	4313      	orrs	r3, r2
 8000552:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	69ba      	ldr	r2, [r7, #24]
 8000558:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d00b      	beq.n	800057a <HAL_GPIO_Init+0xe6>
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	2b02      	cmp	r3, #2
 8000568:	d007      	beq.n	800057a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800056e:	2b11      	cmp	r3, #17
 8000570:	d003      	beq.n	800057a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	2b12      	cmp	r3, #18
 8000578:	d130      	bne.n	80005dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	2203      	movs	r2, #3
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	43db      	mvns	r3, r3
 800058c:	69ba      	ldr	r2, [r7, #24]
 800058e:	4013      	ands	r3, r2
 8000590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	68da      	ldr	r2, [r3, #12]
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
 800059e:	69ba      	ldr	r2, [r7, #24]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	69ba      	ldr	r2, [r7, #24]
 80005a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005b0:	2201      	movs	r2, #1
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	43db      	mvns	r3, r3
 80005ba:	69ba      	ldr	r2, [r7, #24]
 80005bc:	4013      	ands	r3, r2
 80005be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	091b      	lsrs	r3, r3, #4
 80005c6:	f003 0201 	and.w	r2, r3, #1
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	69ba      	ldr	r2, [r7, #24]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	69ba      	ldr	r2, [r7, #24]
 80005da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	2203      	movs	r2, #3
 80005e8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ec:	43db      	mvns	r3, r3
 80005ee:	69ba      	ldr	r2, [r7, #24]
 80005f0:	4013      	ands	r3, r2
 80005f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	689a      	ldr	r2, [r3, #8]
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	69ba      	ldr	r2, [r7, #24]
 8000602:	4313      	orrs	r3, r2
 8000604:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	69ba      	ldr	r2, [r7, #24]
 800060a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	2b00      	cmp	r3, #0
 8000616:	f000 80b4 	beq.w	8000782 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b5f      	ldr	r3, [pc, #380]	; (800079c <HAL_GPIO_Init+0x308>)
 8000620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000622:	4a5e      	ldr	r2, [pc, #376]	; (800079c <HAL_GPIO_Init+0x308>)
 8000624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000628:	6453      	str	r3, [r2, #68]	; 0x44
 800062a:	4b5c      	ldr	r3, [pc, #368]	; (800079c <HAL_GPIO_Init+0x308>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000636:	4a5a      	ldr	r2, [pc, #360]	; (80007a0 <HAL_GPIO_Init+0x30c>)
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	089b      	lsrs	r3, r3, #2
 800063c:	3302      	adds	r3, #2
 800063e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	f003 0303 	and.w	r3, r3, #3
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	220f      	movs	r2, #15
 800064e:	fa02 f303 	lsl.w	r3, r2, r3
 8000652:	43db      	mvns	r3, r3
 8000654:	69ba      	ldr	r2, [r7, #24]
 8000656:	4013      	ands	r3, r2
 8000658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a51      	ldr	r2, [pc, #324]	; (80007a4 <HAL_GPIO_Init+0x310>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d02b      	beq.n	80006ba <HAL_GPIO_Init+0x226>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a50      	ldr	r2, [pc, #320]	; (80007a8 <HAL_GPIO_Init+0x314>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d025      	beq.n	80006b6 <HAL_GPIO_Init+0x222>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a4f      	ldr	r2, [pc, #316]	; (80007ac <HAL_GPIO_Init+0x318>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d01f      	beq.n	80006b2 <HAL_GPIO_Init+0x21e>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a4e      	ldr	r2, [pc, #312]	; (80007b0 <HAL_GPIO_Init+0x31c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d019      	beq.n	80006ae <HAL_GPIO_Init+0x21a>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a4d      	ldr	r2, [pc, #308]	; (80007b4 <HAL_GPIO_Init+0x320>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d013      	beq.n	80006aa <HAL_GPIO_Init+0x216>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a4c      	ldr	r2, [pc, #304]	; (80007b8 <HAL_GPIO_Init+0x324>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d00d      	beq.n	80006a6 <HAL_GPIO_Init+0x212>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a4b      	ldr	r2, [pc, #300]	; (80007bc <HAL_GPIO_Init+0x328>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d007      	beq.n	80006a2 <HAL_GPIO_Init+0x20e>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a4a      	ldr	r2, [pc, #296]	; (80007c0 <HAL_GPIO_Init+0x32c>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d101      	bne.n	800069e <HAL_GPIO_Init+0x20a>
 800069a:	2307      	movs	r3, #7
 800069c:	e00e      	b.n	80006bc <HAL_GPIO_Init+0x228>
 800069e:	2308      	movs	r3, #8
 80006a0:	e00c      	b.n	80006bc <HAL_GPIO_Init+0x228>
 80006a2:	2306      	movs	r3, #6
 80006a4:	e00a      	b.n	80006bc <HAL_GPIO_Init+0x228>
 80006a6:	2305      	movs	r3, #5
 80006a8:	e008      	b.n	80006bc <HAL_GPIO_Init+0x228>
 80006aa:	2304      	movs	r3, #4
 80006ac:	e006      	b.n	80006bc <HAL_GPIO_Init+0x228>
 80006ae:	2303      	movs	r3, #3
 80006b0:	e004      	b.n	80006bc <HAL_GPIO_Init+0x228>
 80006b2:	2302      	movs	r3, #2
 80006b4:	e002      	b.n	80006bc <HAL_GPIO_Init+0x228>
 80006b6:	2301      	movs	r3, #1
 80006b8:	e000      	b.n	80006bc <HAL_GPIO_Init+0x228>
 80006ba:	2300      	movs	r3, #0
 80006bc:	69fa      	ldr	r2, [r7, #28]
 80006be:	f002 0203 	and.w	r2, r2, #3
 80006c2:	0092      	lsls	r2, r2, #2
 80006c4:	4093      	lsls	r3, r2
 80006c6:	69ba      	ldr	r2, [r7, #24]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006cc:	4934      	ldr	r1, [pc, #208]	; (80007a0 <HAL_GPIO_Init+0x30c>)
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	089b      	lsrs	r3, r3, #2
 80006d2:	3302      	adds	r3, #2
 80006d4:	69ba      	ldr	r2, [r7, #24]
 80006d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006da:	4b3a      	ldr	r3, [pc, #232]	; (80007c4 <HAL_GPIO_Init+0x330>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	43db      	mvns	r3, r3
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	4013      	ands	r3, r2
 80006e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80006f6:	69ba      	ldr	r2, [r7, #24]
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80006fe:	4a31      	ldr	r2, [pc, #196]	; (80007c4 <HAL_GPIO_Init+0x330>)
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000704:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <HAL_GPIO_Init+0x330>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	43db      	mvns	r3, r3
 800070e:	69ba      	ldr	r2, [r7, #24]
 8000710:	4013      	ands	r3, r2
 8000712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071c:	2b00      	cmp	r3, #0
 800071e:	d003      	beq.n	8000728 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000720:	69ba      	ldr	r2, [r7, #24]
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	4313      	orrs	r3, r2
 8000726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000728:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <HAL_GPIO_Init+0x330>)
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800072e:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <HAL_GPIO_Init+0x330>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000734:	693b      	ldr	r3, [r7, #16]
 8000736:	43db      	mvns	r3, r3
 8000738:	69ba      	ldr	r2, [r7, #24]
 800073a:	4013      	ands	r3, r2
 800073c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800074a:	69ba      	ldr	r2, [r7, #24]
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	4313      	orrs	r3, r2
 8000750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000752:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <HAL_GPIO_Init+0x330>)
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <HAL_GPIO_Init+0x330>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	43db      	mvns	r3, r3
 8000762:	69ba      	ldr	r2, [r7, #24]
 8000764:	4013      	ands	r3, r2
 8000766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000770:	2b00      	cmp	r3, #0
 8000772:	d003      	beq.n	800077c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	4313      	orrs	r3, r2
 800077a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <HAL_GPIO_Init+0x330>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3301      	adds	r3, #1
 8000786:	61fb      	str	r3, [r7, #28]
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	2b0f      	cmp	r3, #15
 800078c:	f67f ae90 	bls.w	80004b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000790:	bf00      	nop
 8000792:	3724      	adds	r7, #36	; 0x24
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40023800 	.word	0x40023800
 80007a0:	40013800 	.word	0x40013800
 80007a4:	40020000 	.word	0x40020000
 80007a8:	40020400 	.word	0x40020400
 80007ac:	40020800 	.word	0x40020800
 80007b0:	40020c00 	.word	0x40020c00
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40021400 	.word	0x40021400
 80007bc:	40021800 	.word	0x40021800
 80007c0:	40021c00 	.word	0x40021c00
 80007c4:	40013c00 	.word	0x40013c00

080007c8 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <HAL_RCC_GetHCLKFreq+0x14>)
 80007de:	681b      	ldr	r3, [r3, #0]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000008 	.word	0x20000008

080007f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80007f4:	f7ff fff0 	bl	80007d8 <HAL_RCC_GetHCLKFreq>
 80007f8:	4601      	mov	r1, r0
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	0a9b      	lsrs	r3, r3, #10
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	4a03      	ldr	r2, [pc, #12]	; (8000814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000806:	5cd3      	ldrb	r3, [r2, r3]
 8000808:	fa21 f303 	lsr.w	r3, r1, r3
}
 800080c:	4618      	mov	r0, r3
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	0800116c 	.word	0x0800116c

08000818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800081c:	f7ff ffdc 	bl	80007d8 <HAL_RCC_GetHCLKFreq>
 8000820:	4601      	mov	r1, r0
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	0b5b      	lsrs	r3, r3, #13
 8000828:	f003 0307 	and.w	r3, r3, #7
 800082c:	4a03      	ldr	r2, [pc, #12]	; (800083c <HAL_RCC_GetPCLK2Freq+0x24>)
 800082e:	5cd3      	ldrb	r3, [r2, r3]
 8000830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	0800116c 	.word	0x0800116c

08000840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e03f      	b.n	80008d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d106      	bne.n	800086c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f000 f837 	bl	80008da <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2224      	movs	r2, #36	; 0x24
 8000870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	68da      	ldr	r2, [r3, #12]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f000 f915 	bl	8000ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	691a      	ldr	r2, [r3, #16]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80008a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68da      	ldr	r2, [r3, #12]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80008b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2200      	movs	r2, #0
 80008be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2220      	movs	r2, #32
 80008c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2220      	movs	r2, #32
 80008cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b088      	sub	sp, #32
 80008f2:	af02      	add	r7, sp, #8
 80008f4:	60f8      	str	r0, [r7, #12]
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4613      	mov	r3, r2
 80008fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b20      	cmp	r3, #32
 800090c:	f040 8083 	bne.w	8000a16 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <HAL_UART_Transmit+0x2e>
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	e07b      	b.n	8000a18 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000926:	2b01      	cmp	r3, #1
 8000928:	d101      	bne.n	800092e <HAL_UART_Transmit+0x40>
 800092a:	2302      	movs	r3, #2
 800092c:	e074      	b.n	8000a18 <HAL_UART_Transmit+0x12a>
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2201      	movs	r2, #1
 8000932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2200      	movs	r2, #0
 800093a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2221      	movs	r2, #33	; 0x21
 8000940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000944:	f7ff fca8 	bl	8000298 <HAL_GetTick>
 8000948:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	88fa      	ldrh	r2, [r7, #6]
 800094e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	88fa      	ldrh	r2, [r7, #6]
 8000954:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000956:	e042      	b.n	80009de <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800095c:	b29b      	uxth	r3, r3
 800095e:	3b01      	subs	r3, #1
 8000960:	b29a      	uxth	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800096e:	d122      	bne.n	80009b6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	2200      	movs	r2, #0
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f000 f850 	bl	8000a20 <UART_WaitOnFlagUntilTimeout>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8000986:	2303      	movs	r3, #3
 8000988:	e046      	b.n	8000a18 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800099c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	691b      	ldr	r3, [r3, #16]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d103      	bne.n	80009ae <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	3302      	adds	r3, #2
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	e017      	b.n	80009de <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	3301      	adds	r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	e013      	b.n	80009de <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	2200      	movs	r2, #0
 80009be:	2180      	movs	r1, #128	; 0x80
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f000 f82d 	bl	8000a20 <UART_WaitOnFlagUntilTimeout>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80009cc:	2303      	movs	r3, #3
 80009ce:	e023      	b.n	8000a18 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	60ba      	str	r2, [r7, #8]
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1b7      	bne.n	8000958 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	; 0x40
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f000 f814 	bl	8000a20 <UART_WaitOnFlagUntilTimeout>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80009fe:	2303      	movs	r3, #3
 8000a00:	e00a      	b.n	8000a18 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2220      	movs	r2, #32
 8000a06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8000a16:	2302      	movs	r3, #2
  }
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000a30:	e02c      	b.n	8000a8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a38:	d028      	beq.n	8000a8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d007      	beq.n	8000a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8000a40:	f7ff fc2a 	bl	8000298 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d21d      	bcs.n	8000a8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68da      	ldr	r2, [r3, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000a5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	695a      	ldr	r2, [r3, #20]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f022 0201 	bic.w	r2, r2, #1
 8000a6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2220      	movs	r2, #32
 8000a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	e00f      	b.n	8000aac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	4013      	ands	r3, r2
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	bf0c      	ite	eq
 8000a9c:	2301      	moveq	r3, #1
 8000a9e:	2300      	movne	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d0c3      	beq.n	8000a32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ab4:	b5b0      	push	{r4, r5, r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68da      	ldr	r2, [r3, #12]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	431a      	orrs	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8000af4:	f023 030c 	bic.w	r3, r3, #12
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	6812      	ldr	r2, [r2, #0]
 8000afc:	68f9      	ldr	r1, [r7, #12]
 8000afe:	430b      	orrs	r3, r1
 8000b00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	699a      	ldr	r2, [r3, #24]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	430a      	orrs	r2, r1
 8000b16:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b20:	f040 80e4 	bne.w	8000cec <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4aab      	ldr	r2, [pc, #684]	; (8000dd8 <UART_SetConfig+0x324>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d004      	beq.n	8000b38 <UART_SetConfig+0x84>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4aaa      	ldr	r2, [pc, #680]	; (8000ddc <UART_SetConfig+0x328>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d16c      	bne.n	8000c12 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000b38:	f7ff fe6e 	bl	8000818 <HAL_RCC_GetPCLK2Freq>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	4613      	mov	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	009a      	lsls	r2, r3, #2
 8000b46:	441a      	add	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4aa3      	ldr	r2, [pc, #652]	; (8000de0 <UART_SetConfig+0x32c>)
 8000b54:	fba2 2303 	umull	r2, r3, r2, r3
 8000b58:	095b      	lsrs	r3, r3, #5
 8000b5a:	011c      	lsls	r4, r3, #4
 8000b5c:	f7ff fe5c 	bl	8000818 <HAL_RCC_GetPCLK2Freq>
 8000b60:	4602      	mov	r2, r0
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	441a      	add	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	fbb2 f5f3 	udiv	r5, r2, r3
 8000b76:	f7ff fe4f 	bl	8000818 <HAL_RCC_GetPCLK2Freq>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	009a      	lsls	r2, r3, #2
 8000b84:	441a      	add	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b90:	4a93      	ldr	r2, [pc, #588]	; (8000de0 <UART_SetConfig+0x32c>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2264      	movs	r2, #100	; 0x64
 8000b9a:	fb02 f303 	mul.w	r3, r2, r3
 8000b9e:	1aeb      	subs	r3, r5, r3
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	3332      	adds	r3, #50	; 0x32
 8000ba4:	4a8e      	ldr	r2, [pc, #568]	; (8000de0 <UART_SetConfig+0x32c>)
 8000ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8000baa:	095b      	lsrs	r3, r3, #5
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000bb2:	441c      	add	r4, r3
 8000bb4:	f7ff fe30 	bl	8000818 <HAL_RCC_GetPCLK2Freq>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	4613      	mov	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	4413      	add	r3, r2
 8000bc0:	009a      	lsls	r2, r3, #2
 8000bc2:	441a      	add	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fbb2 f5f3 	udiv	r5, r2, r3
 8000bce:	f7ff fe23 	bl	8000818 <HAL_RCC_GetPCLK2Freq>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	009a      	lsls	r2, r3, #2
 8000bdc:	441a      	add	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be8:	4a7d      	ldr	r2, [pc, #500]	; (8000de0 <UART_SetConfig+0x32c>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2264      	movs	r2, #100	; 0x64
 8000bf2:	fb02 f303 	mul.w	r3, r2, r3
 8000bf6:	1aeb      	subs	r3, r5, r3
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	3332      	adds	r3, #50	; 0x32
 8000bfc:	4a78      	ldr	r2, [pc, #480]	; (8000de0 <UART_SetConfig+0x32c>)
 8000bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	f003 0207 	and.w	r2, r3, #7
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4422      	add	r2, r4
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	e154      	b.n	8000ebc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000c12:	f7ff fded 	bl	80007f0 <HAL_RCC_GetPCLK1Freq>
 8000c16:	4602      	mov	r2, r0
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	009a      	lsls	r2, r3, #2
 8000c20:	441a      	add	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2c:	4a6c      	ldr	r2, [pc, #432]	; (8000de0 <UART_SetConfig+0x32c>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	011c      	lsls	r4, r3, #4
 8000c36:	f7ff fddb 	bl	80007f0 <HAL_RCC_GetPCLK1Freq>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	009a      	lsls	r2, r3, #2
 8000c44:	441a      	add	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	fbb2 f5f3 	udiv	r5, r2, r3
 8000c50:	f7ff fdce 	bl	80007f0 <HAL_RCC_GetPCLK1Freq>
 8000c54:	4602      	mov	r2, r0
 8000c56:	4613      	mov	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	009a      	lsls	r2, r3, #2
 8000c5e:	441a      	add	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4a5d      	ldr	r2, [pc, #372]	; (8000de0 <UART_SetConfig+0x32c>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	095b      	lsrs	r3, r3, #5
 8000c72:	2264      	movs	r2, #100	; 0x64
 8000c74:	fb02 f303 	mul.w	r3, r2, r3
 8000c78:	1aeb      	subs	r3, r5, r3
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	3332      	adds	r3, #50	; 0x32
 8000c7e:	4a58      	ldr	r2, [pc, #352]	; (8000de0 <UART_SetConfig+0x32c>)
 8000c80:	fba2 2303 	umull	r2, r3, r2, r3
 8000c84:	095b      	lsrs	r3, r3, #5
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000c8c:	441c      	add	r4, r3
 8000c8e:	f7ff fdaf 	bl	80007f0 <HAL_RCC_GetPCLK1Freq>
 8000c92:	4602      	mov	r2, r0
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	009a      	lsls	r2, r3, #2
 8000c9c:	441a      	add	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	fbb2 f5f3 	udiv	r5, r2, r3
 8000ca8:	f7ff fda2 	bl	80007f0 <HAL_RCC_GetPCLK1Freq>
 8000cac:	4602      	mov	r2, r0
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	009a      	lsls	r2, r3, #2
 8000cb6:	441a      	add	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4a47      	ldr	r2, [pc, #284]	; (8000de0 <UART_SetConfig+0x32c>)
 8000cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc8:	095b      	lsrs	r3, r3, #5
 8000cca:	2264      	movs	r2, #100	; 0x64
 8000ccc:	fb02 f303 	mul.w	r3, r2, r3
 8000cd0:	1aeb      	subs	r3, r5, r3
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	3332      	adds	r3, #50	; 0x32
 8000cd6:	4a42      	ldr	r2, [pc, #264]	; (8000de0 <UART_SetConfig+0x32c>)
 8000cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cdc:	095b      	lsrs	r3, r3, #5
 8000cde:	f003 0207 	and.w	r2, r3, #7
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4422      	add	r2, r4
 8000ce8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8000cea:	e0e7      	b.n	8000ebc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a39      	ldr	r2, [pc, #228]	; (8000dd8 <UART_SetConfig+0x324>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d004      	beq.n	8000d00 <UART_SetConfig+0x24c>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a38      	ldr	r2, [pc, #224]	; (8000ddc <UART_SetConfig+0x328>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d171      	bne.n	8000de4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000d00:	f7ff fd8a 	bl	8000818 <HAL_RCC_GetPCLK2Freq>
 8000d04:	4602      	mov	r2, r0
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	009a      	lsls	r2, r3, #2
 8000d0e:	441a      	add	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4a31      	ldr	r2, [pc, #196]	; (8000de0 <UART_SetConfig+0x32c>)
 8000d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d20:	095b      	lsrs	r3, r3, #5
 8000d22:	011c      	lsls	r4, r3, #4
 8000d24:	f7ff fd78 	bl	8000818 <HAL_RCC_GetPCLK2Freq>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	009a      	lsls	r2, r3, #2
 8000d32:	441a      	add	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	fbb2 f5f3 	udiv	r5, r2, r3
 8000d3e:	f7ff fd6b 	bl	8000818 <HAL_RCC_GetPCLK2Freq>
 8000d42:	4602      	mov	r2, r0
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	009a      	lsls	r2, r3, #2
 8000d4c:	441a      	add	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d58:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <UART_SetConfig+0x32c>)
 8000d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2264      	movs	r2, #100	; 0x64
 8000d62:	fb02 f303 	mul.w	r3, r2, r3
 8000d66:	1aeb      	subs	r3, r5, r3
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	3332      	adds	r3, #50	; 0x32
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <UART_SetConfig+0x32c>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d78:	441c      	add	r4, r3
 8000d7a:	f7ff fd4d 	bl	8000818 <HAL_RCC_GetPCLK2Freq>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	009a      	lsls	r2, r3, #2
 8000d88:	441a      	add	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	fbb2 f5f3 	udiv	r5, r2, r3
 8000d94:	f7ff fd40 	bl	8000818 <HAL_RCC_GetPCLK2Freq>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	009a      	lsls	r2, r3, #2
 8000da2:	441a      	add	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	4a0c      	ldr	r2, [pc, #48]	; (8000de0 <UART_SetConfig+0x32c>)
 8000db0:	fba2 2303 	umull	r2, r3, r2, r3
 8000db4:	095b      	lsrs	r3, r3, #5
 8000db6:	2264      	movs	r2, #100	; 0x64
 8000db8:	fb02 f303 	mul.w	r3, r2, r3
 8000dbc:	1aeb      	subs	r3, r5, r3
 8000dbe:	011b      	lsls	r3, r3, #4
 8000dc0:	3332      	adds	r3, #50	; 0x32
 8000dc2:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <UART_SetConfig+0x32c>)
 8000dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc8:	095b      	lsrs	r3, r3, #5
 8000dca:	f003 020f 	and.w	r2, r3, #15
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4422      	add	r2, r4
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	e071      	b.n	8000ebc <UART_SetConfig+0x408>
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40011400 	.word	0x40011400
 8000de0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000de4:	f7ff fd04 	bl	80007f0 <HAL_RCC_GetPCLK1Freq>
 8000de8:	4602      	mov	r2, r0
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	009a      	lsls	r2, r3, #2
 8000df2:	441a      	add	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4a31      	ldr	r2, [pc, #196]	; (8000ec4 <UART_SetConfig+0x410>)
 8000e00:	fba2 2303 	umull	r2, r3, r2, r3
 8000e04:	095b      	lsrs	r3, r3, #5
 8000e06:	011c      	lsls	r4, r3, #4
 8000e08:	f7ff fcf2 	bl	80007f0 <HAL_RCC_GetPCLK1Freq>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	009a      	lsls	r2, r3, #2
 8000e16:	441a      	add	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	fbb2 f5f3 	udiv	r5, r2, r3
 8000e22:	f7ff fce5 	bl	80007f0 <HAL_RCC_GetPCLK1Freq>
 8000e26:	4602      	mov	r2, r0
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	009a      	lsls	r2, r3, #2
 8000e30:	441a      	add	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3c:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <UART_SetConfig+0x410>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2264      	movs	r2, #100	; 0x64
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	1aeb      	subs	r3, r5, r3
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	3332      	adds	r3, #50	; 0x32
 8000e50:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <UART_SetConfig+0x410>)
 8000e52:	fba2 2303 	umull	r2, r3, r2, r3
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e5c:	441c      	add	r4, r3
 8000e5e:	f7ff fcc7 	bl	80007f0 <HAL_RCC_GetPCLK1Freq>
 8000e62:	4602      	mov	r2, r0
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	009a      	lsls	r2, r3, #2
 8000e6c:	441a      	add	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	fbb2 f5f3 	udiv	r5, r2, r3
 8000e78:	f7ff fcba 	bl	80007f0 <HAL_RCC_GetPCLK1Freq>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	009a      	lsls	r2, r3, #2
 8000e86:	441a      	add	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <UART_SetConfig+0x410>)
 8000e94:	fba2 2303 	umull	r2, r3, r2, r3
 8000e98:	095b      	lsrs	r3, r3, #5
 8000e9a:	2264      	movs	r2, #100	; 0x64
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	1aeb      	subs	r3, r5, r3
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	3332      	adds	r3, #50	; 0x32
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <UART_SetConfig+0x410>)
 8000ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eac:	095b      	lsrs	r3, r3, #5
 8000eae:	f003 020f 	and.w	r2, r3, #15
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4422      	add	r2, r4
 8000eb8:	609a      	str	r2, [r3, #8]
}
 8000eba:	e7ff      	b.n	8000ebc <UART_SetConfig+0x408>
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec4:	51eb851f 	.word	0x51eb851f

08000ec8 <send_string>:
UART_HandleTypeDef uart;



void send_string(char* s)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&uart, (uint8_t*)s, strlen(s), 1000);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff f979 	bl	80001c8 <strlen>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <send_string+0x28>)
 8000ee2:	f7ff fd04 	bl	80008ee <HAL_UART_Transmit>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000040 	.word	0x20000040

08000ef4 <uart2_init>:
void receive_string(uint8_t* x){
	HAL_UART_Receive(&uart, x, sizeof(*x), 1000);
}


void uart2_init(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

	gpio.Mode = GPIO_MODE_AF_PP;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <uart2_init+0x7c>)
 8000efa:	2202      	movs	r2, #2
 8000efc:	605a      	str	r2, [r3, #4]
	gpio.Pin = GPIO_PIN_2;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <uart2_init+0x7c>)
 8000f00:	2204      	movs	r2, #4
 8000f02:	601a      	str	r2, [r3, #0]
	gpio.Alternate = GPIO_AF7_USART2;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <uart2_init+0x7c>)
 8000f06:	2207      	movs	r2, #7
 8000f08:	611a      	str	r2, [r3, #16]
	gpio.Pull = GPIO_NOPULL;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <uart2_init+0x7c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
	gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <uart2_init+0x7c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &gpio);
 8000f16:	4916      	ldr	r1, [pc, #88]	; (8000f70 <uart2_init+0x7c>)
 8000f18:	4816      	ldr	r0, [pc, #88]	; (8000f74 <uart2_init+0x80>)
 8000f1a:	f7ff fabb 	bl	8000494 <HAL_GPIO_Init>

	gpio.Mode = GPIO_MODE_AF_OD;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <uart2_init+0x7c>)
 8000f20:	2212      	movs	r2, #18
 8000f22:	605a      	str	r2, [r3, #4]
	gpio.Pin = GPIO_PIN_3;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <uart2_init+0x7c>)
 8000f26:	2208      	movs	r2, #8
 8000f28:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA, &gpio);
 8000f2a:	4911      	ldr	r1, [pc, #68]	; (8000f70 <uart2_init+0x7c>)
 8000f2c:	4811      	ldr	r0, [pc, #68]	; (8000f74 <uart2_init+0x80>)
 8000f2e:	f7ff fab1 	bl	8000494 <HAL_GPIO_Init>

	uart.Instance = USART2;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <uart2_init+0x84>)
 8000f34:	4a11      	ldr	r2, [pc, #68]	; (8000f7c <uart2_init+0x88>)
 8000f36:	601a      	str	r2, [r3, #0]
	uart.Init.BaudRate = 115200;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <uart2_init+0x84>)
 8000f3a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f3e:	605a      	str	r2, [r3, #4]
	uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <uart2_init+0x84>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
	uart.Init.Parity = UART_PARITY_NONE;
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <uart2_init+0x84>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
	uart.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <uart2_init+0x84>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
	uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <uart2_init+0x84>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
	uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <uart2_init+0x84>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
	uart.Init.Mode = UART_MODE_TX_RX;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <uart2_init+0x84>)
 8000f60:	220c      	movs	r2, #12
 8000f62:	615a      	str	r2, [r3, #20]
	HAL_UART_Init(&uart);
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <uart2_init+0x84>)
 8000f66:	f7ff fc6b 	bl	8000840 <HAL_UART_Init>
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000002c 	.word	0x2000002c
 8000f74:	40020000 	.word	0x40020000
 8000f78:	20000040 	.word	0x20000040
 8000f7c:	40004400 	.word	0x40004400

08000f80 <main>:

#include "main.h"


int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
	HAL_Init();
 8000f86:	f7ff f927 	bl	80001d8 <HAL_Init>
	int n = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <main+0x8c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <main+0x8c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <main+0x8c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <main+0x8c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a16      	ldr	r2, [pc, #88]	; (800100c <main+0x8c>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <main+0x8c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_USART2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <main+0x8c>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <main+0x8c>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <main+0x8c>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]

	uart2_init();
 8000fe2:	f7ff ff87 	bl	8000ef4 <uart2_init>

	while(1){

		if (n == 0) send_string("Hello world3343!\r\n");
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d103      	bne.n	8000ff4 <main+0x74>
 8000fec:	4808      	ldr	r0, [pc, #32]	; (8001010 <main+0x90>)
 8000fee:	f7ff ff6b 	bl	8000ec8 <send_string>
 8000ff2:	e002      	b.n	8000ffa <main+0x7a>
		else send_string("Hello world 23452!\r\n");
 8000ff4:	4807      	ldr	r0, [pc, #28]	; (8001014 <main+0x94>)
 8000ff6:	f7ff ff67 	bl	8000ec8 <send_string>
		n++;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
		if (n > 1) n = 0;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b01      	cmp	r3, #1
 8001004:	ddef      	ble.n	8000fe6 <main+0x66>
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
		if (n == 0) send_string("Hello world3343!\r\n");
 800100a:	e7ec      	b.n	8000fe6 <main+0x66>
 800100c:	40023800 	.word	0x40023800
 8001010:	08001130 	.word	0x08001130
 8001014:	08001144 	.word	0x08001144

08001018 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800101c:	f7ff f928 	bl	8000270 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8001020:	f7ff fa2b 	bl	800047a <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <SystemInit+0x60>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a15      	ldr	r2, [pc, #84]	; (8001088 <SystemInit+0x60>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <SystemInit+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <SystemInit+0x64>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <SystemInit+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <SystemInit+0x64>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <SystemInit+0x64>)
 8001054:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <SystemInit+0x64>)
 8001060:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <SystemInit+0x68>)
 8001062:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <SystemInit+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a08      	ldr	r2, [pc, #32]	; (800108c <SystemInit+0x64>)
 800106a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <SystemInit+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SystemInit+0x60>)
 8001078:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800107c:	609a      	str	r2, [r3, #8]
#endif
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	40023800 	.word	0x40023800
 8001090:	24003010 	.word	0x24003010

08001094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001098:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800109a:	e003      	b.n	80010a4 <LoopCopyDataInit>

0800109c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800109e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010a2:	3104      	adds	r1, #4

080010a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010ac:	d3f6      	bcc.n	800109c <CopyDataInit>
  ldr  r2, =_sbss
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010b0:	e002      	b.n	80010b8 <LoopFillZerobss>

080010b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010b4:	f842 3b04 	str.w	r3, [r2], #4

080010b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010bc:	d3f9      	bcc.n	80010b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010be:	f7ff ffb3 	bl	8001028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c2:	f000 f811 	bl	80010e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff ff5b 	bl	8000f80 <main>
  bx  lr    
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010d0:	08001194 	.word	0x08001194
  ldr  r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010d8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80010dc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80010e0:	20000080 	.word	0x20000080

080010e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC_IRQHandler>
	...

080010e8 <__libc_init_array>:
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	4e0d      	ldr	r6, [pc, #52]	; (8001120 <__libc_init_array+0x38>)
 80010ec:	4c0d      	ldr	r4, [pc, #52]	; (8001124 <__libc_init_array+0x3c>)
 80010ee:	1ba4      	subs	r4, r4, r6
 80010f0:	10a4      	asrs	r4, r4, #2
 80010f2:	2500      	movs	r5, #0
 80010f4:	42a5      	cmp	r5, r4
 80010f6:	d109      	bne.n	800110c <__libc_init_array+0x24>
 80010f8:	4e0b      	ldr	r6, [pc, #44]	; (8001128 <__libc_init_array+0x40>)
 80010fa:	4c0c      	ldr	r4, [pc, #48]	; (800112c <__libc_init_array+0x44>)
 80010fc:	f000 f83a 	bl	8001174 <_init>
 8001100:	1ba4      	subs	r4, r4, r6
 8001102:	10a4      	asrs	r4, r4, #2
 8001104:	2500      	movs	r5, #0
 8001106:	42a5      	cmp	r5, r4
 8001108:	d105      	bne.n	8001116 <__libc_init_array+0x2e>
 800110a:	bd70      	pop	{r4, r5, r6, pc}
 800110c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001110:	4798      	blx	r3
 8001112:	3501      	adds	r5, #1
 8001114:	e7ee      	b.n	80010f4 <__libc_init_array+0xc>
 8001116:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800111a:	4798      	blx	r3
 800111c:	3501      	adds	r5, #1
 800111e:	e7f2      	b.n	8001106 <__libc_init_array+0x1e>
 8001120:	0800118c 	.word	0x0800118c
 8001124:	0800118c 	.word	0x0800118c
 8001128:	0800118c 	.word	0x0800118c
 800112c:	08001190 	.word	0x08001190
 8001130:	6c6c6548 	.word	0x6c6c6548
 8001134:	6f77206f 	.word	0x6f77206f
 8001138:	33646c72 	.word	0x33646c72
 800113c:	21333433 	.word	0x21333433
 8001140:	00000a0d 	.word	0x00000a0d
 8001144:	6c6c6548 	.word	0x6c6c6548
 8001148:	6f77206f 	.word	0x6f77206f
 800114c:	20646c72 	.word	0x20646c72
 8001150:	35343332 	.word	0x35343332
 8001154:	0a0d2132 	.word	0x0a0d2132
 8001158:	00000000 	.word	0x00000000

0800115c <AHBPrescTable>:
	...
 8001164:	04030201 09080706                       ........

0800116c <APBPrescTable>:
 800116c:	00000000 04030201                       ........

08001174 <_init>:
 8001174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001176:	bf00      	nop
 8001178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800117a:	bc08      	pop	{r3}
 800117c:	469e      	mov	lr, r3
 800117e:	4770      	bx	lr

08001180 <_fini>:
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	bf00      	nop
 8001184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001186:	bc08      	pop	{r3}
 8001188:	469e      	mov	lr, r3
 800118a:	4770      	bx	lr
